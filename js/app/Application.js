
/*
 * $Id: base64.js,v 2.12 2013/05/06 07:54:20 dankogai Exp dankogai $
 *
 *  Licensed under the MIT license.
 *    http://opensource.org/licenses/mit-license
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 */

(function(global) {
    
    if (global.Base64) return;
    var version = "2.1.2";
    // if node.js, we use Buffer
    var buffer;
    if (typeof module !== 'undefined' && module.exports) {
        buffer = require('buffer').Buffer;
    }
    // constants
    var b64chars
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var b64tab = function(bin) {
        var t = {};
        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
        return t;
    }(b64chars);
    var fromCharCode = String.fromCharCode;
    // encoder stuff
    var cb_utob = function(c) {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c
                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
                                + fromCharCode(0x80 | (cc & 0x3f)))
                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                   + fromCharCode(0x80 | ( cc         & 0x3f)));
        } else {
            var cc = 0x10000
                + (c.charCodeAt(0) - 0xD800) * 0x400
                + (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                    + fromCharCode(0x80 | ( cc         & 0x3f)));
        }
    };
    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var utob = function(u) {
        return u.replace(re_utob, cb_utob);
    };
    var cb_encode = function(ccc) {
        var padlen = [0, 2, 1][ccc.length % 3],
        ord = ccc.charCodeAt(0) << 16
            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
        chars = [
            b64chars.charAt( ord >>> 18),
            b64chars.charAt((ord >>> 12) & 63),
            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
        ];
        return chars.join('');
    };
    var btoa = global.btoa || function(b) {
        return b.replace(/[\s\S]{1,3}/g, cb_encode);
    };
    var _encode = buffer
        ? function (u) { return (new buffer(u)).toString('base64') } 
    : function (u) { return btoa(utob(u)) }
    ;
    var encode = function(u, urisafe) {
        return !urisafe 
            ? _encode(u)
            : _encode(u).replace(/[+\/]/g, function(m0) {
                return m0 == '+' ? '-' : '_';
            }).replace(/=/g, '');
    };
    var encodeURI = function(u) { return encode(u, true) };
    // decoder stuff
    var re_btou = new RegExp([
        '[\xC0-\xDF][\x80-\xBF]',
        '[\xE0-\xEF][\x80-\xBF]{2}',
        '[\xF0-\xF7][\x80-\xBF]{3}'
    ].join('|'), 'g');
    var cb_btou = function(cccc) {
        switch(cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                |    ((0x3f & cccc.charCodeAt(1)) << 12)
                |    ((0x3f & cccc.charCodeAt(2)) <<  6)
                |     (0x3f & cccc.charCodeAt(3)),
            offset = cp - 0x10000;
            return (fromCharCode((offset  >>> 10) + 0xD800)
                    + fromCharCode((offset & 0x3FF) + 0xDC00));
        case 3:
            return fromCharCode(
                ((0x0f & cccc.charCodeAt(0)) << 12)
                    | ((0x3f & cccc.charCodeAt(1)) << 6)
                    |  (0x3f & cccc.charCodeAt(2))
            );
        default:
            return  fromCharCode(
                ((0x1f & cccc.charCodeAt(0)) << 6)
                    |  (0x3f & cccc.charCodeAt(1))
            );
        }
    };
    var btou = function(b) {
        return b.replace(re_btou, cb_btou);
    };
    var cb_decode = function(cccc) {
        var len = cccc.length,
        padlen = len % 4,
        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
        chars = [
            fromCharCode( n >>> 16),
            fromCharCode((n >>>  8) & 0xff),
            fromCharCode( n         & 0xff)
        ];
        chars.length -= [0, 0, 2, 1][padlen];
        return chars.join('');
    };
    var atob = global.atob || function(a){
        return a.replace(/[\s\S]{1,4}/g, cb_decode);
    };
    var _decode = buffer
        ? function(a) { return (new buffer(a, 'base64')).toString() }
    : function(a) { return btou(atob(a)) };
    var decode = function(a){
        return _decode(
            a.replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })
                .replace(/[^A-Za-z0-9\+\/]/g, '')
        );
    };
    // export Base64
    global.Base64 = {
        VERSION: version,
        atob: atob,
        btoa: btoa,
        fromBase64: decode,
        toBase64: encode,
        utob: utob,
        encode: encode,
        encodeURI: encodeURI,
        btou: btou,
        decode: decode
    };
    // if ES5 is available, make Base64.extendString() available
    if (typeof Object.defineProperty === 'function') {
        var noEnum = function(v){
            return {value:v,enumerable:false,writable:true,configurable:true};
        };
        global.Base64.extendString = function () {
            Object.defineProperty(
                String.prototype, 'fromBase64', noEnum(function () {
                    return decode(this)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64', noEnum(function (urisafe) {
                    return encode(this, urisafe)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64URI', noEnum(function () {
                    return encode(this, true)
                }));
        };
    }
    // that's it!
})(this);
define("base64", function(){});

/*!
 * jQuery JavaScript Library v2.0.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:30Z
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//
var
	// A central reference to the root jQuery(document)
	rootjQuery,

	// The deferred used on DOM ready
	readyList,

	// Support: IE9
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "2.0.3",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler and self cleanup method
	completed = function() {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );
		jQuery.ready();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		// Support: Safari <= 5.1 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Support: Firefox <20
		// The try/catch suppresses exceptions thrown when attempting to access
		// the "constructor" property of certain host objects, ie. |window.location|
		// https://bugzilla.mozilla.org/show_bug.cgi?id=814622
		try {
			if ( obj.constructor &&
					!core_hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );

		if ( scripts ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: JSON.parse,

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString( data , "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
				indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	trim: function( text ) {
		return text == null ? "" : core_trim.call( text );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : core_indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: Date.now,

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.9.4-pre
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-06-03
 */
(function( window, undefined ) {

var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {
	var input = document.createElement("input"),
		fragment = document.createDocumentFragment(),
		div = document.createElement("div"),
		select = document.createElement("select"),
		opt = select.appendChild( document.createElement("option") );

	// Finish early in limited environments
	if ( !input.type ) {
		return support;
	}

	input.type = "checkbox";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Will be defined later
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;
	support.pixelPosition = false;

	// Make sure checked status is properly cloned
	// Support: IE9, IE10
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement("input");
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment.appendChild( input );

	// Support: Safari 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: Firefox, Chrome, Safari
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	support.focusinBubbles = "onfocusin" in window;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv,
			// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
			divReset = "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",
			body = document.getElementsByTagName("body")[ 0 ];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		// Check box-sizing and margin behavior.
		body.appendChild( container ).appendChild( div );
		div.innerHTML = "";
		// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
		div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		body.removeChild( container );
	});

	return support;
})( {} );

/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var data_user, data_priv,
	rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;

Data.accepts = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType ?
		owner.nodeType === 1 || owner.nodeType === 9 : true;
};

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( core_rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};

// These may be used throughout the jQuery core codebase
data_user = new Data();
data_priv = new Data();


jQuery.extend({
	acceptData: Data.accepts,

	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[ 0 ],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[ i ].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.slice(5) );
							dataAttr( elem, name, data[ name ] );
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return jQuery.access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? JSON.parse( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n\f]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = function( elem, name, isXML ) {
		var fn = jQuery.expr.attrHandle[ name ],
			ret = isXML ?
				undefined :
				/* jshint eqeqeq: false */
				// Temporarily disable this handler to check existence
				(jQuery.expr.attrHandle[ name ] = undefined) !=
					getter( elem, name, isXML ) ?

					name.toLowerCase() :
					null;

		// Restore handler
		jQuery.expr.attrHandle[ name ] = fn;

		return ret;
	};
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = ( rneedsContext.test( selectors ) || typeof selectors !== "string" ) ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return core_indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return core_indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( core_indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}
var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				// Don't use the snapshot next if it has moved (#13810)
				if ( next && next.parentNode !== parent ) {
					next = this.nextSibling;
				}
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because core_push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because core_push.apply(_, arraylike) throws
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !jQuery.support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			i = 0,
			l = elems.length,
			fragment = context.createDocumentFragment(),
			nodes = [];

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because core_push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit
					// jQuery.merge because core_push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, events, type, key, j,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( Data.accepts( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					events = Object.keys( data.events || {} );
					if ( events.length ) {
						for ( j = 0; (type = events[j]) !== undefined; j++ ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	}
});

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var l = elems.length,
		i = 0;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}


function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}
jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var curCSS, iframe,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
function getStyles( elem ) {
	return window.getComputedStyle( elem, null );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css(elem, "display") );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

curCSS = function( elem, name, _computed ) {
	var width, minWidth, maxWidth,
		computed = _computed || getStyles( elem ),

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
		style = elem.style;

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: Safari 5.1
		// A tribute to the "awesome hack by Dean Edwards"
		// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret;
};


function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	// Support: Android 2.3
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// Support: Android 2.3
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrSupported = jQuery.ajaxSettings.xhr(),
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	// Support: IE9
	// We need to keep track of outbound xhr and abort them manually
	// because IE is not smart enough to do it all by itself
	xhrId = 0,
	xhrCallbacks = {};

if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
		xhrCallbacks = undefined;
	});
}

jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
jQuery.support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;
	// Cross domain only allowed if supported through XMLHttpRequest
	if ( jQuery.support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i, id,
					xhr = options.xhr();
				xhr.open( options.type, options.url, options.async, options.username, options.password );
				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}
				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}
				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}
				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}
				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;
							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file protocol always yields status 0, assume 404
									xhr.status || 404,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// #11426: When requesting binary data, IE9 will throw an exception
									// on any attempt to access responseText
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};
				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");
				// Create the abort callback
				callback = xhrCallbacks[( id = xhrId++ )] = callback("abort");
				// Do send the request
				// This may raise an exception which is actually
				// handled in jQuery.ajax (so no try/catch here)
				xhr.send( options.hasContent && options.data || null );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}


	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		elem = this[ 0 ],
		box = { top: 0, left: 0 },
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top + win.pageYOffset - docElem.clientTop,
		left: box.left + win.pageXOffset - docElem.clientLeft
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) && ( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && module && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

// If there is a window object, that at least has a document property,
// define jQuery and $ identifiers
if ( typeof window === "object" && typeof window.document === "object" ) {
	window.jQuery = window.$ = jQuery;
}

})( window );

/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var objectProto = Object.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          forOwn(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;
        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
        }
        }
      }
      return result
    };

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index];
        }
        }
      }
      return result
    };

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? forEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        var props = keys(collection);
        length = props.length;
        forOwn(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(collection[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define('lodash',[],function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));
/**
 * @module Skritter
 * @author Joshua McFarland
 */
define('Api',[
    'base64',
    'jquery',
    'lodash'
], function() {
    /**
     * Directly interfaces the official Skritter API with the application.
     * For documentation regarding the API user the following link:
     * http://beta.skritter.com/api/v0/docs
     * 
     * @class Api
     * @constructor
     */
    function Api() {
        this.batchId = null;
        this.clientId = 'mcfarljwapiclient';
        this.clientSecret = 'e3872517fed90a820e441531548b8c';
        this.credentials = 'basic ' + Base64.encode(this.clientId + ':' + this.clientSecret);
        this.domain = 'com';
        this.root = 'https://beta.skritter';
        this.token = null;
        this.version = 0;
    }

    /**
     * Returns the authenticated user and the token required for future calls to the API.
     * 
     * @method authenticateUser
     * @param {String} username
     * @param {String} password
     * @param {Function} callback
     */
    Api.prototype.authenticateUser = function(username, password, callback) {
        var self = this;
        var promise = $.ajax({
            url: this.root + '.' + this.domain + '/api/v' + this.version + '/oauth2/token',
            beforeSend: function(xhr) {
                xhr.setRequestHeader('AUTHORIZATION', self.credentials);
            },
            type: 'POST',
            data: {
                suppress_response_codes: true,
                grant_type: 'password',
                client_id: this.clientId,
                username: username,
                password: password
            }
        });
        promise.done(function(data) {
            callback(data);
        });
        promise.fail(function(error) {
            console.error(error);
            callback(error);
        });
    };

    /**
     * @method checkBatch
     * @param {Number} batchId
     * @param {Function} callback
     * @param {Boolean} detailed
     */
    Api.prototype.checkBatch = function(batchId, callback, detailed) {
        var self = this;
        var promise = $.ajax({
            url: this.root + '.' + this.domain + '/api/v' + this.version + '/batch/' + batchId + '/status',
            beforeSend: function(xhr) {
                xhr.setRequestHeader('AUTHORIZATION', self.credentials);
            },
            type: 'GET',
            data: {
                bearer_token: this.token,
                detailed: detailed
            }
        });
        promise.done(function(data) {
            console.log(data.Batch);
            callback(data.Batch);
        });
        promise.fail(function(error) {
            console.error(error);
            callback(error);
        });
    };

    /**
     * @getBatch
     * @param {String} batchId
     * @param {Function} callback
     * @returns {undefined}
     */
    Api.prototype.getBatch = function(batchId, callback) {
        var self = this;
        var result = {};
        var responseSize = 0;
        var merge = function(a, b) {
            return Array.isArray(a) ? a.concat(b) : undefined;
        };
        var promise = $.ajax({
            url: this.root + '.' + this.domain + '/api/v' + this.version + '/batch/' + batchId,
            beforeSend: function(xhr) {
                xhr.setRequestHeader('AUTHORIZATION', self.credentials);
            },
            type: 'GET',
            data: {
                bearer_token: self.token
            }
        });
        promise.done(function(data) {
            var batch = data.Batch;
            var requests = batch.Requests;
            for (var i in requests) {
                if (requests[i].response.statusCode === 200) {
                    _.merge(result, requests[i].response, merge);
                    responseSize += requests[i].responseSize;
                }
            }
            result.responseSize = responseSize;
            if (batch && (batch.runningRequests > 0 || requests.length > 0)) {
                callback(result);
            } else {
                callback();
            }
        });
        promise.fail(function(error) {
            console.error(error);
            callback();
        });
    };

    /**
     * Returns an object with merged results based on a batch request. This is mainly used for
     * account downloads and for larger account can take a few minutes.
     * 
     * @method getBatchCombined
     * @param {Number} batchId
     * @param {Function} callback1
     * @param {Function} callback2
     */
    Api.prototype.getBatchCombined = function(batchId, callback1, callback2) {
        var self = this;
        var retryCount = 0;
        var responseSize = 0;
        var result = {};
        getNext();
        function getNext() {
            var promise = $.ajax({
                url: self.root + '.' + self.domain + '/api/v' + self.version + '/batch/' + batchId,
                type: 'GET',
                data: {
                    bearer_token: self.token
                }
            });
            promise.done(function(data) {
                var batch = data.Batch;
                var requests = batch.Requests;
                retryCount = 0;
                for (var i in requests) {
                    _.merge(result, requests[i].response, merge);
                    responseSize += requests[i].responseSize;
                }
                if (typeof callback1 === 'function')
                    callback1(responseSize);
                if (batch && (batch.runningRequests > 0 || requests.length > 0)) {
                    window.setTimeout(function() {
                        getNext(batchId);
                    }, 2000);
                } else {
                    result.responseSize = responseSize;
                    callback2(result);
                }
            });
            promise.fail(function(error) {
                if (retryCount < 5) {
                    retryCount++;
                    setTimeout(function() {
                        getBatchRequest(batchId);
                    }, 5000);
                } else {
                    console.error(error);
                }
            });
        }
        function merge(a, b) {
            return Array.isArray(a) ? a.concat(b) : undefined;
        }
    };

    /**
     * Returns the official date information of the account from the server. This is the safest way
     * to check the current time associated with the account.
     * 
     * @method getDateInfo
     * @param {Function} callback
     */
    Api.prototype.getDateInfo = function(callback) {
        var promise = $.ajax({
            url: this.root + '.' + this.domain + '/api/v' + this.version + '/dateinfo',
            type: 'GET',
            data: {
                bearer_token: this.token
            }
        });
        promise.done(function(data) {
            callback(data);
        });
        promise.fail(function(error) {
            console.error(error);
            callback(error);
        });
    };

    /**
     * @method getItemsById
     * @param {Array} ids
     * @param {Function} callback
     */
    Api.prototype.getItemsById = function(ids, callback) {
        var self = this;
        var requests = [
            {
                path: 'api/v' + this.version + '/items',
                method: 'GET',
                params: {
                    bearer_token: self.token,
                    ids: ids.join('|'),
                    include_vocabs: 'true',
                    include_strokes: 'true',
                    include_sentences: 'true',
                    include_heisigs: 'true',
                    include_top_mnemonics: 'true',
                    include_decomps: 'true'
                },
                spawner: true
            }
        ];
        skritter.async.waterfall([
            //request the minimal fields from items and vocabs
            function(callback) {
                self.requestBatch(requests, function(batch) {
                    callback(null, batch);
                });
            },
            //waits for the batch to complete and updates the size
            function(batch, callback) {
                self.getBatchCombined(batch.id, function(size) {
                    if (skritter.fn.bytesToSize(size))
                        console.log(skritter.fn.bytesToSize(size));
                }, callback);
            }
        ], function(result) {
            callback(result);
        });
    };

    /**
     * @method getItemsNext
     * @param {Number} limit
     * @param {Function} callback
     */
    Api.prototype.getItemsNext = function(limit, callback) {
        var self = this;
        var results = [];
        next();
        function next(cursor) {
            var promise = $.ajax({
                url: self.root + '.' + self.domain + '/api/v' + self.version + '/items',
                type: 'GET',
                data: {
                    bearer_token: self.token,
                    limit: 30,
                    sort: 'next',
                    cursor: cursor,
                    include_vocabs: 'true',
                    include_strokes: 'true',
                    include_sentences: 'true',
                    include_heisigs: 'true',
                    include_top_mnemonics: 'true',
                    include_decomps: 'true'
                }
            });
            promise.done(function(data) {
                console.log(data);
                _.merge(results, data, merge);
                if (results.Items.length < limit && data.cursor) {
                    next(data.cursor);
                } else {
                    callback(results);
                }
            });
            promise.fail(function(error) {
                console.error(error);
                callback(error);
            });
        }
        function merge(a, b) {
            return Array.isArray(a) ? a.concat(b) : undefined;
        }
    };

    /**
     * @method getItemsCondensed
     * @param {Function} callback
     * @param {Number} offset
     */
    Api.prototype.getItemsCondensed = function(callback, offset) {
        var self = this;
        offset = (offset) ? offset : 0;
        var requests = [
            {
                path: 'api/v' + self.version + '/items',
                method: 'GET',
                params: {
                    sort: 'changed',
                    offset: offset,
                    fields: 'id,changed,last,next,vocabIds',
                    include_vocabs: 'true',
                    vocab_fields: 'id,containedVocabIds'
                },
                spawner: true
            },
            {
                path: 'api/v' + self.version + '/srsconfigs',
                method: 'GET',
                params: {
                    bearer_token: self.token
                }
            }
        ];
        skritter.async.waterfall([
            //request the minimal fields from items and vocabs
            function(callback) {
                self.requestBatch(requests, function(batch) {
                    callback(null, batch);
                });
            },
            //waits for the batch to complete and updates the size
            function(batch, callback) {
                self.getBatchCombined(batch.id, null, function(result) {
                    callback(null, result);
                });
            },
            //condenses the contained ids into the items entity
            function(result, callback) {
                for (var i in result.Items)
                    //filter out items that don't need contained ids
                    if ((result.Items[i].id.indexOf('rune') !== -1 || result.Items[i].id.indexOf('tone') !== -1) && result.Items[i].vocabIds.length > 1) {
                        //TODO: really needs a web worker to handle this without bogging down the dom
                        var containedVocabIds = _.find(result.Vocabs, {id: result.Items[i].vocabIds[0]}).containedVocabIds;
                        if (containedVocabIds)
                            result.Items[i].containedVocabIds = containedVocabIds;
                    }
                delete result.cursor;
                delete result.Vocabs;
                callback(result);
            }
        ], function(result) {
            callback(result);
        });
    };

    /**
     * Returns specific progress stats that can be used for various things such as an actual
     * progress page or study time for the day from the server. To read more about the request parameters
     * check the API documentation.
     * 
     * @method getProgressStats
     * @param {Object} request
     * @param {Function} callback
     */
    Api.prototype.getProgressStats = function(request, callback) {
        request.bearer_token = this.token;
        var promise = $.ajax({
            url: this.root + '.' + this.domain + '/api/v' + this.version + '/progstats',
            type: 'GET',
            data: request
        });
        promise.done(function(data) {
            callback(data.ProgressStats);
        });
        promise.fail(function(error) {
            console.error(error);
            callback(error);
        });
    };

    /**
     * Returns an array of review post errors from the server. If the offset is null then
     * it'll return all of the review errors.
     * 
     * @method getReviewErrors
     * @param {Number} offset
     * @param {Function} callback
     */
    Api.prototype.getReviewErrors = function(offset, callback) {
        var self = this;
        var errors = [];
        var getNext = function(cursor) {
            var promise = $.ajax({
                url: self.root + '.' + self.domain + '/api/v' + self.version + '/reviews/errors',
                type: 'GET',
                data: {
                    bearer_token: self.token,
                    cursor: cursor,
                    offset: offset
                }
            });
            promise.done(function(data) {
                errors = errors.concat(data.ReviewErrors);
                if (data.cursor) {
                    setTimeout(function() {
                        getNext(data.cursor);
                    }, 1000);
                } else {
                    callback(errors);
                }
            });
            promise.fail(function(error) {
                console.error(error);
                callback(error);
            });
        };
        getNext();
    };

    /**
     * Returns basic informatiom about a user or detailed information if its a request
     * for the current active user.
     * 
     * @method getUser
     * @param {Number} userId description
     * @param {Function} callback description
     */
    Api.prototype.getUser = function(userId, callback) {
        var self = this;
        var promise = $.ajax({
            url: this.root + '.' + this.domain + '/api/v' + this.version + '/users/' + userId,
            beforeSend: function(xhr) {
                xhr.setRequestHeader('AUTHORIZATION', self.credentials);
            },
            type: 'GET',
            data: {
                bearer_token: this.token,
                detailed: true
            }
        });
        promise.done(function(data) {
            callback(data.User);
        });
        promise.fail(function(error) {
            console.error(error);
            callback(error);
        });
    };

    /**
     * Returns a single vocablist with section ids for further querying.
     * 
     * @method getVocabList
     * @param {Number} id
     * @param {Function} callback
     */
    Api.prototype.getVocabList = function(id, callback) {
        var self = this;
        var promise = $.ajax({
            url: this.root + '.' + this.domain + '/api/v' + this.version + '/vocablists/' + id,
            beforeSend: function(xhr) {
                xhr.setRequestHeader('AUTHORIZATION', self.credentials);
            },
            type: 'GET',
            data: {
                bearer_token: this.token
            }
        });
        promise.done(function(data) {
            callback(data.VocabList);
        });
        promise.fail(function(error) {
            console.error(error);
            callback(error);
        });
    };

    /**
     * Returns a high level list of lists available sorted by type. For longer sort groups
     * it might be necessary to use pagination.
     * 
     * @method getVocabLists
     * @param {String} sort
     * @param {Function} callback
     */
    Api.prototype.getVocabLists = function(sort, callback) {
        var self = this;
        var lists = [];
        var getNext = function(cursor) {
            var promise = $.ajax({
                url: self.root + '.' + self.domain + '/api/v' + self.version + '/vocablists',
                beforeSend: function(xhr) {
                    xhr.setRequestHeader('AUTHORIZATION', self.credentials);
                },
                type: 'GET',
                data: {
                    bearer_token: self.token,
                    sort: sort,
                    cursor: cursor
                }
            });
            promise.done(function(data) {
                lists = lists.concat(data.VocabLists);
                if (data.cursor) {
                    setTimeout(function() {
                        getNext(data.cursor);
                    }, 2000);
                } else {
                    callback(lists, data.cursor);
                }
            });
            promise.fail(function(error) {
                console.error(error);
                callback(error);
            });
        };
        getNext();
    };

    /**
     * Posts batches of reviews in groups of 500 and then returns an array of the posted objects.
     * 
     * @method postReviews
     * @param {Array} reviews
     * @param {Function} callback
     */
    Api.prototype.postReviews = function(reviews, callback) {
        var self = this;
        var postedReviews = [];
        var postBatch = function(batch) {
            var promise = $.ajax({
                url: self.root + '.' + self.domain + '/api/v' + self.version + '/reviews?bearer_token=' + self.token,
                beforeSend: function(xhr) {
                    xhr.setRequestHeader('AUTHORIZATION', self.credentials);
                },
                type: 'POST',
                data: JSON.stringify(batch)
            });
            promise.done(function(data) {
                postedReviews = postedReviews.concat(batch);
                if (reviews.length > 0) {
                    postBatch(reviews.splice(0, 499));
                } else {
                    callback(postedReviews, data);
                }
            });
            promise.fail(function(error) {
                console.error(error);
                callback();
            });
        };
        postBatch(reviews.splice(0, 499));
    };

    /**
     * Requests a specific batch from the server and returns the request id. Use the
     * getBatch function to get the requested data from the server.
     * 
     * @method requestBatch
     * @param {Array} requests
     * @param {Function} callback
     */
    Api.prototype.requestBatch = function(requests, callback) {
        var self = this;
        var promise = $.ajax({
            url: this.root + '.' + this.domain + '/api/v' + this.version + '/batch?bearer_token=' + this.token,
            beforeSend: function(xhr) {
                xhr.setRequestHeader('AUTHORIZATION', self.credentials);
            },
            type: 'POST',
            data: JSON.stringify(requests)
        });
        promise.done(function(data) {
            self.batchId = data.Batch.id;
            callback(data.Batch);
        });
        promise.fail(function(error) {
            console.error(error);
            callback();
        });
    };

    return Api;
});
/**
 * This class module contains numerous helper functions that are used throughout the application.
 * Additional functions used repeatedly shoud also be stored here. They are stored in the global skritter namespace.
 * 
 * @module Skritter
 * @class Functions
 * @author Joshua McFarland
 */
define('Functions',[],function() {
    /**
     * @method bytesToSize
     * @param {Number} bytes
     * @returns {String}
     */
    var bytesToSize = function(bytes) {
        var sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        if (bytes === 0)
            return '';
        var i = parseFloat(Math.floor(Math.log(bytes) / Math.log(1024)));
        return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];
    };
    
    /**
     * @method extractCJK
     * @param {String} value
     * @returns {Array}
     */
    var extractCJK = function(value) {
        return value.match(/[\u4e00-\u9fcc]|[\u3400-\u4db5]|[\u20000-\u2a6d6]|[\u2a700-\u2b734]|[\u2b740-\u2b81d]/g);
    };
    
    /**
     * @method getAngle
     * @param {Array} points An array of point values
     * @return {Number} The angle formed by the first and last points
     */
    var getAngle = function(points) {
        var point1 = points[0];
        var point2 = points[points.length - 1];
        var xDiff = point2.x - point1.x;
        var yDiff = point2.y - point1.y;
        return (Math.atan2(yDiff, xDiff)) * (180 / Math.PI);
    };
    
    /**
     * @method getBoundingRectangle
     * @param {Array} points An array of point values
     * @param {Number} areaWidth The width of the canvas area
     * @param {Number} areaHeight The height of the canvas area
     * @param {Number} pointRadius The radius of
     * @return {Object} The bounds of the calculated rectangle
     */
    var getBoundingRectangle = function(points, areaWidth, areaHeight, pointRadius) {
        var left = areaWidth;
        var top = 0.0;
        var right = 0.0;
        var bottom = areaHeight;

        for (var i in points) {
            var x = points[i].x;
            var y = points[i].y;
            if (x - pointRadius < left)
                left = x - pointRadius;
            if (y + pointRadius > top)
                top = y + pointRadius;
            if (x + pointRadius > right)
                right = x + pointRadius;
            if (y - pointRadius < bottom)
                bottom = y - pointRadius;
        }

        var width = right - left;
        var height = top - bottom;
        var center = {x: width / 2, y: height / 2};

        return {x: left, y: bottom, w: width, h: height, c: center};
    };

    /**
     * @method getDistance
     * @param {Point} point1
     * @param {Point} point2
     * @return {Number} The distance between the first and last points
     */
    var getDistance = function(point1, point2) {
        var xs = point2.x - point1.x;
        xs = xs * xs;
        var ys = point2.y - point1.y;
        ys = ys * ys;
        return Math.sqrt(xs + ys);
    };

    /**
     * @method getLineDeviation
     * @param {Point} start The starting point of a line segment
     * @param {Point} end The ending point of a line segment
     * @param {Point} point Point to measure distance from the line segment
     * @return {Number} The distance from the point and line segment
     */
    var getLineDeviation = function(start, end, point) {
        var px = end.x - start.x;
        var py = end.y - start.y;
        var segment = (px * px) + (py * py);
        var z = ((point.x - start.x) * px + (point.y - start.y) * py) / parseFloat(segment);
        if (z > 1) {
            z = 1;
        } else if (z < 0) {
            z = 0;
        }
        var x = start.x + z * px;
        var y = start.y + z * py;
        var dx = x - point.x;
        var dy = y - point.y;
        return Math.sqrt((dx * dx) + (dy * dy));
    };
    
    /**
     * @method getPressurizedStrokeSize
     * @param {Number} strokeSize
     * @param {Point} point1
     * @param {Point} point2
     * @returns {Number}
     */
    var getPressurizedStrokeSize = function(point1, point2, strokeSize) {
        strokeSize = (strokeSize) ? strokeSize : 18;
        var speed = getDistance(point1, point2);
        if (speed < 15) {
           strokeSize *= 1.00; 
        } else if (speed < 20) {
           strokeSize *= 0.95; 
        } else if (speed < 25) {
           strokeSize *= 0.90; 
        } else if (speed < 30) {
           strokeSize *= 0.85; 
        } else if (speed < 35) {
           strokeSize *= 0.80; 
        } else {
           strokeSize *= 0.75; 
        }
        return strokeSize;
    };
    
    /**
     * @getRandomInt
     * @param {Number} min
     * @param {Number} max
     * @returns {Number}
     */
    var getRandomInt = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    
    /**
     * @method getUnixTime
     * @param {Boolean} milliseconds If true then the returned time will include milliseconds
     * @return {Number} The current unix time
     */
    var getUnixTime = function(milliseconds) {
        var date = new Date();
        if (milliseconds) {
            return date.getTime();
        }
        return Math.round(date.getTime() / 1000);
    };

    /**
     * @method isKana
     * @param {String} character
     * @returns {Boolean}
     */
    var isKana = function(character) {
        //return !!character.match(/^[\u3040-\u3096]+$/) || !!character.match(/^[\u30A1-\u30FA]+$/);
        var charCode = character.charCodeAt(0);
        return (charCode > 12352 && charCode < 12438) || (charCode > 12449 && charCode < 12538);
    };
    
    /**
     * @method isLocal
     * @returns {Boolean}
     */
    var isLocal = function() {
        var hostname = document.location.hostname || window.location.hostname || location.hostname;
        if (hostname === 'html5.skritter.com' || hostname === 'html5.skritter.cn')
            return false;
        return true;
    };
    
    /**
     * @method isMobile
     * @returns {Boolean}
     */
    var isMobile = function() {
        if (navigator.userAgent.match(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i))
            return true;
        return false;
    };

    /**
     * @method maskText
     * @param {String} text The text to be masked
     * @param {String} value The value in the text to mask
     * @param {String} mask The mask to apply to the contained values
     * @return {String} The text with the specied value masked
     */
    var maskCharacters = function(text, value, mask) {
        text = '' + text;
        value = '' + value;
        mask = '' + mask;
        var chars = value.split('');
        for (var i in chars) {
            var expression = new RegExp(chars[i], 'gi');
            text = text.replace(expression, mask);
        }
        return text;
    };

    /**
     * @method pad
     * @param {String} text The text requiring padding
     * @param {String} value The value to be applied as padding
     * @param {Number} size The number of spaces of padding to be applied
     * @return {String}
     */
    var pad = function(text, value, size) {
        value = '' + value;
        var string = text + '';
        while (string.length < size)
            string = value + '' + string;
        return string;
    };

    /**
     * Returns a Bootstrap alert of the given level containing the given text.
     * 
     * @method twbsAlertHTML
     * @param {String} level One of {success, info, warning, danger}
     * @param {String} text The alert text to be displayed
     */
    var twbsAlertHTML = function(level, text) {
        return "<div class='alert alert-" + level + "'>" +
                "<button type='button' class='close' data-dismiss='alert'>&times;</button>" +
                text +
                "</div>";
    };

    return {
        bytesToSize: bytesToSize,
        extractCJK: extractCJK,
        getAngle: getAngle,
        getBoundingRectangle: getBoundingRectangle,
        getDistance: getDistance,
        getLineDeviation: getLineDeviation,
        getPressurizedStrokeSize: getPressurizedStrokeSize,
        getRandomInt: getRandomInt,
        getUnixTime: getUnixTime,
        isKana: isKana,
        isLocal: isLocal,
        isMobile: isMobile,
        maskCharacters: maskCharacters,
        pad: pad,
        twbsAlertHTML: twbsAlertHTML
    };
});

/**
 * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('require.text',['module'], function (module) {
    

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.10',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.indexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1, name.length);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file.indexOf('\uFEFF') === 0) {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                errback(e);
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes,
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});

define('require.text!templates/home-footer.html',[],function () { return '';});

define('require.text!templates/home-logged-in.html',[],function () { return '<div id="home-view" class="view">\r\n    <div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n        <div class="container">\r\n            <!--<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">\r\n                <span class="sr-only">Toggle navigation</span>\r\n                <span class="icon-bar"></span>\r\n                <span class="icon-bar"></span>\r\n                <span class="icon-bar"></span>\r\n            </button>-->\r\n            <a class="navbar-brand hidden-xs" href="#">Skritter</a>\r\n            <div class="navbar-right navbar-text cursor" data-toggle="dropdown" data-target=".user-dropdown">\r\n                <span class="user-name"></span> <b class="caret"></b>\r\n            </div>\r\n            <div class="collapse navbar-collapse">\r\n                <ul class="nav navbar-nav">\r\n                </ul>\r\n            </div>\r\n            <ul class="nav navbar-nav navbar-user navbar-right">\r\n                <li class="dropdown user-dropdown">\r\n                    <ul class="dropdown-menu">\r\n                        <!--<li><a class="link-button" data-fragment="account"><i class="fa fa-user"></i> Account</a></li>-->\r\n                        <li><a class="link-button" data-fragment="options"><i class="fa fa-gear"></i> Options</a></li>\r\n                        <li class="divider"></li>\r\n                        <li><a class="link-button" data-fragment="logout"><i class="fa fa-power-off"></i> Log Out</a></li>\r\n                    </ul>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <div class="container">\r\n        <div class="row">\r\n            <div class="col-md-6 content">\r\n                <div class="media">\r\n                    <a class="pull-left" href="#">\r\n                        <span id="user-avatar" class="media-object"></span>\r\n                    </a>\r\n                    <div class="media-body">\r\n                        <h4 class="media-heading">Overview</h4>\r\n                        <p><strong><span class="user-name"></span></strong>, you currently have <strong><span id="user-items-due"></span></strong> items ready to review.</p>\r\n                        <a class="btn btn-primary link-button" data-fragment="study" role="button">Study</a>\r\n                        <a class="btn btn-primary sync-button" role="button">\r\n                            Sync <span id="user-unsynced-reviews"></span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="col-md-6 content">\r\n                <div class="media">\r\n                    <a class="pull-left" href="https://github.com/mcfarljw/skritter-html5">\r\n                        <img id="github-logo" class="media-object" src="images/github-logo.png" alt="">\r\n                    </a>\r\n                    <div class="media-body">\r\n                        <h4 class="media-heading">Help out on GitHub!</h4>\r\n                        <p><a href="https://github.com/mcfarljw/skritter-html5/issues"><strong>Click here</strong></a> to submit issues and even help contribute to the project.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>';});

define('require.text!templates/home-logged-out.html',[],function () { return '<div id="home-view" class="view">\r\n    <div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n        <div class="container">\r\n            <div class="navbar-header">\r\n                <a class="navbar-brand" href="#">Skritter</a>\r\n                <div class="navbar-text">   \r\n                    <ul class="navbar-nav list-inline">\r\n                        <li><a class="cursor login-button">Log In</a></li>\r\n                        <li><a href="https://github.com/mcfarljw/skritter-html5/issues">GitHub Issues</a></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class="container">\r\n        <div id="introduction" class="content row">\r\n            <div class="col-md-3">\r\n                <img src="images/skritter-logo.svg" alt="">\r\n            </div>\r\n            <div class="col-md-9">\r\n                <h2>Learn to Write Chinese and Japanese Characters.</h2>\r\n                <p><strong>Skritter</strong> is a tool for learning Chinese and Japanese writing with stroke-level feedback, tone practice, audio playback, definition practice, and progress feedback.</p>\r\n            </div>\r\n        </div>\r\n\r\n        <div id="demo" class="row">\r\n            <div class="col-md-6"></div>\r\n            <div class="col-md-6"></div>\r\n        </div>\r\n\r\n        <div id="features" class="row">\r\n            <div class="col-md-3">\r\n                <div class="media">\r\n                    <div class="pull-left">\r\n                        <div id="brush" class="feature-icon"></div>\r\n                    </div>\r\n                    <div class="media-body">\r\n                        <h4 class="media-heading">Real Handwriting</h4>\r\n                        With Skritter, you write, not trace. Skritter gives you immediate stroke-level feedback.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="col-md-3">\r\n                <div class="media">\r\n                    <div class="pull-left">\r\n                        <div id="plane" class="feature-icon"></div>\r\n                    </div>\r\n                    <div class="media-body">\r\n                        <h4 class="media-heading">Study Anywhere</h4>\r\n                        No internet? No problem. Learn offline, automatically sync when connection returns. Happy travels!\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="col-md-3">\r\n                <div class="media">\r\n                    <div class="pull-left">\r\n                        <div id="book" class="feature-icon"></div>\r\n                    </div>\r\n                    <div class="media-body">\r\n                        <h4 class="media-heading">Every Textbook</h4>\r\n                        Don\'t waste time making lists. If you\'re studying from a textbook, we probably already have it.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="col-md-3">\r\n                <div class="media">\r\n                    <div class="pull-left">\r\n                        <div id="watch" class="feature-icon"></div>\r\n                    </div>\r\n                    <div class="media-body">\r\n                        <h4 class="media-heading">54 Seconds Per Item</h4>\r\n                        Skritter users learn characters ten times faster than with competing apps.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>';});

//     Backbone.js 1.1.0

//     (c) 2010-2011 Jeremy Ashkenas, DocumentCloud Inc.
//     (c) 2011-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(){

  // Initial Setup
  // -------------

  // Save a reference to the global object (`window` in the browser, `exports`
  // on the server).
  var root = this;

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // The top-level namespace. All public Backbone classes and modules will
  // be attached to this. Exported for both the browser and the server.
  var Backbone;
  if (typeof exports !== 'undefined') {
    Backbone = exports;
  } else {
    Backbone = root.Backbone = {};
  }

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.0';

  // Require Underscore, if we're on the server, and it's not already present.
  var _ = root._;
  if (!_ && (typeof require !== 'undefined')) _ = require('underscore');

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = root.jQuery || root.Zepto || root.ender || root.$;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = {};
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = true;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();
      if (this.isNew()) return base;
      return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return this.id == null;
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i];
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);

          // Listen to added models' events, and index models for lookup by
          // `id` and by `cid`.
          model.on('all', this._onModelEvent, this);
          this._byId[model.cid] = model;
          if (model.id != null) this._byId[model.id] = model;
        }
        if (order) order.push(existing || model);
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }
      
      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i]);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj.id] || this._byId[obj.cid] || this._byId[obj];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp, options) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch = typeof window !== 'undefined' && !!window.ActiveXObject && !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        callback && callback.apply(router, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^\/]+)';
                   })
                   .replace(splatParam, '(.*?)');
      return new RegExp('^' + route + '$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param) {
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash and query.
  var pathStripper = /[?#].*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = this.location.pathname;
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        this.iframe = Backbone.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;
      var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === this.root;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !atRoot) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + this.location.search + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && atRoot && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the fragment of the query and hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

}).call(this);

define("backbone", ["jquery","lodash","require.text"], (function (global) {
    return function () {
        var ret, fn;
        return ret || global.Backbone;
    };
}(this)));

/**
 * @module Skritter
 * @submodule Views
 * @param templateFooter
 * @param templateLoggedIn
 * @param templateLoggedOut
 * @author Joshua McFarland
 */
define('views/Home',[
    'require.text!templates/home-footer.html',
    'require.text!templates/home-logged-in.html',
    'require.text!templates/home-logged-out.html',
    'backbone'
], function(templateFooter, templateLoggedIn, templateLoggedOut) {
    /**
     * @class Home
     */
    var Home = Backbone.View.extend({
        /**
         * @method initialize
         */
        initialize: function() {
        },
        /**
         * @method render
         * @returns {Backbone.View}
         */
        render: function() {
            if (skritter.user.isLoggedIn()) {
                this.$el.html(templateLoggedIn);
                this.$('#user-avatar').html(skritter.user.getAvatar('img-circle'));
                this.$('.user-name').text(skritter.user.getSetting('name'));
                this.$('#user-items-due').text(skritter.data.items.getDue().length);
                if (skritter.data.reviews.length > 0)
                    this.$('#user-unsynced-reviews').text('(' + skritter.data.reviews.length + ')');
            } else {
                this.$el.html(templateLoggedOut);
            }
            this.$el.append(templateFooter);
            return this;
        },
        /**
         * @property {Object} events
         */
        events: {
            'click.Home .link-button': 'handleLinkClicked',
            'click.Home #home-view .login-button': 'handleLogin',
            'click.Home #home-view .logout-button': 'handleLogout',
            'click.Home #home-view .sync-button': 'handleSync'
        },
        handleLogin: function() {
            skritter.modal.show('login');
            return false;
        },
        handleLogout: function() {
            skritter.user.logout();
            return false;
        },
        /**
         * Overrides the default href linking and replaces it with a more backbone suitable solutions. It
         * currently 
         * 
         * @method handleLinkClicked
         * @param {Object} event
         * @returns {Boolean}
         */
        handleLinkClicked: function(event) {
            var fragment = this.$(event.currentTarget).data('fragment');
            var options = (this.$(event.target).data('replace')) ? {trigger: true, replace: true} : {trigger: true};
            switch (fragment) {
                case '#back':
                    skritter.router.back();
                    break;
                default:
                    skritter.router.navigate(fragment, options);
                    break;
            }
            return false;
        },
        /**
         * @method handleSync
         */
        handleSync: function() {
            var self = this;
            skritter.modal.show('progress').setTitle('Syncing').setProgress('100');
            skritter.user.sync(function() {
                skritter.modal.hide();
                self.render();
            });
        }
    });
    
    return Home;
});
/**
 * This is a utility class used to convert between number and tone mark pinyin notation.
 * 
 * @module Skritter
 * @class PinyinConverter
 * @author Joshua McFarland
 */
define('PinyinConverter',[],function() {

    /**
     * The object that contains the direct mapping of pinyin using numbers to tone.
     * 
     * @property mapping
     * @type Object
     */
    var mapping = {
        'ang1': 'āng',
        'ang2': 'áng',
        'ang3': 'ǎng',
        'ang4': 'àng',
        'eng1': 'ēng',
        'eng2': 'éng',
        'eng3': 'ěng',
        'eng4': 'èng',
        'ing1': 'īng',
        'ing2': 'íng',
        'ing3': 'ǐng',
        'ing4': 'ìng',
        'ong1': 'ōng',
        'ong2': 'óng',
        'ong3': 'ǒng',
        'ong4': 'òng',
        'an1': 'ān',
        'an2': 'án',
        'an3': 'ǎn',
        'an4': 'àn',
        'en1': 'ēn',
        'en2': 'én',
        'en3': 'ěn',
        'en4': 'èn',
        'in1': 'īn',
        'in2': 'ín',
        'in3': 'ǐn',
        'in4': 'ìn',
        'un1': 'ūn',
        'un2': 'ún',
        'un3': 'ǔn',
        'un4': 'ùn',
        'er2': 'ér',
        'er3': 'ěr',
        'er4': 'èr',
        'ao1': 'āo',
        'ao2': 'áo',
        'ao3': 'ǎo',
        'ao4': 'ào',
        'ou1': 'ōu',
        'ou2': 'óu',
        'ou3': 'ǒu',
        'ou4': 'òu',
        'ai1': 'āi',
        'ai2': 'ái',
        'ai3': 'ǎi',
        'ai4': 'ài',
        'ei1': 'ēi',
        'ei2': 'éi',
        'ei3': 'ěi',
        'ei4': 'èi',
        'a1': 'ā',
        'a2': 'á',
        'a3': 'ǎ',
        'a4': 'à',
        'e1': 'ē',
        'e2': 'é',
        'e3': 'ě',
        'e4': 'è',
        'i1': 'ī',
        'i2': 'í',
        'i3': 'ǐ',
        'i4': 'ì',
        'o1': 'ō',
        'o2': 'ó',
        'o3': 'ǒ',
        'o4': 'ò',
        'u1': 'ū',
        'u2': 'ú',
        'u3': 'ǔ',
        'u4': 'ù',
        'v1': 'ǖ',
        'v2': 'ǘ',
        'v3': 'ǚ',
        'v4': 'ǜ',
        'v': 'ü'
    };

    /**
     * Uses regex to and loops through the string replacing all of the matching tones with numbers.
     * 
     * @method number
     * @param {String} text The text that needs to be converted
     * @returns {String} The string with replaced values
     */
    var number = function(text) {
        text = text.toLowerCase();
        for (var key in mapping)
        {
            var expression = new RegExp(mapping[key], 'g');
            text = text.replace(expression, key);
        }
        return text;
    };
    
    /**
     * Uses regex to and loops through the string replacing all of the matching numbers with tones.
     * 
     * @method tone
     * @param {String} text The text that needs to be converted
     * @returns {String} The string with replaced values
     */
    var tone = function(text) {
        text = text.replace('5', '').toLowerCase();
        for (var key in mapping)
        {
            var expression = new RegExp(key, 'g');
            text = text.replace(expression, mapping[key]);
        }
        return text;
    };

    return {
        toNumber: number,
        toTone: tone
    };
});
define('require.text!templates/info.html',[],function () { return '<div id="info-view" class="view">\r\n    <div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n        <div class="container">\r\n            <div class="navbar-header">\r\n                <a class="link-button navbar-brand" data-fragment="/">Skritter</a>\r\n                <div class="navbar-text">   \r\n                    <ul class="navbar-nav list-inline">\r\n                        <li><a class="link-button" data-fragment="#back"><span class="fa fa-navbar fa-arrow-left"></span></a></li>\r\n                        <li class="cursor"><a id="ban-button"><span class="fa fa-navbar fa-ban">Ban</span></a></li>\r\n                        <li class="cursor"><a id="star-button"><span class="fa fa-navbar fa-star-o">Star</span></a></li>\r\n                        <li><a class="cursor"><span id="audio-button" class="fa fa-navbar fa-volume-up"></span></a></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class="container content">\r\n\r\n        <div class="row">\r\n            <div id="writing" class="col-xs-12 col-sm-6 col-md-6 writing"></div>\r\n            <div id="definition-reading" class="col-xs-12 col-sm-6 col-md-6">\r\n                <span id="reading"></span> :\r\n                <span id="definition"></span>\r\n                <div id="mnemonic"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class="row">\r\n            <div class="col-md-6"></div>\r\n            <div id="sentence" class="col-md-6"></div>\r\n        </div>\r\n        \r\n        <div id="contained-characters"  class="row">\r\n            <div class="col-md-12">\r\n                <h4>Characters in <span class="writing"></span></h4>\r\n                <table class="table table-hover">\r\n                    <tbody></tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        \r\n        <div id="decompositions"  class="row">\r\n            <div class="col-md-12">\r\n                <h4>Decompositions in <span class="writing"></span></h4>\r\n                <table class="table table-hover">\r\n                    <tbody></tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        \r\n    </div><!--/container-->\r\n</div>';});

/**
 * @module Skritter
 * @submodule Views
 * @param PinyinConverter
 * @param templateInfo
 * @author Joshua McFarland
 */
define('views/Info',[
    'PinyinConverter',
    'require.text!templates/info.html',
    'backbone'
], function(PinyinConverter, templateInfo) {
    /**
     * @class Info
     */
    var Info = Backbone.View.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            Info.vocab = null;
            Info.sentence = null;
        },
        /**
         * @method render
         * @return {Backbone.View}
         */
        render: function() {
            this.$el.html(templateInfo);
            this.$('.writing').text(Info.vocab.get('writing'));
            this.$('.writing').addClass(skritter.user.getTextStyle());
            this.$('#reading').text(PinyinConverter.toTone(Info.vocab.get('reading')));
            this.$('#definition').text(Info.vocab.get('definitions')[skritter.user.getSetting('sourceLang')]);
            this.$('#mnemonic').text(Info.vocab.get('mnemonic'));
            this.$('#sentence').text(Info.sentence.get('writing').replace(/\s+/g, ''));
            this.$('#sentence').addClass(skritter.user.getTextStyle());

            //contained characters
            var contained = _.uniq(Info.vocab.get('containedVocabIds'));
            if (contained.length > 1) {
                this.$('#contained-characters tbody').html('');
                for (var a in contained) {
                    var containedVocab = skritter.data.vocabs.findWhere({id: contained[a]});
                    var divA = "<tr id='" + containedVocab.get('id') + "' class='contained-row'>";
                    divA += "<td class='writing'>" + containedVocab.get('writing') + "</td>";
                    divA += "<td class='reading'>" + PinyinConverter.toTone(containedVocab.get('reading')) + ": </td>";
                    divA += "<td class='definition'>" + containedVocab.get('definitions')[skritter.user.getSetting('sourceLang')] + "</td>";
                    divA += "</tr>";
                    this.$('#contained-characters tbody').append(divA);
                }
            } else {
                this.$('#contained-characters').hide();
            }

            //decompositions
            var decomps = Info.vocab.getDecomps();
            if (decomps) {
                this.$('#decompositions tbody').html('');
                for (var c in decomps) {
                    var decomp = decomps[c];
                    var divB = "<tr class='decomp-item'>";
                    divB += "<td class='writing'>" + decomp.writing + "</td>";
                    divB += "<td class='reading'>" + PinyinConverter.toTone(decomp.reading) + "</td>";
                    divB += "<td class='definition'>" + decomp.definitions[skritter.user.getSetting('sourceLang')] + "</td>";
                    divB += "</tr>";
                    this.$('#decompositions tbody').append(divB);
                }
            } else {
                this.$('#decompositions').hide();
            }

            if (Info.vocab.has('audio')) {
                this.$('#audio-button').show();
            } else {
                this.$('#audio-button').hide();
            }
            if (Info.vocab.has('bannedParts'))
                this.$('#ban-button span').text('Banned');
            if (Info.vocab.get('starred')) {
                this.$('#star-button span').removeClass('fa-star-o');
                this.$('#star-button span').addClass('fa-star');
            }
            return this;
        },
        /**
         * @property {Object} events
         */
        events: {
            'click.Info #info-view #audio-button': 'playAudio',
            'click.Info #info-view .contained-row': 'navigateInfo',
            'click.Info #info-view #ban-button': 'toggleBanned',
            'click.Info #info-view #star-button': 'toggleStarred'
        },
        /**
         * @method navigateInfo
         * @param {Object} event
         * @returns {Boolean}
         */
        navigateInfo: function(event) {
            skritter.router.navigate('info/' + event.currentTarget.id, {trigger: true});
            return false;
        },
        /**
         * @method playAudio
         */
        playAudio: function() {
            Info.vocab.play();
        },
        /**
         * @method set
         * @param {String} vocabId
         */
        set: function(vocabId) {
            Info.vocab = skritter.data.vocabs.findWhere({id: vocabId});
            if (Info.vocab.has('sentenceId'))
                Info.sentence = skritter.data.sentences.findWhere({id: Info.vocab.get('sentenceId')});
        },
        /**
         * @method toggleBanned
         */
        toggleBanned: function() {
            if (Info.vocab.has('bannedParts')) {
                this.$('#ban-button span').text('Ban');
                Info.vocab.unset('bannedParts');
            } else {
                this.$('#ban-button span').text('Banned');
                Info.vocab.set('bannedParts', ['defn', 'rdng', 'rune', 'tone']);
            }
        },
        /**
         * @method toggleStarred
         */
        toggleStarred: function() {
            if (Info.vocab.get('starred')) {
                this.$('#star-button span').removeClass('fa-star');
                this.$('#star-button span').addClass('fa-star-o');
                Info.vocab.set('starred', false);
            } else {
                this.$('#star-button span').removeClass('fa-star-o');
                this.$('#star-button span').addClass('fa-star');
                Info.vocab.set('starred', true);
            }
        }
    });

    return Info;
});
define('require.text!templates/lists-list.html',[],function () { return '<div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n    <div class="container">\r\n        <div class="navbar-header">\r\n            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">\r\n                <span class="sr-only">Toggle navigation</span>\r\n                <span class="icon-bar"></span>\r\n                <span class="icon-bar"></span>\r\n                <span class="icon-bar"></span>\r\n            </button>\r\n            <a class="navbar-brand" href="#">Skritter</a>\r\n        </div>\r\n        <div class="collapse navbar-collapse">\r\n            <ul class="nav navbar-nav">\r\n                <li id="mylists-button"><a href="#vocabs">My Lists</a></li>\r\n                <li id="official-button"><a href="#vocabs">Official</a></li>\r\n                <li id="published-button"><a href="#vocabs">Published</a></li>\r\n                <li id="custom-button"><a href="#vocabs">Custom</a></li>\r\n            </ul>\r\n        </div><!--/.nav-collapse -->\r\n    </div>\r\n</div>\r\n\r\n<div class="container">\r\n\r\n    <h4 id="title"></h4>\r\n\r\n    <p id="description"></p>\r\n\r\n    <div id="sections"></div>\r\n\r\n</div><!--/container-->';});

define('require.text!templates/lists-section.html',[],function () { return '';});

define('require.text!templates/lists.html',[],function () { return '<div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n    <div class="container">\r\n        <div class="navbar-header">\r\n            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">\r\n                <span class="sr-only">Toggle navigation</span>\r\n                <span class="icon-bar"></span>\r\n                <span class="icon-bar"></span>\r\n                <span class="icon-bar"></span>\r\n            </button>\r\n            <a class="navbar-brand" href="#">Skritter</a>\r\n        </div>\r\n        <div class="collapse navbar-collapse">\r\n            <ul class="nav navbar-nav">\r\n                <li id="mylists-button" class="navbar-text">My Lists</li>\r\n                <li id="official-button" class="navbar-text">Official</li>\r\n                <li id="published-button" class="navbar-text">Published</li>\r\n                <li id="custom-button" class="navbar-text">Custom</li>\r\n            </ul>\r\n        </div><!--/.nav-collapse -->\r\n    </div>\r\n</div>\r\n\r\n<div class="container">\r\n\r\n    <table id="lists-table" class="table table-hover">\r\n        <thead>\r\n            <tr>\r\n                <th>Title</th>\r\n                <th>Description</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody></tbody>\r\n    </table>\r\n\r\n</div><!--/container-->';});

/**
 * @module Skritter
 * @submodule Views
 * @param templateList
 * @param templateSection
 * @param templateLists
 * @author Joshua McFarland
 */
define('views/Lists',[
    'require.text!templates/lists-list.html',
    'require.text!templates/lists-section.html',
    'require.text!templates/lists.html',
    'backbone'
], function(templateList, templateSection, templateLists) {
    /**
     * @class Lists
     */
    var Lists = Backbone.View.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            Lists.default = 'studying';
            Lists.listId = null;
            Lists.sectionId = null;
        },
        /**
         * @method render
         * @return {Backbone.View}
         */
        render: function() {
            if (Lists.listId && Lists.sectionId) {
                //render specific section of a list
                this.$el.html(templateSection);
                this.loadSection();
            } else if (Lists.listId) {
                //render list information and section overview
                this.$el.html(templateList);
                this.loadList(Lists.listId);
            } else {
                //render high level overview of lists
                this.$el.html(templateLists);
                this.loadLists();
            }
            return this;
        },
        /**
         * @property {Object} events
         */
        events: {
            'click.Lists #lists-table tbody tr': 'handleListClicked',
            'click.Lists #mylists-button': 'handleSortClicked',
            'click.Lists #official-button': 'handleSortClicked',
            'click.Lists #published-button': 'handleSortClicked',
            'click.Lists #custom-button': 'handleSortClicked'
        },
        /**
         * @method handleListClicked
         * @param {Object} event
         */
        handleListClicked: function(event) {
            skritter.router.navigate('lists/' + event.currentTarget.id, {trigger: true});
        },
        /**
         * @method handleSortClicked
         * @param {Object} event
         */
        handleSortClicked: function(event) {
            switch (event.currentTarget.id) {
                case 'mylists-button':
                    this.loadLists('studying');
                    break;
                case 'official-button':
                    this.loadLists('official');
                    break;
                case 'published-button':
                    this.loadLists('published');
                    break;
                case 'custom-button':
                    this.loadLists('custom');
                    break;
            }
        },
        /**
         * @method loadList
         * @param {String} listId
         */
        loadList: function(listId) {
            skritter.modal.show().setBody('Loading List').noHeader();
            skritter.api.getVocabList(listId, function(list) {
                this.$('#title').text(list.name);
                this.$('#description').text(list.description);
                var div = '';
                div += "<div class='panel-group' id='accordion'>";
                for (var a in list.sections) {
                    var section = list.sections[a];
                    div += "<div class='panel panel-default'>";
                    //panel heading
                    div += "<div class='panel-heading'>";
                    div += "<h4 class='panel-title'>";
                    div += "<a data-toggle='collapse' data-parent='#accordion' href='#collapse" + a + "'>";
                    div += section.name;
                    div += "</a>";
                    div += "</h4>";
                    div += "</div>";
                    //panel body
                    div += "<div id='collapse" + a + "' class='panel-collapse collapse in'>";
                    div += "<div class='panel-body'>";
                    //section rows
                    for (var b in section.rows) {
                        var row = section.rows[b];
                        div += "<h6>";
                        div += row.vocabId;
                        div += "</h6>";
                    }
                    div += "</div>";
                    div += "</div>";
                    div += "</div>";
                }
                div += "</div>";
                this.$('#sections').append(div);
                this.$("#sections .collapse").collapse();
                skritter.modal.hide();
            });
        },
        /**
         * @method loadLists
         * @param {String} sort
         */
        loadLists: function(sort) {
            sort = (sort) ? sort : Lists.default;
            skritter.modal.show().setBody('Loading Lists').noHeader();
            skritter.api.getVocabLists(sort, function(lists) {
                this.$('#lists-table tbody').html('');
                for (var i in lists) {
                    var list = lists[i];
                    var div = '';
                    div += "<tr id='" + list.id + "'>";
                    div += "<td>" + list.name + "</td>";
                    div += "<td>" + list.description + "</td>";
                    div += "</tr>";
                    this.$('#lists-table tbody').append(div);
                }
                skritter.modal.hide();
            });
        },
        /**
         * @method loadSection
         * @param {String} listId
         * @param {String} sectionId
         */
        loadSection: function(listId, sectionId) {
            //TODO: add this functionality
        },
        /**
         * @method set
         * @param {String} listId
         * @param {String} sectionId
         */
        set: function(listId, sectionId) {
            Lists.listId = listId;
            Lists.sectionId = sectionId;
        }
    });

    return Lists;
});
define('require.text!templates/options.html',[],function () { return '<div id="options-view" class="view">\r\n    <div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n        <div class="container">\r\n            <div class="navbar-header">\r\n                <a class="navbar-brand" href="#">Skritter</a>\r\n                <div class="navbar-text">   \r\n                    <ul class="navbar-nav list-inline">\r\n                        <li><a id="save-button" class="cursor"><span class="fa fa-navbar fa-check">Save</span></a></li>\r\n                        <li><a class="link-button" data-fragment="/"><span class="fa fa-navbar fa-ban">Cancel</span></a></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class="container">\r\n\r\n        <div class="row">\r\n            <div class="col-xs-12 col-md-6">\r\n                <div class="panel panel-default">\r\n                    <div class="panel-heading">Studying</div>\r\n                    <div class="panel-body">\r\n\r\n                        <!--<h4>Language</h4>\r\n                        <div id="language" class="btn-group">\r\n                            <button id="current" type="button" class="btn btn-default">{language}</button>\r\n                            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">\r\n                                <span class="caret"></span>\r\n                                <span class="sr-only">Toggle Dropdown</span>\r\n                            </button>\r\n                            <ul class="dropdown-menu" role="menu">\r\n                                <li id="zh-simp"><a href="#">Chinese (Simplified)</a></li>\r\n                                <li id="zh-trad"><a href="#">Chinese (Traditional)</a></li>\r\n                                <li id="zh-both"><a href="#">Chinese (Both)</a></li>\r\n                                <li class="divider"></li>\r\n                                <li id="ja"><a href="#">Japanese</a></li>\r\n                            </ul>\r\n                        </div>-->\r\n\r\n                        <h4>Parts</h4>\r\n                        <div id="parts" class="btn-group" data-toggle="buttons">\r\n                            <label id="rune" class="btn btn-default">\r\n                                <input type="checkbox"> Writing\r\n                            </label>\r\n                            <label id="tone" class="btn btn-default">\r\n                                <input type="checkbox"> Tone\r\n                            </label>\r\n                            <label id="defn" class="btn btn-default">\r\n                                <input type="checkbox"> Definition\r\n                            </label>\r\n                            <label id="rdng" class="btn btn-default">\r\n                                <input type="checkbox"> Reading\r\n                            </label>\r\n                        </div>\r\n\r\n                        <h4>Audio</h4>\r\n                        <div id="audio" class="btn-group" data-toggle="buttons">\r\n                            <label id="on" class="btn btn-default">\r\n                                <input type="radio" name="options" id="option1"> On\r\n                            </label>\r\n                            <label id="off" class="btn btn-default">\r\n                                <input type="radio" name="options" id="option2"> Off\r\n                            </label>\r\n                        </div>\r\n                        \r\n                        <h4>Raw Squigs</h4>\r\n                        <div id="raw-squigs" class="btn-group" data-toggle="buttons">\r\n                            <label id="on" class="btn btn-default">\r\n                                <input type="radio" name="options" id="option1"> On\r\n                            </label>\r\n                            <label id="off" class="btn btn-default">\r\n                                <input type="radio" name="options" id="option2"> Off\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div class="col-xs-6 col-md-6">\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>';});

/**
 * @module Skritter
 * @submodule Views
 * @param templateOptions
 * @author Joshua McFarland
 */
define('views/Options',[
    'require.text!templates/options.html',
    'backbone'
], function(templateOptions) {
    var Options = Backbone.View.extend({
        initialize: function() {
            
        },
        render: function() {
            this.$el.html(templateOptions);
            this.load();
            //ISSUE #31: hides the tone option for users studying japanese
            if (skritter.user.isJapanese())
                this.$('#parts #tone').hide();
            return this;
        },
        events: {
            'click.Options #options-view #cancel-button': 'navigateBack',
            'click.Options #options-view #save-button': 'save',
            'click.Options #options-view #language li': 'toggleLanguage'
        },
        load: function() {
            //language
            //this.toggleLanguage();
            
            //parts
            var activeParts = skritter.user.getActiveStudyParts();
            if (_.contains(activeParts, 'rune'))
                this.$('#parts #rune').addClass('active');
            if (_.contains(activeParts, 'tone'))
                this.$('#parts #tone').addClass('active');
            if (_.contains(activeParts, 'defn'))
                this.$('#parts #defn').addClass('active');
            if (_.contains(activeParts, 'rdng'))
                this.$('#parts #rdng').addClass('active');
            
            //audio
            if (skritter.user.get('audio')) {
                this.$('#audio #on').addClass('active');
            } else {
                this.$('#audio #off').addClass('active');
            }
            
            //squigs
            if (skritter.user.getSetting('squigs')) {
                this.$('#raw-squigs #on').addClass('active');
            } else {
                this.$('#raw-squigs #off').addClass('active');
            }
        },
        navigateBack: function() {
            skritter.router.navigate('', {trigger: true});
            return false;
        },
        save: function() {
            //language
            var style = this.$('#language #current').text();
            switch(style) {
                case 'Japanese':
                    skritter.user.setSetting('targetLang', 'ja');
                    break;
                case 'Chinese (Both)':
                    skritter.user.setSetting('targetLang', 'zh');
                    skritter.user.setSetting('addSimplified', true);
                    skritter.user.setSetting('addTraditional', true);
                    break;
                case 'Chinese (Simplified)':
                    skritter.user.setSetting('targetLang', 'zh');
                    skritter.user.setSetting('addSimplified', true);
                    skritter.user.setSetting('addTraditional', false);
                    break;
                case 'Chinese (Traditional)':
                    skritter.user.setSetting('targetLang', 'zh');
                    skritter.user.setSetting('addSimplified', false);
                    skritter.user.setSetting('addTraditional', true);
                    break;
            }
            
            //parts
            var parts = [];
            if (this.$('#parts #rune').hasClass('active'))
                parts.push('rune');
            if (this.$('#parts #tone').hasClass('active'))
                parts.push('tone');
            if (this.$('#parts #defn').hasClass('active'))
                parts.push('defn');
            if (this.$('#parts #rdng').hasClass('active'))
                parts.push('rdng');
            if (parts.length === 0) {
                skritter.modal.show('confirm').noHeader().setBody('You need to select at least one part to study!');
                return false;
            } else {
                if (skritter.user.isChinese()) {
                    skritter.user.setSetting('chineseStudyParts', parts);
                } else {
                    skritter.user.setSetting('japaneseStudyParts', parts);
                }
            }
            
            //audio
            if (this.$('#audio #on').hasClass('active')) {
                skritter.user.set('audio', true);
            } else {
                skritter.user.set('audio', false);
            }
            
            //audio
            if (this.$('#raw-squigs #on').hasClass('active')) {
                skritter.user.setSetting('squigs', true);
            } else {
                skritter.user.setSetting('squigs', false);
            }
            
            skritter.user.cache();
            skritter.router.navigate('/', {trigger: true, replace: true});
        },
        toggleLanguage: function(event) {
            if (event)
                event.preventDefault();
            var style = (event) ? event.currentTarget.id : skritter.user.getStyle();
            this.$('#language').children().children('li').show();
            switch (style) {
                case 'ja':
                    this.$('#language #current').text('Japanese');
                    this.$('#language #ja').hide();
                    this.$('#language .divider').hide();
                    break;
                case 'zh-simp':
                    this.$('#language #current').text('Chinese (Simplified)');
                    this.$('#language #zh-simp').hide();
                    this.$('#language .divider').show();
                    break;
                case 'zh-trad':
                    this.$('#language #current').text('Chinese (Traditional)');
                    this.$('#language #zh-trad').hide();
                    this.$('#language .divider').show();
                    break;
                case 'zh-both':
                    this.$('#language #current').text('Chinese (Both)');
                    this.$('#language #zh-both').hide();
                    this.$('#language .divider').show();
                    break;
            }
        }
    });
    
    return Options;
});
define('require.text!templates/reviews.html',[],function () { return '<div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n    <div class="container">\r\n        <div class="navbar-header">\r\n            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">\r\n                <span class="sr-only">Toggle navigation</span>\r\n                <span class="icon-bar"></span>\r\n                <span class="icon-bar"></span>\r\n                <span class="icon-bar"></span>\r\n            </button>\r\n            <a class="navbar-brand" href="#">Skritter</a>\r\n        </div>\r\n        <div class="collapse navbar-collapse">\r\n            <ul class="nav navbar-nav">\r\n                <li id="sss-button"><a href="#">Lists</a></li>\r\n            </ul>\r\n        </div><!--/.nav-collapse -->\r\n    </div>\r\n</div>\r\n\r\n<div class="container">\r\n    \r\n    <table id="reviews-table" class="table table-hover">\r\n        <thead>\r\n            <tr>\r\n                <th>Time</th>\r\n                <th>Writing</th>\r\n                <th>Part</th>\r\n                <th>Score</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody></tbody>\r\n    </table>\r\n    \r\n</div><!--/container-->';});

/**
 * @module Skritter
 * @submodule Views
 * @param templateReviews
 * @author Joshua McFarland
 */
define('views/Reviews',[
    'require.text!templates/reviews.html',
    'backbone'
], function(templateReviews) {
    /**
     * @class Reviews
     */
    var Reviews = Backbone.View.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            
        },
        /**
         * @method render
         * @returns {Backbone.View}
         */
        render: function() {
            this.$el.html(templateReviews);
            this.load();
            return this;
        },
        /**
         * @method initialize
         */
        load: function() {
            var reviews = skritter.data.reviews;
            var div = '';
            for (var i in reviews.models) {
                var review = reviews.at(i);
                if (review.get('bearTime')) {
                    var item = skritter.data.items.findWhere({id: review.get('itemId')});
                    var vocab = item.getVocabs()[0];
                    var datetime = new Date(review.get('submitTime') * 1000);
                    div += "<tr>";
                    div += "<td class='datetime'>" + datetime + "</td>";
                    div += "<td class='writing'>" + vocab.get('writing') + "</td>";
                    div += "<td class='part'>" + item.get('part') + "</td>";
                    div += "<td class='score'>" + review.get('score') + "</td>";
                    div += "</tr>";
                }
            }
            this.$('#reviews-table tbody').append(div);
        }
    });
    
    return Reviews;
});
define('require.text!templates/grading-buttons.html',[],function () { return '<div id="grading-buttons" class="row" style="display: none;">\r\n    <div id="grade1" class="col-sm-3"></div>\r\n    <div id="grade2" class="col-sm-3"></div>\r\n    <div id="grade3" class="col-sm-3"></div>\r\n    <div id="grade4" class="col-sm-3"></div>\r\n</div>';});

/**
 * @module Skritter
 * @submodule Components
 * @param templateGradingButtons
 * @author Joshua McFarland
 */
define('components/GradingButtons',[
    'require.text!templates/grading-buttons.html',
    'backbone'
], function(templateGradingButtons) {
    /**
     * @class GradingButtons
     */
    var GradingButtons = Backbone.View.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            GradingButtons.animationSpeed = 100;
            GradingButtons.expanded = true;
            GradingButtons.value = 3;
        },
        /**
         * @method render
         * @returns {Backbone.View}
         */
        render: function() {
            this.$el.html(templateGradingButtons);
            return this;
        },
        /**
         * @property {Object} events
         */
        events: {
            'click.GradingButtons #grade1': 'handleButtonClick',
            'click.GradingButtons #grade2': 'handleButtonClick',
            'click.GradingButtons #grade3': 'handleButtonClick',
            'click.GradingButtons #grade4': 'handleButtonClick'
        },
        /**
         * @method collapse
         */
        collapse: function() {
            GradingButtons.expanded = false;
            for (var i = 1; i <= 4; i++) {
                if (this.$('#grade' + i).hasClass('selected')) {
                    this.$('#grade' + i).show(GradingButtons.animationSpeed);
                } else {
                    this.$('#grade' + i).hide(GradingButtons.animationSpeed);
                }
            }
        },
        /**
         * @method expand
         */
        expand: function() {
            GradingButtons.expanded = true;
            this.$('#grading-buttons').children().show(GradingButtons.animationSpeed);
        },
        /**
         * @method grade
         * @param {Number} value
         * @returns {Number}
         */
        grade: function(value) {
            if (value)
                GradingButtons.value = value;
            return GradingButtons.value;
        },
        /**
         * @method handleButtonClick
         * @param {Object} event
         */
        handleButtonClick: function(event) {
            this.select(parseInt(event.currentTarget.id.replace(/[^\d]+/, ''), 10));
            if (GradingButtons.expanded) {
                this.triggerSelected();
            } else {
                this.toggle();
            }
        },
        /**
         * @method hide
         */
        hide: function() {
            this.$('#grading-buttons').hide(GradingButtons.animationSpeed);
            return this;
        },
        /**
         * @method remove
         */
        remove: function() {
            this.$('#grading-buttons').remove();
            return this;
        },
        /**
         * @method select
         * @param {Number} value
         */
        select: function(value) {
            if (value)
                GradingButtons.value = value;
            for (var i = 1; i <= 4; i++) {
                if (GradingButtons.value === i) {
                    this.$('#grade' + i).addClass('selected');
                } else {
                    this.$('#grade' + i).removeClass('selected');
                }
            }
            this.show();
            return this;
        },
        /**
         * @method show
         */
        show: function() {
            this.$('#grading-buttons').show(GradingButtons.animationSpeed);
            return this;
        },
        /**
         * @method toggle
         */
        toggle: function() {
            if (GradingButtons.expanded) {
                this.collapse();
            } else {
                this.expand();
            }
            return this;
        },
        /**
         * @method triggerSelected
         */
        triggerSelected: function() {
            this.trigger('selected', GradingButtons.value);
        }
    });

    return GradingButtons;
});
/**
 * @module Skritter
 * @submodule Prompts
 * @param GradingButtons
 * @author Joshua McFarland
 */
define('prompts/Prompt',[
    'components/GradingButtons',
    'backbone'
], function(GradingButtons) {
    var Prompt = Backbone.View.extend({
        initialize: function() {
            Prompt.contained = [];
            Prompt.definition = '';
            Prompt.finished = false;
            Prompt.gradingButtons = new GradingButtons();
            Prompt.gradeColorHex = {
                1: '#e68e8e',
                2: '#d95757',
                3: '#70da70',
                4: '#4097d3'
            };
            Prompt.gradeColorFilters = {
                1: new createjs.ColorFilter(0, 0, 0, 1, 230, 142, 142, 1),
                2: new createjs.ColorFilter(0, 0, 0, 1, 217, 87, 87, 1),
                3: new createjs.ColorFilter(0, 0, 0, 1, 112, 218, 112, 1),
                4: new createjs.ColorFilter(0, 0, 0, 1, 112, 218, 112, 1)
            };
            Prompt.item = null;
            Prompt.position = 1;
            Prompt.reading = '';
            Prompt.results = [];
            Prompt.sentence = '';
            Prompt.vocabs = null;
            Prompt.writing = '';
            this.listenTo(skritter.settings, 'resize', this.resize);
            this.listenTo(Prompt.gradingButtons, 'selected', this.handleGradeSelected);
        },
        render: function() {
            Prompt.gradingButtons.setElement(this.$('#grading-container')).render();
            this.$('.prompt-writing').addClass(skritter.user.getTextStyle());
            this.$('.prompt-sentence').addClass(skritter.user.getTextStyle());
            this.resize();
        },
        handleGradeSelected: function(selected) {
            Prompt.grade = selected;
            if (Prompt.finished) {
                this.next();
            }
        },
        /**
         * @method isFinished
         * @returns {Boolean}
         */
        isFinished: function() {
            if (Prompt.finished)
                return true;
            return false;
        },
        /**
         * Returns true if the prompt is in the first position.
         * 
         * @method isFirst
         * @returns {Boolean}
         */
        isFirst: function() {
            if (Prompt.position === 1)
                return true;
            return false;
        },
        /**
         * Returns true if the prompt is in the last position.
         * 
         * @method isLast
         * @returns {Boolean}
         */
        isLast: function() {
            if (Prompt.position >= Prompt.vocabs[0].getCharacterCount())
                return true;
            return false;
        },
        next: function() {
            //store the results for the item or subitem
            Prompt.results.push({
                item: Prompt.contained[Prompt.position - 1],
                grade: Prompt.gradingButtons.grade(),
                reviewTime: skritter.timer.getReviewTime(),
                startTime: skritter.timer.getStartTime(),
                thinkingTime: skritter.timer.getThinkingTime()
            });
            //defn and rdng prompts don't have subitems
            this.triggerPromptComplete();
        },
        /**
         * @method resize
         */
        resize: function() {
            var canvasSize = skritter.settings.get('canvasSize');
            this.$('#input-container').width(canvasSize);
            this.$('#input-container').height(canvasSize);
            //manually resizes the info section to fill the space mobile devices
            if (skritter.settings.get('appWidth') <= 768) {
                this.$('#info-container').height(skritter.settings.get('appHeight') - $('.navbar').height() - canvasSize - 8);
            } else {
                this.$('#info-container').height('');
            }
        },
        /**
         * @method set
         * @param {Array} vocabs
         * @param {Backbone.Model} item
         * @returns {Backbone.View}
         */
        set: function(vocabs, item) {
            console.log('PROMPT', vocabs[0].get('writing'), item, vocabs);
            Prompt.contained = item.getContained();
            Prompt.definition = vocabs[0].get('definitions')[skritter.user.getSetting('sourceLang')];
            Prompt.item = item;
            Prompt.reading = vocabs[0].get('reading');
            Prompt.sentence = vocabs[0].getSentence();
            Prompt.vocabs = vocabs;
            Prompt.writing = vocabs[0].get('writing');
            skritter.timer.reset();
            return this;
        },
        /**
         * @method triggerPromptComplete
         */
        triggerPromptComplete: function() {
            this.trigger('complete', Prompt.results);
        }
    });

    return Prompt;
});
define('require.text!templates/prompts-defn.html',[],function () { return '<div id="defn" class="prompt">\r\n    \r\n    <div id="info-container">\r\n        <div class="prompt-row">\r\n            <span class="prompt-writing"></span>\r\n            <span class="prompt-style"></span>\r\n        </div>\r\n        <div class="prompt-row"><span class="prompt-reading"></span></div>\r\n        <div class="prompt-row"><span class="prompt-definition"></span></div>\r\n        <div class="prompt-row"><span class="prompt-sentence"></span></div>\r\n    </div>\r\n    \r\n    <div id="input-container">\r\n        <div id="prompt-text">\r\n            <span class="prompt-writing"></span>\r\n            <h3 class="prompt-definition"></h3>\r\n            <p id="tip"></p>\r\n        </div>\r\n        <div id="grading-container"></div>\r\n    </div>\r\n   \r\n</div>';});

/*! Hammer.JS - v1.0.5 - 2013-04-07
 * http://eightmedia.github.com/hammer.js
 *
 * Copyright (c) 2013 Jorik Tangelder <j.tangelder@gmail.com>;
 * Licensed under the MIT license */

(function(window, undefined) {
    

/**
 * Hammer
 * use this to create instances
 * @param   {HTMLElement}   element
 * @param   {Object}        options
 * @returns {Hammer.Instance}
 * @constructor
 */
var Hammer = function(element, options) {
    return new Hammer.Instance(element, options || {});
};

// default settings
Hammer.defaults = {
    // add styles and attributes to the element to prevent the browser from doing
    // its native behavior. this doesnt prevent the scrolling, but cancels
    // the contextmenu, tap highlighting etc
    // set to false to disable this
    stop_browser_behavior: {
		// this also triggers onselectstart=false for IE
        userSelect: 'none',
		// this makes the element blocking in IE10 >, you could experiment with the value
		// see for more options this issue; https://github.com/EightMedia/hammer.js/issues/241
        touchAction: 'none',
		touchCallout: 'none',
        contentZooming: 'none',
        userDrag: 'none',
        tapHighlightColor: 'rgba(0,0,0,0)'
    }

    // more settings are defined per gesture at gestures.js
};

// detect touchevents
Hammer.HAS_POINTEREVENTS = navigator.pointerEnabled || navigator.msPointerEnabled;
Hammer.HAS_TOUCHEVENTS = ('ontouchstart' in window);

// dont use mouseevents on mobile devices
Hammer.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
Hammer.NO_MOUSEEVENTS = Hammer.HAS_TOUCHEVENTS && navigator.userAgent.match(Hammer.MOBILE_REGEX);

// eventtypes per touchevent (start, move, end)
// are filled by Hammer.event.determineEventTypes on setup
Hammer.EVENT_TYPES = {};

// direction defines
Hammer.DIRECTION_DOWN = 'down';
Hammer.DIRECTION_LEFT = 'left';
Hammer.DIRECTION_UP = 'up';
Hammer.DIRECTION_RIGHT = 'right';

// pointer type
Hammer.POINTER_MOUSE = 'mouse';
Hammer.POINTER_TOUCH = 'touch';
Hammer.POINTER_PEN = 'pen';

// touch event defines
Hammer.EVENT_START = 'start';
Hammer.EVENT_MOVE = 'move';
Hammer.EVENT_END = 'end';

// hammer document where the base events are added at
Hammer.DOCUMENT = document;

// plugins namespace
Hammer.plugins = {};

// if the window events are set...
Hammer.READY = false;

/**
 * setup events to detect gestures on the document
 */
function setup() {
    if(Hammer.READY) {
        return;
    }

    // find what eventtypes we add listeners to
    Hammer.event.determineEventTypes();

    // Register all gestures inside Hammer.gestures
    for(var name in Hammer.gestures) {
        if(Hammer.gestures.hasOwnProperty(name)) {
            Hammer.detection.register(Hammer.gestures[name]);
        }
    }

    // Add touch events on the document
    Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_MOVE, Hammer.detection.detect);
    Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_END, Hammer.detection.detect);

    // Hammer is ready...!
    Hammer.READY = true;
}

/**
 * create new hammer instance
 * all methods should return the instance itself, so it is chainable.
 * @param   {HTMLElement}       element
 * @param   {Object}            [options={}]
 * @returns {Hammer.Instance}
 * @constructor
 */
Hammer.Instance = function(element, options) {
    var self = this;

    // setup HammerJS window events and register all gestures
    // this also sets up the default options
    setup();

    this.element = element;

    // start/stop detection option
    this.enabled = true;

    // merge options
    this.options = Hammer.utils.extend(
        Hammer.utils.extend({}, Hammer.defaults),
        options || {});

    // add some css to the element to prevent the browser from doing its native behavoir
    if(this.options.stop_browser_behavior) {
        Hammer.utils.stopDefaultBrowserBehavior(this.element, this.options.stop_browser_behavior);
    }

    // start detection on touchstart
    Hammer.event.onTouch(element, Hammer.EVENT_START, function(ev) {
        if(self.enabled) {
            Hammer.detection.startDetect(self, ev);
        }
    });

    // return instance
    return this;
};


Hammer.Instance.prototype = {
    /**
     * bind events to the instance
     * @param   {String}      gesture
     * @param   {Function}    handler
     * @returns {Hammer.Instance}
     */
    on: function onEvent(gesture, handler){
        var gestures = gesture.split(' ');
        for(var t=0; t<gestures.length; t++) {
            this.element.addEventListener(gestures[t], handler, false);
        }
        return this;
    },


    /**
     * unbind events to the instance
     * @param   {String}      gesture
     * @param   {Function}    handler
     * @returns {Hammer.Instance}
     */
    off: function offEvent(gesture, handler){
        var gestures = gesture.split(' ');
        for(var t=0; t<gestures.length; t++) {
            this.element.removeEventListener(gestures[t], handler, false);
        }
        return this;
    },


    /**
     * trigger gesture event
     * @param   {String}      gesture
     * @param   {Object}      eventData
     * @returns {Hammer.Instance}
     */
    trigger: function triggerEvent(gesture, eventData){
        // create DOM event
        var event = Hammer.DOCUMENT.createEvent('Event');
		event.initEvent(gesture, true, true);
		event.gesture = eventData;

        // trigger on the target if it is in the instance element,
        // this is for event delegation tricks
        var element = this.element;
        if(Hammer.utils.hasParent(eventData.target, element)) {
            element = eventData.target;
        }

        element.dispatchEvent(event);
        return this;
    },


    /**
     * enable of disable hammer.js detection
     * @param   {Boolean}   state
     * @returns {Hammer.Instance}
     */
    enable: function enable(state) {
        this.enabled = state;
        return this;
    }
};

/**
 * this holds the last move event,
 * used to fix empty touchend issue
 * see the onTouch event for an explanation
 * @type {Object}
 */
var last_move_event = null;


/**
 * when the mouse is hold down, this is true
 * @type {Boolean}
 */
var enable_detect = false;


/**
 * when touch events have been fired, this is true
 * @type {Boolean}
 */
var touch_triggered = false;


Hammer.event = {
    /**
     * simple addEventListener
     * @param   {HTMLElement}   element
     * @param   {String}        type
     * @param   {Function}      handler
     */
    bindDom: function(element, type, handler) {
        var types = type.split(' ');
        for(var t=0; t<types.length; t++) {
            element.addEventListener(types[t], handler, false);
        }
    },


    /**
     * touch events with mouse fallback
     * @param   {HTMLElement}   element
     * @param   {String}        eventType        like Hammer.EVENT_MOVE
     * @param   {Function}      handler
     */
    onTouch: function onTouch(element, eventType, handler) {
		var self = this;

        this.bindDom(element, Hammer.EVENT_TYPES[eventType], function bindDomOnTouch(ev) {
            var sourceEventType = ev.type.toLowerCase();

            // onmouseup, but when touchend has been fired we do nothing.
            // this is for touchdevices which also fire a mouseup on touchend
            if(sourceEventType.match(/mouse/) && touch_triggered) {
                return;
            }

            // mousebutton must be down or a touch event
            else if( sourceEventType.match(/touch/) ||   // touch events are always on screen
                sourceEventType.match(/pointerdown/) || // pointerevents touch
                (sourceEventType.match(/mouse/) && ev.which === 1)   // mouse is pressed
            ){
                enable_detect = true;
            }

            // we are in a touch event, set the touch triggered bool to true,
            // this for the conflicts that may occur on ios and android
            if(sourceEventType.match(/touch|pointer/)) {
                touch_triggered = true;
            }

            // count the total touches on the screen
            var count_touches = 0;

            // when touch has been triggered in this detection session
            // and we are now handling a mouse event, we stop that to prevent conflicts
            if(enable_detect) {
                // update pointerevent
                if(Hammer.HAS_POINTEREVENTS && eventType != Hammer.EVENT_END) {
                    count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);
                }
                // touch
                else if(sourceEventType.match(/touch/)) {
                    count_touches = ev.touches.length;
                }
                // mouse
                else if(!touch_triggered) {
                    count_touches = sourceEventType.match(/up/) ? 0 : 1;
                }

                // if we are in a end event, but when we remove one touch and
                // we still have enough, set eventType to move
                if(count_touches > 0 && eventType == Hammer.EVENT_END) {
                    eventType = Hammer.EVENT_MOVE;
                }
                // no touches, force the end event
                else if(!count_touches) {
                    eventType = Hammer.EVENT_END;
                }

                // because touchend has no touches, and we often want to use these in our gestures,
                // we send the last move event as our eventData in touchend
                if(!count_touches && last_move_event !== null) {
                    ev = last_move_event;
                }
                // store the last move event
                else {
                    last_move_event = ev;
                }

                // trigger the handler
                handler.call(Hammer.detection, self.collectEventData(element, eventType, ev));

                // remove pointerevent from list
                if(Hammer.HAS_POINTEREVENTS && eventType == Hammer.EVENT_END) {
                    count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);
                }
            }

            //debug(sourceEventType +" "+ eventType);

            // on the end we reset everything
            if(!count_touches) {
                last_move_event = null;
                enable_detect = false;
                touch_triggered = false;
                Hammer.PointerEvent.reset();
            }
        });
    },


    /**
     * we have different events for each device/browser
     * determine what we need and set them in the Hammer.EVENT_TYPES constant
     */
    determineEventTypes: function determineEventTypes() {
        // determine the eventtype we want to set
        var types;

        // pointerEvents magic
        if(Hammer.HAS_POINTEREVENTS) {
            types = Hammer.PointerEvent.getEvents();
        }
        // on Android, iOS, blackberry, windows mobile we dont want any mouseevents
        else if(Hammer.NO_MOUSEEVENTS) {
            types = [
                'touchstart',
                'touchmove',
                'touchend touchcancel'];
        }
        // for non pointer events browsers and mixed browsers,
        // like chrome on windows8 touch laptop
        else {
            types = [
                'touchstart mousedown',
                'touchmove mousemove',
                'touchend touchcancel mouseup'];
        }

        Hammer.EVENT_TYPES[Hammer.EVENT_START]  = types[0];
        Hammer.EVENT_TYPES[Hammer.EVENT_MOVE]   = types[1];
        Hammer.EVENT_TYPES[Hammer.EVENT_END]    = types[2];
    },


    /**
     * create touchlist depending on the event
     * @param   {Object}    ev
     * @param   {String}    eventType   used by the fakemultitouch plugin
     */
    getTouchList: function getTouchList(ev/*, eventType*/) {
        // get the fake pointerEvent touchlist
        if(Hammer.HAS_POINTEREVENTS) {
            return Hammer.PointerEvent.getTouchList();
        }
        // get the touchlist
        else if(ev.touches) {
            return ev.touches;
        }
        // make fake touchlist from mouse position
        else {
            return [{
                identifier: 1,
                pageX: ev.pageX,
                pageY: ev.pageY,
                target: ev.target
            }];
        }
    },


    /**
     * collect event data for Hammer js
     * @param   {HTMLElement}   element
     * @param   {String}        eventType        like Hammer.EVENT_MOVE
     * @param   {Object}        eventData
     */
    collectEventData: function collectEventData(element, eventType, ev) {
        var touches = this.getTouchList(ev, eventType);

        // find out pointerType
        var pointerType = Hammer.POINTER_TOUCH;
        if(ev.type.match(/mouse/) || Hammer.PointerEvent.matchType(Hammer.POINTER_MOUSE, ev)) {
            pointerType = Hammer.POINTER_MOUSE;
        }

        return {
            center      : Hammer.utils.getCenter(touches),
            timeStamp   : new Date().getTime(),
            target      : ev.target,
            touches     : touches,
            eventType   : eventType,
            pointerType : pointerType,
            srcEvent    : ev,

            /**
             * prevent the browser default actions
             * mostly used to disable scrolling of the browser
             */
            preventDefault: function() {
                if(this.srcEvent.preventManipulation) {
                    this.srcEvent.preventManipulation();
                }

                if(this.srcEvent.preventDefault) {
                    this.srcEvent.preventDefault();
                }
            },

            /**
             * stop bubbling the event up to its parents
             */
            stopPropagation: function() {
                this.srcEvent.stopPropagation();
            },

            /**
             * immediately stop gesture detection
             * might be useful after a swipe was detected
             * @return {*}
             */
            stopDetect: function() {
                return Hammer.detection.stopDetect();
            }
        };
    }
};

Hammer.PointerEvent = {
    /**
     * holds all pointers
     * @type {Object}
     */
    pointers: {},

    /**
     * get a list of pointers
     * @returns {Array}     touchlist
     */
    getTouchList: function() {
        var self = this;
        var touchlist = [];

        // we can use forEach since pointerEvents only is in IE10
        Object.keys(self.pointers).sort().forEach(function(id) {
            touchlist.push(self.pointers[id]);
        });
        return touchlist;
    },

    /**
     * update the position of a pointer
     * @param   {String}   type             Hammer.EVENT_END
     * @param   {Object}   pointerEvent
     */
    updatePointer: function(type, pointerEvent) {
        if(type == Hammer.EVENT_END) {
            this.pointers = {};
        }
        else {
            pointerEvent.identifier = pointerEvent.pointerId;
            this.pointers[pointerEvent.pointerId] = pointerEvent;
        }

        return Object.keys(this.pointers).length;
    },

    /**
     * check if ev matches pointertype
     * @param   {String}        pointerType     Hammer.POINTER_MOUSE
     * @param   {PointerEvent}  ev
     */
    matchType: function(pointerType, ev) {
        if(!ev.pointerType) {
            return false;
        }

        var types = {};
        types[Hammer.POINTER_MOUSE] = (ev.pointerType == ev.MSPOINTER_TYPE_MOUSE || ev.pointerType == Hammer.POINTER_MOUSE);
        types[Hammer.POINTER_TOUCH] = (ev.pointerType == ev.MSPOINTER_TYPE_TOUCH || ev.pointerType == Hammer.POINTER_TOUCH);
        types[Hammer.POINTER_PEN] = (ev.pointerType == ev.MSPOINTER_TYPE_PEN || ev.pointerType == Hammer.POINTER_PEN);
        return types[pointerType];
    },


    /**
     * get events
     */
    getEvents: function() {
        return [
            'pointerdown MSPointerDown',
            'pointermove MSPointerMove',
            'pointerup pointercancel MSPointerUp MSPointerCancel'
        ];
    },

    /**
     * reset the list
     */
    reset: function() {
        this.pointers = {};
    }
};


Hammer.utils = {
    /**
     * extend method,
     * also used for cloning when dest is an empty object
     * @param   {Object}    dest
     * @param   {Object}    src
	 * @parm	{Boolean}	merge		do a merge
     * @returns {Object}    dest
     */
    extend: function extend(dest, src, merge) {
        for (var key in src) {
			if(dest[key] !== undefined && merge) {
				continue;
			}
            dest[key] = src[key];
        }
        return dest;
    },


    /**
     * find if a node is in the given parent
     * used for event delegation tricks
     * @param   {HTMLElement}   node
     * @param   {HTMLElement}   parent
     * @returns {boolean}       has_parent
     */
    hasParent: function(node, parent) {
        while(node){
            if(node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    },


    /**
     * get the center of all the touches
     * @param   {Array}     touches
     * @returns {Object}    center
     */
    getCenter: function getCenter(touches) {
        var valuesX = [], valuesY = [];

        for(var t= 0,len=touches.length; t<len; t++) {
            valuesX.push(touches[t].pageX);
            valuesY.push(touches[t].pageY);
        }

        return {
            pageX: ((Math.min.apply(Math, valuesX) + Math.max.apply(Math, valuesX)) / 2),
            pageY: ((Math.min.apply(Math, valuesY) + Math.max.apply(Math, valuesY)) / 2)
        };
    },


    /**
     * calculate the velocity between two points
     * @param   {Number}    delta_time
     * @param   {Number}    delta_x
     * @param   {Number}    delta_y
     * @returns {Object}    velocity
     */
    getVelocity: function getVelocity(delta_time, delta_x, delta_y) {
        return {
            x: Math.abs(delta_x / delta_time) || 0,
            y: Math.abs(delta_y / delta_time) || 0
        };
    },


    /**
     * calculate the angle between two coordinates
     * @param   {Touch}     touch1
     * @param   {Touch}     touch2
     * @returns {Number}    angle
     */
    getAngle: function getAngle(touch1, touch2) {
        var y = touch2.pageY - touch1.pageY,
            x = touch2.pageX - touch1.pageX;
        return Math.atan2(y, x) * 180 / Math.PI;
    },


    /**
     * angle to direction define
     * @param   {Touch}     touch1
     * @param   {Touch}     touch2
     * @returns {String}    direction constant, like Hammer.DIRECTION_LEFT
     */
    getDirection: function getDirection(touch1, touch2) {
        var x = Math.abs(touch1.pageX - touch2.pageX),
            y = Math.abs(touch1.pageY - touch2.pageY);

        if(x >= y) {
            return touch1.pageX - touch2.pageX > 0 ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;
        }
        else {
            return touch1.pageY - touch2.pageY > 0 ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;
        }
    },


    /**
     * calculate the distance between two touches
     * @param   {Touch}     touch1
     * @param   {Touch}     touch2
     * @returns {Number}    distance
     */
    getDistance: function getDistance(touch1, touch2) {
        var x = touch2.pageX - touch1.pageX,
            y = touch2.pageY - touch1.pageY;
        return Math.sqrt((x*x) + (y*y));
    },


    /**
     * calculate the scale factor between two touchLists (fingers)
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param   {Array}     start
     * @param   {Array}     end
     * @returns {Number}    scale
     */
    getScale: function getScale(start, end) {
        // need two fingers...
        if(start.length >= 2 && end.length >= 2) {
            return this.getDistance(end[0], end[1]) /
                this.getDistance(start[0], start[1]);
        }
        return 1;
    },


    /**
     * calculate the rotation degrees between two touchLists (fingers)
     * @param   {Array}     start
     * @param   {Array}     end
     * @returns {Number}    rotation
     */
    getRotation: function getRotation(start, end) {
        // need two fingers
        if(start.length >= 2 && end.length >= 2) {
            return this.getAngle(end[1], end[0]) -
                this.getAngle(start[1], start[0]);
        }
        return 0;
    },


    /**
     * boolean if the direction is vertical
     * @param    {String}    direction
     * @returns  {Boolean}   is_vertical
     */
    isVertical: function isVertical(direction) {
        return (direction == Hammer.DIRECTION_UP || direction == Hammer.DIRECTION_DOWN);
    },


    /**
     * stop browser default behavior with css props
     * @param   {HtmlElement}   element
     * @param   {Object}        css_props
     */
    stopDefaultBrowserBehavior: function stopDefaultBrowserBehavior(element, css_props) {
        var prop,
            vendors = ['webkit','khtml','moz','ms','o',''];

        if(!css_props || !element.style) {
            return;
        }

        // with css properties for modern browsers
        for(var i = 0; i < vendors.length; i++) {
            for(var p in css_props) {
                if(css_props.hasOwnProperty(p)) {
                    prop = p;

                    // vender prefix at the property
                    if(vendors[i]) {
                        prop = vendors[i] + prop.substring(0, 1).toUpperCase() + prop.substring(1);
                    }

                    // set the style
                    element.style[prop] = css_props[p];
                }
            }
        }

        // also the disable onselectstart
        if(css_props.userSelect == 'none') {
            element.onselectstart = function() {
                return false;
            };
        }
    }
};

Hammer.detection = {
    // contains all registred Hammer.gestures in the correct order
    gestures: [],

    // data of the current Hammer.gesture detection session
    current: null,

    // the previous Hammer.gesture session data
    // is a full clone of the previous gesture.current object
    previous: null,

    // when this becomes true, no gestures are fired
    stopped: false,


    /**
     * start Hammer.gesture detection
     * @param   {Hammer.Instance}   inst
     * @param   {Object}            eventData
     */
    startDetect: function startDetect(inst, eventData) {
        // already busy with a Hammer.gesture detection on an element
        if(this.current) {
            return;
        }

        this.stopped = false;

        this.current = {
            inst        : inst, // reference to HammerInstance we're working for
            startEvent  : Hammer.utils.extend({}, eventData), // start eventData for distances, timing etc
            lastEvent   : false, // last eventData
            name        : '' // current gesture we're in/detected, can be 'tap', 'hold' etc
        };

        this.detect(eventData);
    },


    /**
     * Hammer.gesture detection
     * @param   {Object}    eventData
     * @param   {Object}    eventData
     */
    detect: function detect(eventData) {
        if(!this.current || this.stopped) {
            return;
        }

        // extend event data with calculations about scale, distance etc
        eventData = this.extendEventData(eventData);

        // instance options
        var inst_options = this.current.inst.options;

        // call Hammer.gesture handlers
        for(var g=0,len=this.gestures.length; g<len; g++) {
            var gesture = this.gestures[g];

            // only when the instance options have enabled this gesture
            if(!this.stopped && inst_options[gesture.name] !== false) {
                // if a handler returns false, we stop with the detection
                if(gesture.handler.call(gesture, eventData, this.current.inst) === false) {
                    this.stopDetect();
                    break;
                }
            }
        }

        // store as previous event event
        if(this.current) {
            this.current.lastEvent = eventData;
        }

        // endevent, but not the last touch, so dont stop
        if(eventData.eventType == Hammer.EVENT_END && !eventData.touches.length-1) {
            this.stopDetect();
        }

        return eventData;
    },


    /**
     * clear the Hammer.gesture vars
     * this is called on endDetect, but can also be used when a final Hammer.gesture has been detected
     * to stop other Hammer.gestures from being fired
     */
    stopDetect: function stopDetect() {
        // clone current data to the store as the previous gesture
        // used for the double tap gesture, since this is an other gesture detect session
        this.previous = Hammer.utils.extend({}, this.current);

        // reset the current
        this.current = null;

        // stopped!
        this.stopped = true;
    },


    /**
     * extend eventData for Hammer.gestures
     * @param   {Object}   ev
     * @returns {Object}   ev
     */
    extendEventData: function extendEventData(ev) {
        var startEv = this.current.startEvent;

        // if the touches change, set the new touches over the startEvent touches
        // this because touchevents don't have all the touches on touchstart, or the
        // user must place his fingers at the EXACT same time on the screen, which is not realistic
        // but, sometimes it happens that both fingers are touching at the EXACT same time
        if(startEv && (ev.touches.length != startEv.touches.length || ev.touches === startEv.touches)) {
            // extend 1 level deep to get the touchlist with the touch objects
            startEv.touches = [];
            for(var i=0,len=ev.touches.length; i<len; i++) {
                startEv.touches.push(Hammer.utils.extend({}, ev.touches[i]));
            }
        }

        var delta_time = ev.timeStamp - startEv.timeStamp,
            delta_x = ev.center.pageX - startEv.center.pageX,
            delta_y = ev.center.pageY - startEv.center.pageY,
            velocity = Hammer.utils.getVelocity(delta_time, delta_x, delta_y);

        Hammer.utils.extend(ev, {
            deltaTime   : delta_time,

            deltaX      : delta_x,
            deltaY      : delta_y,

            velocityX   : velocity.x,
            velocityY   : velocity.y,

            distance    : Hammer.utils.getDistance(startEv.center, ev.center),
            angle       : Hammer.utils.getAngle(startEv.center, ev.center),
            direction   : Hammer.utils.getDirection(startEv.center, ev.center),

            scale       : Hammer.utils.getScale(startEv.touches, ev.touches),
            rotation    : Hammer.utils.getRotation(startEv.touches, ev.touches),

            startEvent  : startEv
        });

        return ev;
    },


    /**
     * register new gesture
     * @param   {Object}    gesture object, see gestures.js for documentation
     * @returns {Array}     gestures
     */
    register: function register(gesture) {
        // add an enable gesture options if there is no given
        var options = gesture.defaults || {};
        if(options[gesture.name] === undefined) {
            options[gesture.name] = true;
        }

        // extend Hammer default options with the Hammer.gesture options
        Hammer.utils.extend(Hammer.defaults, options, true);

        // set its index
        gesture.index = gesture.index || 1000;

        // add Hammer.gesture to the list
        this.gestures.push(gesture);

        // sort the list by index
        this.gestures.sort(function(a, b) {
            if (a.index < b.index) {
                return -1;
            }
            if (a.index > b.index) {
                return 1;
            }
            return 0;
        });

        return this.gestures;
    }
};


Hammer.gestures = Hammer.gestures || {};

/**
 * Custom gestures
 * ==============================
 *
 * Gesture object
 * --------------------
 * The object structure of a gesture:
 *
 * { name: 'mygesture',
 *   index: 1337,
 *   defaults: {
 *     mygesture_option: true
 *   }
 *   handler: function(type, ev, inst) {
 *     // trigger gesture event
 *     inst.trigger(this.name, ev);
 *   }
 * }

 * @param   {String}    name
 * this should be the name of the gesture, lowercase
 * it is also being used to disable/enable the gesture per instance config.
 *
 * @param   {Number}    [index=1000]
 * the index of the gesture, where it is going to be in the stack of gestures detection
 * like when you build an gesture that depends on the drag gesture, it is a good
 * idea to place it after the index of the drag gesture.
 *
 * @param   {Object}    [defaults={}]
 * the default settings of the gesture. these are added to the instance settings,
 * and can be overruled per instance. you can also add the name of the gesture,
 * but this is also added by default (and set to true).
 *
 * @param   {Function}  handler
 * this handles the gesture detection of your custom gesture and receives the
 * following arguments:
 *
 *      @param  {Object}    eventData
 *      event data containing the following properties:
 *          timeStamp   {Number}        time the event occurred
 *          target      {HTMLElement}   target element
 *          touches     {Array}         touches (fingers, pointers, mouse) on the screen
 *          pointerType {String}        kind of pointer that was used. matches Hammer.POINTER_MOUSE|TOUCH
 *          center      {Object}        center position of the touches. contains pageX and pageY
 *          deltaTime   {Number}        the total time of the touches in the screen
 *          deltaX      {Number}        the delta on x axis we haved moved
 *          deltaY      {Number}        the delta on y axis we haved moved
 *          velocityX   {Number}        the velocity on the x
 *          velocityY   {Number}        the velocity on y
 *          angle       {Number}        the angle we are moving
 *          direction   {String}        the direction we are moving. matches Hammer.DIRECTION_UP|DOWN|LEFT|RIGHT
 *          distance    {Number}        the distance we haved moved
 *          scale       {Number}        scaling of the touches, needs 2 touches
 *          rotation    {Number}        rotation of the touches, needs 2 touches *
 *          eventType   {String}        matches Hammer.EVENT_START|MOVE|END
 *          srcEvent    {Object}        the source event, like TouchStart or MouseDown *
 *          startEvent  {Object}        contains the same properties as above,
 *                                      but from the first touch. this is used to calculate
 *                                      distances, deltaTime, scaling etc
 *
 *      @param  {Hammer.Instance}    inst
 *      the instance we are doing the detection for. you can get the options from
 *      the inst.options object and trigger the gesture event by calling inst.trigger
 *
 *
 * Handle gestures
 * --------------------
 * inside the handler you can get/set Hammer.detection.current. This is the current
 * detection session. It has the following properties
 *      @param  {String}    name
 *      contains the name of the gesture we have detected. it has not a real function,
 *      only to check in other gestures if something is detected.
 *      like in the drag gesture we set it to 'drag' and in the swipe gesture we can
 *      check if the current gesture is 'drag' by accessing Hammer.detection.current.name
 *
 *      @readonly
 *      @param  {Hammer.Instance}    inst
 *      the instance we do the detection for
 *
 *      @readonly
 *      @param  {Object}    startEvent
 *      contains the properties of the first gesture detection in this session.
 *      Used for calculations about timing, distance, etc.
 *
 *      @readonly
 *      @param  {Object}    lastEvent
 *      contains all the properties of the last gesture detect in this session.
 *
 * after the gesture detection session has been completed (user has released the screen)
 * the Hammer.detection.current object is copied into Hammer.detection.previous,
 * this is usefull for gestures like doubletap, where you need to know if the
 * previous gesture was a tap
 *
 * options that have been set by the instance can be received by calling inst.options
 *
 * You can trigger a gesture event by calling inst.trigger("mygesture", event).
 * The first param is the name of your gesture, the second the event argument
 *
 *
 * Register gestures
 * --------------------
 * When an gesture is added to the Hammer.gestures object, it is auto registered
 * at the setup of the first Hammer instance. You can also call Hammer.detection.register
 * manually and pass your gesture object as a param
 *
 */

/**
 * Hold
 * Touch stays at the same place for x time
 * @events  hold
 */
Hammer.gestures.Hold = {
    name: 'hold',
    index: 10,
    defaults: {
        hold_timeout	: 500,
        hold_threshold	: 1
    },
    timer: null,
    handler: function holdGesture(ev, inst) {
        switch(ev.eventType) {
            case Hammer.EVENT_START:
                // clear any running timers
                clearTimeout(this.timer);

                // set the gesture so we can check in the timeout if it still is
                Hammer.detection.current.name = this.name;

                // set timer and if after the timeout it still is hold,
                // we trigger the hold event
                this.timer = setTimeout(function() {
                    if(Hammer.detection.current.name == 'hold') {
                        inst.trigger('hold', ev);
                    }
                }, inst.options.hold_timeout);
                break;

            // when you move or end we clear the timer
            case Hammer.EVENT_MOVE:
                if(ev.distance > inst.options.hold_threshold) {
                    clearTimeout(this.timer);
                }
                break;

            case Hammer.EVENT_END:
                clearTimeout(this.timer);
                break;
        }
    }
};


/**
 * Tap/DoubleTap
 * Quick touch at a place or double at the same place
 * @events  tap, doubletap
 */
Hammer.gestures.Tap = {
    name: 'tap',
    index: 100,
    defaults: {
        tap_max_touchtime	: 250,
        tap_max_distance	: 10,
		tap_always			: true,
        doubletap_distance	: 20,
        doubletap_interval	: 300
    },
    handler: function tapGesture(ev, inst) {
        if(ev.eventType == Hammer.EVENT_END) {
            // previous gesture, for the double tap since these are two different gesture detections
            var prev = Hammer.detection.previous,
				did_doubletap = false;

            // when the touchtime is higher then the max touch time
            // or when the moving distance is too much
            if(ev.deltaTime > inst.options.tap_max_touchtime ||
                ev.distance > inst.options.tap_max_distance) {
                return;
            }

            // check if double tap
            if(prev && prev.name == 'tap' &&
                (ev.timeStamp - prev.lastEvent.timeStamp) < inst.options.doubletap_interval &&
                ev.distance < inst.options.doubletap_distance) {
				inst.trigger('doubletap', ev);
				did_doubletap = true;
            }

			// do a single tap
			if(!did_doubletap || inst.options.tap_always) {
				Hammer.detection.current.name = 'tap';
				inst.trigger(Hammer.detection.current.name, ev);
			}
        }
    }
};


/**
 * Swipe
 * triggers swipe events when the end velocity is above the threshold
 * @events  swipe, swipeleft, swiperight, swipeup, swipedown
 */
Hammer.gestures.Swipe = {
    name: 'swipe',
    index: 40,
    defaults: {
        // set 0 for unlimited, but this can conflict with transform
        swipe_max_touches  : 1,
        swipe_velocity     : 0.7
    },
    handler: function swipeGesture(ev, inst) {
        if(ev.eventType == Hammer.EVENT_END) {
            // max touches
            if(inst.options.swipe_max_touches > 0 &&
                ev.touches.length > inst.options.swipe_max_touches) {
                return;
            }

            // when the distance we moved is too small we skip this gesture
            // or we can be already in dragging
            if(ev.velocityX > inst.options.swipe_velocity ||
                ev.velocityY > inst.options.swipe_velocity) {
                // trigger swipe events
                inst.trigger(this.name, ev);
                inst.trigger(this.name + ev.direction, ev);
            }
        }
    }
};


/**
 * Drag
 * Move with x fingers (default 1) around on the page. Blocking the scrolling when
 * moving left and right is a good practice. When all the drag events are blocking
 * you disable scrolling on that area.
 * @events  drag, drapleft, dragright, dragup, dragdown
 */
Hammer.gestures.Drag = {
    name: 'drag',
    index: 50,
    defaults: {
        drag_min_distance : 10,
        // set 0 for unlimited, but this can conflict with transform
        drag_max_touches  : 1,
        // prevent default browser behavior when dragging occurs
        // be careful with it, it makes the element a blocking element
        // when you are using the drag gesture, it is a good practice to set this true
        drag_block_horizontal   : false,
        drag_block_vertical     : false,
        // drag_lock_to_axis keeps the drag gesture on the axis that it started on,
        // It disallows vertical directions if the initial direction was horizontal, and vice versa.
        drag_lock_to_axis       : false,
        // drag lock only kicks in when distance > drag_lock_min_distance
        // This way, locking occurs only when the distance has become large enough to reliably determine the direction
        drag_lock_min_distance : 25
    },
    triggered: false,
    handler: function dragGesture(ev, inst) {
        // current gesture isnt drag, but dragged is true
        // this means an other gesture is busy. now call dragend
        if(Hammer.detection.current.name != this.name && this.triggered) {
            inst.trigger(this.name +'end', ev);
            this.triggered = false;
            return;
        }

        // max touches
        if(inst.options.drag_max_touches > 0 &&
            ev.touches.length > inst.options.drag_max_touches) {
            return;
        }

        switch(ev.eventType) {
            case Hammer.EVENT_START:
                this.triggered = false;
                break;

            case Hammer.EVENT_MOVE:
                // when the distance we moved is too small we skip this gesture
                // or we can be already in dragging
                if(ev.distance < inst.options.drag_min_distance &&
                    Hammer.detection.current.name != this.name) {
                    return;
                }

                // we are dragging!
                Hammer.detection.current.name = this.name;

                // lock drag to axis?
                if(Hammer.detection.current.lastEvent.drag_locked_to_axis || (inst.options.drag_lock_to_axis && inst.options.drag_lock_min_distance<=ev.distance)) {
                    ev.drag_locked_to_axis = true;
                }
                var last_direction = Hammer.detection.current.lastEvent.direction;
                if(ev.drag_locked_to_axis && last_direction !== ev.direction) {
                    // keep direction on the axis that the drag gesture started on
                    if(Hammer.utils.isVertical(last_direction)) {
                        ev.direction = (ev.deltaY < 0) ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;
                    }
                    else {
                        ev.direction = (ev.deltaX < 0) ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;
                    }
                }

                // first time, trigger dragstart event
                if(!this.triggered) {
                    inst.trigger(this.name +'start', ev);
                    this.triggered = true;
                }

                // trigger normal event
                inst.trigger(this.name, ev);

                // direction event, like dragdown
                inst.trigger(this.name + ev.direction, ev);

                // block the browser events
                if( (inst.options.drag_block_vertical && Hammer.utils.isVertical(ev.direction)) ||
                    (inst.options.drag_block_horizontal && !Hammer.utils.isVertical(ev.direction))) {
                    ev.preventDefault();
                }
                break;

            case Hammer.EVENT_END:
                // trigger dragend
                if(this.triggered) {
                    inst.trigger(this.name +'end', ev);
                }

                this.triggered = false;
                break;
        }
    }
};


/**
 * Transform
 * User want to scale or rotate with 2 fingers
 * @events  transform, pinch, pinchin, pinchout, rotate
 */
Hammer.gestures.Transform = {
    name: 'transform',
    index: 45,
    defaults: {
        // factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1
        transform_min_scale     : 0.01,
        // rotation in degrees
        transform_min_rotation  : 1,
        // prevent default browser behavior when two touches are on the screen
        // but it makes the element a blocking element
        // when you are using the transform gesture, it is a good practice to set this true
        transform_always_block  : false
    },
    triggered: false,
    handler: function transformGesture(ev, inst) {
        // current gesture isnt drag, but dragged is true
        // this means an other gesture is busy. now call dragend
        if(Hammer.detection.current.name != this.name && this.triggered) {
            inst.trigger(this.name +'end', ev);
            this.triggered = false;
            return;
        }

        // atleast multitouch
        if(ev.touches.length < 2) {
            return;
        }

        // prevent default when two fingers are on the screen
        if(inst.options.transform_always_block) {
            ev.preventDefault();
        }

        switch(ev.eventType) {
            case Hammer.EVENT_START:
                this.triggered = false;
                break;

            case Hammer.EVENT_MOVE:
                var scale_threshold = Math.abs(1-ev.scale);
                var rotation_threshold = Math.abs(ev.rotation);

                // when the distance we moved is too small we skip this gesture
                // or we can be already in dragging
                if(scale_threshold < inst.options.transform_min_scale &&
                    rotation_threshold < inst.options.transform_min_rotation) {
                    return;
                }

                // we are transforming!
                Hammer.detection.current.name = this.name;

                // first time, trigger dragstart event
                if(!this.triggered) {
                    inst.trigger(this.name +'start', ev);
                    this.triggered = true;
                }

                inst.trigger(this.name, ev); // basic transform event

                // trigger rotate event
                if(rotation_threshold > inst.options.transform_min_rotation) {
                    inst.trigger('rotate', ev);
                }

                // trigger pinch event
                if(scale_threshold > inst.options.transform_min_scale) {
                    inst.trigger('pinch', ev);
                    inst.trigger('pinch'+ ((ev.scale < 1) ? 'in' : 'out'), ev);
                }
                break;

            case Hammer.EVENT_END:
                // trigger dragend
                if(this.triggered) {
                    inst.trigger(this.name +'end', ev);
                }

                this.triggered = false;
                break;
        }
    }
};


/**
 * Touch
 * Called as first, tells the user has touched the screen
 * @events  touch
 */
Hammer.gestures.Touch = {
    name: 'touch',
    index: -Infinity,
    defaults: {
        // call preventDefault at touchstart, and makes the element blocking by
        // disabling the scrolling of the page, but it improves gestures like
        // transforming and dragging.
        // be careful with using this, it can be very annoying for users to be stuck
        // on the page
        prevent_default: false,

        // disable mouse events, so only touch (or pen!) input triggers events
        prevent_mouseevents: false
    },
    handler: function touchGesture(ev, inst) {
        if(inst.options.prevent_mouseevents && ev.pointerType == Hammer.POINTER_MOUSE) {
            ev.stopDetect();
            return;
        }

        if(inst.options.prevent_default) {
            ev.preventDefault();
        }

        if(ev.eventType ==  Hammer.EVENT_START) {
            inst.trigger(this.name, ev);
        }
    }
};


/**
 * Release
 * Called as last, tells the user has released the screen
 * @events  release
 */
Hammer.gestures.Release = {
    name: 'release',
    index: Infinity,
    handler: function releaseGesture(ev, inst) {
        if(ev.eventType ==  Hammer.EVENT_END) {
            inst.trigger(this.name, ev);
        }
    }
};

// node export
if(typeof module === 'object' && typeof module.exports === 'object'){
    module.exports = Hammer;
}
// just window export
else {
    window.Hammer = Hammer;

    // requireJS module definition
    if(typeof window.define === 'function' && window.define.amd) {
        window.define('hammer', [], function() {
            return Hammer;
        });
    }
}
})(this);

(function($, undefined) {
    

    // no jQuery or Zepto!
    if($ === undefined) {
        return;
    }

    /**
     * bind dom events
     * this overwrites addEventListener
     * @param   {HTMLElement}   element
     * @param   {String}        eventTypes
     * @param   {Function}      handler
     */
    Hammer.event.bindDom = function(element, eventTypes, handler) {
        $(element).on(eventTypes, function(ev) {
            var data = ev.originalEvent || ev;

            // IE pageX fix
            if(data.pageX === undefined) {
                data.pageX = ev.pageX;
                data.pageY = ev.pageY;
            }

            // IE target fix
            if(!data.target) {
                data.target = ev.target;
            }

            // IE button fix
            if(data.which === undefined) {
                data.which = data.button;
            }

            // IE preventDefault
            if(!data.preventDefault) {
                data.preventDefault = ev.preventDefault;
            }

            // IE stopPropagation
            if(!data.stopPropagation) {
                data.stopPropagation = ev.stopPropagation;
            }

            handler.call(this, data);
        });
    };

    /**
     * the methods are called by the instance, but with the jquery plugin
     * we use the jquery event methods instead.
     * @this    {Hammer.Instance}
     * @return  {jQuery}
     */
    Hammer.Instance.prototype.on = function(types, handler) {
        return $(this.element).on(types, handler);
    };
    Hammer.Instance.prototype.off = function(types, handler) {
        return $(this.element).off(types, handler);
    };


    /**
     * trigger events
     * this is called by the gestures to trigger an event like 'tap'
     * @this    {Hammer.Instance}
     * @param   {String}    gesture
     * @param   {Object}    eventData
     * @return  {jQuery}
     */
    Hammer.Instance.prototype.trigger = function(gesture, eventData){
        var el = $(this.element);
        if(el.has(eventData.target).length) {
            el = $(eventData.target);
        }

        return el.trigger({
            type: gesture,
            gesture: eventData
        });
    };


    /**
     * jQuery plugin
     * create instance of Hammer and watch for gestures,
     * and when called again you can change the options
     * @param   {Object}    [options={}]
     * @return  {jQuery}
     */
    $.fn.hammer = function(options) {
        return this.each(function() {
            var el = $(this);
            var inst = el.data('hammer');
            // start new hammer instance
            if(!inst) {
                el.data('hammer', new Hammer(this, options || {}));
            }
            // change the options
            else if(inst && options) {
                Hammer.utils.extend(inst.options, options);
            }
        });
    };

})(window.jQuery || window.Zepto);

define("jquery.hammer", function(){});

/**
 * @module Skritter
 * @submodule Prompts
 * @param PinyinConverter
 * @param Prompt
 * @param templateDefn
 * @author Joshua McFarland
 */
define('prompts/Defn',[
    'PinyinConverter',
    'prompts/Prompt',
    'require.text!templates/prompts-defn.html',
    'backbone',
    'jquery.hammer'
], function(PinyinConverter, Prompt, templateDefn) {
    /**
     * @class PromptDefn
     */
    var Defn = Prompt.extend({
        initialize: function() {
            Prompt.prototype.initialize.call(this);
        },
        render: function() {
            this.$el.html(templateDefn);
            this.$('#prompt-text').hammer().on('swipeleft.Defn', _.bind(this.handleSwipeLeft, this));
            this.$('#prompt-text').hammer().on('tap.Defn', _.bind(this.handleTap, this));
            Prompt.prototype.render.call(this);
            return this;
        },
        /*
         * @method handleSwipeLeft
         */
        handleSwipeLeft: function() {
            if (Prompt.finished)
                this.next();
        },
        /*
         * @method handleTap
         */
        handleTap: function() {
            if (Prompt.finished) {
                this.next();
            } else {
                this.showAnswer();
                Prompt.gradingButtons.show();
            }
        },
        show: function() {
            skritter.timer.start();
            this.$('.prompt-writing').text(Prompt.writing);
            if (Prompt.vocabs[0].has('audio') && this.isFirst() && skritter.user.get('audio'))
                Prompt.vocabs[0].play();
            if (skritter.user.isChinese())
                this.$('.prompt-style').text(Prompt.vocabs[0].get('style'));
            this.$('#prompt-text .prompt-definition').text("What's the definition?");
            this.$('#prompt-text #tip').text("(Click to show answer)");
        },
        showAnswer: function() {
            skritter.timer.stop();
            Prompt.finished = true;
            Prompt.gradingButtons.show();
            this.$('.prompt-reading').text(PinyinConverter.toTone(Prompt.reading));
            this.$('#prompt-text .prompt-definition').text(Prompt.definition);
            if (Prompt.sentence)
                this.$('.prompt-sentence').text(Prompt.sentence.noWhiteSpaces());
            this.$('#tip').hide();
        }
    });
    
    return Defn;
});
define('require.text!templates/prompts-rdng.html',[],function () { return '<div id="rdng" class="prompt">\r\n    \r\n    <div id="info-container">\r\n        <div class="prompt-row">\r\n            <span class="prompt-writing"></span>\r\n            <span class="prompt-style"></span>\r\n        </div>\r\n        <div class="prompt-row"><span class="prompt-reading"></span></div>\r\n        <div class="prompt-row"><span class="prompt-definition"></span></div>\r\n        <div class="prompt-row"><span class="prompt-sentence"></span></div>\r\n    </div>\r\n\r\n    <div id="input-container">\r\n        <div id="prompt-text">\r\n            <span class="prompt-writing"></span>\r\n            <h3 class="prompt-reading"></h3>\r\n            <p id="tip"></p>\r\n        </div>\r\n        <div id="grading-container"></div>\r\n    </div>\r\n    \r\n</div>';});

/**
 * @module Skritter
 * @submodule Prompts
 * @param PinyinConverter
 * @param Prompt
 * @param templateRdng
 * @author Joshua McFarland
 */
define('prompts/Rdng',[
    'PinyinConverter',
    'prompts/Prompt',
    'require.text!templates/prompts-rdng.html',
    'backbone',
    'jquery.hammer'
], function(PinyinConverter, Prompt, templateRdng) {
    /**
     * @class PromptRdng
     */
    var Rdng = Prompt.extend({
        initialize: function() {
            Prompt.prototype.initialize.call(this);
        },
        render: function() {
            this.$el.html(templateRdng);
            this.$('#prompt-text').hammer().on('swipeleft.Rdng', _.bind(this.handleSwipeLeft, this));
            this.$('#prompt-text').hammer().on('tap.Rdng', _.bind(this.handleTap, this));
            Prompt.prototype.render.call(this);
            return this;
        },
        /*
         * @method handleSwipeLeft
         */
        handleSwipeLeft: function() {
            if (Prompt.finished)
                this.next();
        },
        /*
         * @method handleTap
         */
        handleTap: function() {
            if (Prompt.finished) {
                this.next();
            } else {
                this.showAnswer();
                Prompt.gradingButtons.show();
            }
        },
        show: function() {
            skritter.timer.start();
            this.$('.prompt-writing').text(Prompt.writing);
            if (skritter.user.isChinese())
                this.$('.prompt-style').text(Prompt.vocabs[0].get('style'));
            this.$('.prompt-style').text(Prompt.vocabs[0].get('style'));
            if (Prompt.sentence)
                this.$('.prompt-sentence').text(Prompt.sentence.noWhiteSpaces());
            this.$('#prompt-text .prompt-reading').text("What's the reading?");
            this.$('#tip').text("(Click to show answer)");
        },
        showAnswer: function() {
            skritter.timer.stop();
            Prompt.finished = true;
            Prompt.gradingButtons.show();
            if (Prompt.vocabs[0].has('audio') && this.isLast() && skritter.user.get('audio'))
                Prompt.vocabs[0].play();
            this.$('.prompt-reading').text(PinyinConverter.toTone(Prompt.reading));
            this.$('.prompt-definition').text(Prompt.definition);
            this.$('#tip').hide();
        }
    });
    
    return Rdng;
});
/*!
* @license EaselJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2011-2013 gskinner.com, inc.
*
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
*/
this.createjs=this.createjs||{},function(){var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype;b.type=null,b.target=null,b.currentTarget=null,b.eventPhase=0,b.bubbles=!1,b.cancelable=!1,b.timeStamp=0,b.defaultPrevented=!1,b.propagationStopped=!1,b.immediatePropagationStopped=!1,b.removed=!1,b.initialize=function(a,b,c){this.type=a,this.bubbles=b,this.cancelable=c,this.timeStamp=(new Date).getTime()},b.preventDefault=function(){this.defaultPrevented=!0},b.stopPropagation=function(){this.propagationStopped=!0},b.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},b.remove=function(){this.removed=!0},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable)},b.toString=function(){return"[Event (type="+this.type+")]"},createjs.Event=a}(),this.createjs=this.createjs||{},function(){var a=function(){},b=a.prototype;a.initialize=function(a){a.addEventListener=b.addEventListener,a.on=b.on,a.removeEventListener=a.off=b.removeEventListener,a.removeAllEventListeners=b.removeAllEventListeners,a.hasEventListener=b.hasEventListener,a.dispatchEvent=b.dispatchEvent,a._dispatchEvent=b._dispatchEvent},b._listeners=null,b._captureListeners=null,b.initialize=function(){},b.addEventListener=function(a,b,c){var d;d=c?this._captureListeners=this._captureListeners||{}:this._listeners=this._listeners||{};var e=d[a];return e&&this.removeEventListener(a,b,c),e=d[a],e?e.push(b):d[a]=[b],b},b.on=function(a,b,c,d,e,f){return b.handleEvent&&(c=c||b,b=b.handleEvent),c=c||this,this.addEventListener(a,function(a){b.call(c,a,e),d&&a.remove()},f)},b.removeEventListener=function(a,b,c){var d=c?this._captureListeners:this._listeners;if(d){var e=d[a];if(e)for(var f=0,g=e.length;g>f;f++)if(e[f]==b){1==g?delete d[a]:e.splice(f,1);break}}},b.off=b.removeEventListener,b.removeAllEventListeners=function(a){a?(this._listeners&&delete this._listeners[a],this._captureListeners&&delete this._captureListeners[a]):this._listeners=this._captureListeners=null},b.dispatchEvent=function(a,b){if("string"==typeof a){var c=this._listeners;if(!c||!c[a])return!1;a=new createjs.Event(a)}if(a.target=b||this,a.bubbles&&this.parent){for(var d=this,e=[d];d.parent;)e.push(d=d.parent);var f,g=e.length;for(f=g-1;f>=0&&!a.propagationStopped;f--)e[f]._dispatchEvent(a,1+(0==f));for(f=1;g>f&&!a.propagationStopped;f++)e[f]._dispatchEvent(a,3)}else this._dispatchEvent(a,2);return a.defaultPrevented},b.hasEventListener=function(a){var b=this._listeners,c=this._captureListeners;return!!(b&&b[a]||c&&c[a])},b.toString=function(){return"[EventDispatcher]"},b._dispatchEvent=function(a,b){var c,d=1==b?this._captureListeners:this._listeners;if(a&&d){var e=d[a.type];if(!e||!(c=e.length))return;a.currentTarget=this,a.eventPhase=b,a.removed=!1,e=e.slice();for(var f=0;c>f&&!a.immediatePropagationStopped;f++){var g=e[f];g.handleEvent?g.handleEvent(a):g(a),a.removed&&(this.off(a.type,g,1==b),a.removed=!1)}}},createjs.EventDispatcher=a}(),this.createjs=this.createjs||{},function(){createjs.indexOf=function(a,b){for(var c=0,d=a.length;d>c;c++)if(b===a[c])return c;return-1}}(),this.createjs=this.createjs||{},function(){var a=function(){throw"UID cannot be instantiated"};a._nextID=0,a.get=function(){return a._nextID++},createjs.UID=a}(),this.createjs=this.createjs||{},function(){var a=function(){throw"Ticker cannot be instantiated."};a.RAF_SYNCHED="synched",a.RAF="raf",a.TIMEOUT="timeout",a.useRAF=!1,a.timingMode=null,a.maxDelta=0,a.removeEventListener=null,a.removeAllEventListeners=null,a.dispatchEvent=null,a.hasEventListener=null,a._listeners=null,createjs.EventDispatcher.initialize(a),a._addEventListener=a.addEventListener,a.addEventListener=function(){return!a._inited&&a.init(),a._addEventListener.apply(a,arguments)},a._paused=!1,a._inited=!1,a._startTime=0,a._pausedTime=0,a._ticks=0,a._pausedTicks=0,a._interval=50,a._lastTime=0,a._times=null,a._tickTimes=null,a._timerId=null,a._raf=!0,a.init=function(){a._inited||(a._inited=!0,a._times=[],a._tickTimes=[],a._startTime=a._getTime(),a._times.push(a._lastTime=0),a.setInterval(a._interval))},a.reset=function(){if(a._raf){var b=window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame;b&&b(a._timerId)}else clearTimeout(a._timerId);a.removeAllEventListeners("tick")},a.setInterval=function(b){a._interval=b,a._inited&&a._setupTick()},a.getInterval=function(){return a._interval},a.setFPS=function(b){a.setInterval(1e3/b)},a.getFPS=function(){return 1e3/a._interval},a.getMeasuredTickTime=function(b){var c=0,d=a._tickTimes;if(d.length<1)return-1;b=Math.min(d.length,b||0|a.getFPS());for(var e=0;b>e;e++)c+=d[e];return c/b},a.getMeasuredFPS=function(b){var c=a._times;return c.length<2?-1:(b=Math.min(c.length-1,b||0|a.getFPS()),1e3/((c[0]-c[b])/b))},a.setPaused=function(b){a._paused=b},a.getPaused=function(){return a._paused},a.getTime=function(b){return a._getTime()-a._startTime-(b?a._pausedTime:0)},a.getEventTime=function(b){return(a._lastTime||a._startTime)-(b?a._pausedTime:0)},a.getTicks=function(b){return a._ticks-(b?a._pausedTicks:0)},a._handleSynch=function(){var b=a._getTime()-a._startTime;a._timerId=null,a._setupTick(),b-a._lastTime>=.97*(a._interval-1)&&a._tick()},a._handleRAF=function(){a._timerId=null,a._setupTick(),a._tick()},a._handleTimeout=function(){a._timerId=null,a._setupTick(),a._tick()},a._setupTick=function(){if(null==a._timerId){var b=a.timingMode||a.useRAF&&a.RAF_SYNCHED;if(b==a.RAF_SYNCHED||b==a.RAF){var c=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame;if(c)return a._timerId=c(b==a.RAF?a._handleRAF:a._handleSynch),a._raf=!0,void 0}a._raf=!1,a._timerId=setTimeout(a._handleTimeout,a._interval)}},a._tick=function(){var b=a._getTime()-a._startTime,c=b-a._lastTime,d=a._paused;if(a._ticks++,d&&(a._pausedTicks++,a._pausedTime+=c),a._lastTime=b,a.hasEventListener("tick")){var e=new createjs.Event("tick"),f=a.maxDelta;e.delta=f&&c>f?f:c,e.paused=d,e.time=b,e.runTime=b-a._pausedTime,a.dispatchEvent(e)}for(a._tickTimes.unshift(a._getTime()-b);a._tickTimes.length>100;)a._tickTimes.pop();for(a._times.unshift(b);a._times.length>100;)a._times.pop()};var b=window.performance&&(performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow);a._getTime=function(){return b&&b.call(performance)||(new Date).getTime()},createjs.Ticker=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c,d,e,f,g,h,i,j){this.initialize(a,b,c,d,e,f,g,h,i,j)},b=a.prototype=new createjs.Event;b.stageX=0,b.stageY=0,b.rawX=0,b.rawY=0,b.nativeEvent=null,b.pointerID=0,b.primary=!1,b.addEventListener=null,b.removeEventListener=null,b.removeAllEventListeners=null,b.dispatchEvent=null,b.hasEventListener=null,b._listeners=null,createjs.EventDispatcher.initialize(b),b._get_localX=function(){return this.currentTarget.globalToLocal(this.rawX,this.rawY).x},b._get_localY=function(){return this.currentTarget.globalToLocal(this.rawX,this.rawY).y};try{Object.defineProperties(b,{localX:{get:b._get_localX},localY:{get:b._get_localY}})}catch(c){}b.Event_initialize=b.initialize,b.initialize=function(a,b,c,d,e,f,g,h,i,j){this.Event_initialize(a,b,c),this.stageX=d,this.stageY=e,this.nativeEvent=f,this.pointerID=g,this.primary=h,this.rawX=null==i?d:i,this.rawY=null==j?e:j},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable,this.stageX,this.stageY,this.target,this.nativeEvent,this.pointerID,this.primary,this.rawX,this.rawY)},b.toString=function(){return"[MouseEvent (type="+this.type+" stageX="+this.stageX+" stageY="+this.stageY+")]"},createjs.MouseEvent=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c,d,e,f){this.initialize(a,b,c,d,e,f)},b=a.prototype;a.identity=null,a.DEG_TO_RAD=Math.PI/180,b.a=1,b.b=0,b.c=0,b.d=1,b.tx=0,b.ty=0,b.alpha=1,b.shadow=null,b.compositeOperation=null,b.initialize=function(a,b,c,d,e,f){return this.a=null==a?1:a,this.b=b||0,this.c=c||0,this.d=null==d?1:d,this.tx=e||0,this.ty=f||0,this},b.prepend=function(a,b,c,d,e,f){var g=this.tx;if(1!=a||0!=b||0!=c||1!=d){var h=this.a,i=this.c;this.a=h*a+this.b*c,this.b=h*b+this.b*d,this.c=i*a+this.d*c,this.d=i*b+this.d*d}return this.tx=g*a+this.ty*c+e,this.ty=g*b+this.ty*d+f,this},b.append=function(a,b,c,d,e,f){var g=this.a,h=this.b,i=this.c,j=this.d;return this.a=a*g+b*i,this.b=a*h+b*j,this.c=c*g+d*i,this.d=c*h+d*j,this.tx=e*g+f*i+this.tx,this.ty=e*h+f*j+this.ty,this},b.prependMatrix=function(a){return this.prepend(a.a,a.b,a.c,a.d,a.tx,a.ty),this.prependProperties(a.alpha,a.shadow,a.compositeOperation),this},b.appendMatrix=function(a){return this.append(a.a,a.b,a.c,a.d,a.tx,a.ty),this.appendProperties(a.alpha,a.shadow,a.compositeOperation),this},b.prependTransform=function(b,c,d,e,f,g,h,i,j){if(f%360)var k=f*a.DEG_TO_RAD,l=Math.cos(k),m=Math.sin(k);else l=1,m=0;return(i||j)&&(this.tx-=i,this.ty-=j),g||h?(g*=a.DEG_TO_RAD,h*=a.DEG_TO_RAD,this.prepend(l*d,m*d,-m*e,l*e,0,0),this.prepend(Math.cos(h),Math.sin(h),-Math.sin(g),Math.cos(g),b,c)):this.prepend(l*d,m*d,-m*e,l*e,b,c),this},b.appendTransform=function(b,c,d,e,f,g,h,i,j){if(f%360)var k=f*a.DEG_TO_RAD,l=Math.cos(k),m=Math.sin(k);else l=1,m=0;return g||h?(g*=a.DEG_TO_RAD,h*=a.DEG_TO_RAD,this.append(Math.cos(h),Math.sin(h),-Math.sin(g),Math.cos(g),b,c),this.append(l*d,m*d,-m*e,l*e,0,0)):this.append(l*d,m*d,-m*e,l*e,b,c),(i||j)&&(this.tx-=i*this.a+j*this.c,this.ty-=i*this.b+j*this.d),this},b.rotate=function(a){var b=Math.cos(a),c=Math.sin(a),d=this.a,e=this.c,f=this.tx;return this.a=d*b-this.b*c,this.b=d*c+this.b*b,this.c=e*b-this.d*c,this.d=e*c+this.d*b,this.tx=f*b-this.ty*c,this.ty=f*c+this.ty*b,this},b.skew=function(b,c){return b*=a.DEG_TO_RAD,c*=a.DEG_TO_RAD,this.append(Math.cos(c),Math.sin(c),-Math.sin(b),Math.cos(b),0,0),this},b.scale=function(a,b){return this.a*=a,this.d*=b,this.c*=a,this.b*=b,this.tx*=a,this.ty*=b,this},b.translate=function(a,b){return this.tx+=a,this.ty+=b,this},b.identity=function(){return this.alpha=this.a=this.d=1,this.b=this.c=this.tx=this.ty=0,this.shadow=this.compositeOperation=null,this},b.invert=function(){var a=this.a,b=this.b,c=this.c,d=this.d,e=this.tx,f=a*d-b*c;return this.a=d/f,this.b=-b/f,this.c=-c/f,this.d=a/f,this.tx=(c*this.ty-d*e)/f,this.ty=-(a*this.ty-b*e)/f,this},b.isIdentity=function(){return 0==this.tx&&0==this.ty&&1==this.a&&0==this.b&&0==this.c&&1==this.d},b.transformPoint=function(a,b,c){return c=c||{},c.x=a*this.a+b*this.c+this.tx,c.y=a*this.b+b*this.d+this.ty,c},b.decompose=function(b){null==b&&(b={}),b.x=this.tx,b.y=this.ty,b.scaleX=Math.sqrt(this.a*this.a+this.b*this.b),b.scaleY=Math.sqrt(this.c*this.c+this.d*this.d);var c=Math.atan2(-this.c,this.d),d=Math.atan2(this.b,this.a);return c==d?(b.rotation=d/a.DEG_TO_RAD,this.a<0&&this.d>=0&&(b.rotation+=b.rotation<=0?180:-180),b.skewX=b.skewY=0):(b.skewX=c/a.DEG_TO_RAD,b.skewY=d/a.DEG_TO_RAD),b},b.reinitialize=function(a,b,c,d,e,f,g,h,i){return this.initialize(a,b,c,d,e,f),this.alpha=null==g?1:g,this.shadow=h,this.compositeOperation=i,this},b.copy=function(a){return this.reinitialize(a.a,a.b,a.c,a.d,a.tx,a.ty,a.alpha,a.shadow,a.compositeOperation)},b.appendProperties=function(a,b,c){return this.alpha*=a,this.shadow=b||this.shadow,this.compositeOperation=c||this.compositeOperation,this},b.prependProperties=function(a,b,c){return this.alpha*=a,this.shadow=this.shadow||b,this.compositeOperation=this.compositeOperation||c,this},b.clone=function(){return(new a).copy(this)},b.toString=function(){return"[Matrix2D (a="+this.a+" b="+this.b+" c="+this.c+" d="+this.d+" tx="+this.tx+" ty="+this.ty+")]"},a.identity=new a,createjs.Matrix2D=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b){this.initialize(a,b)},b=a.prototype;b.x=0,b.y=0,b.initialize=function(a,b){return this.x=null==a?0:a,this.y=null==b?0:b,this},b.copy=function(a){return this.initialize(a.x,a.y)},b.clone=function(){return new a(this.x,this.y)},b.toString=function(){return"[Point (x="+this.x+" y="+this.y+")]"},createjs.Point=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype;b.x=0,b.y=0,b.width=0,b.height=0,b.initialize=function(a,b,c,d){return this.x=a||0,this.y=b||0,this.width=c||0,this.height=d||0,this},b.copy=function(a){return this.initialize(a.x,a.y,a.width,a.height)},b.clone=function(){return new a(this.x,this.y,this.width,this.height)},b.toString=function(){return"[Rectangle (x="+this.x+" y="+this.y+" width="+this.width+" height="+this.height+")]"},createjs.Rectangle=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c,d,e,f,g){this.initialize(a,b,c,d,e,f,g)},b=a.prototype;b.target=null,b.overLabel=null,b.outLabel=null,b.downLabel=null,b.play=!1,b._isPressed=!1,b._isOver=!1,b.initialize=function(a,b,c,d,e,f,g){a.addEventListener&&(this.target=a,a.cursor="pointer",this.overLabel=null==c?"over":c,this.outLabel=null==b?"out":b,this.downLabel=null==d?"down":d,this.play=e,this.setEnabled(!0),this.handleEvent({}),f&&(g&&(f.actionsEnabled=!1,f.gotoAndStop&&f.gotoAndStop(g)),a.hitArea=f))},b.setEnabled=function(a){var b=this.target;a?(b.addEventListener("rollover",this),b.addEventListener("rollout",this),b.addEventListener("mousedown",this),b.addEventListener("pressup",this)):(b.removeEventListener("rollover",this),b.removeEventListener("rollout",this),b.removeEventListener("mousedown",this),b.removeEventListener("pressup",this))},b.toString=function(){return"[ButtonHelper]"},b.handleEvent=function(a){var b,c=this.target,d=a.type;"mousedown"==d?(this._isPressed=!0,b=this.downLabel):"pressup"==d?(this._isPressed=!1,b=this._isOver?this.overLabel:this.outLabel):"rollover"==d?(this._isOver=!0,b=this._isPressed?this.downLabel:this.overLabel):(this._isOver=!1,b=this._isPressed?this.overLabel:this.outLabel),this.play?c.gotoAndPlay&&c.gotoAndPlay(b):c.gotoAndStop&&c.gotoAndStop(b)},createjs.ButtonHelper=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype;a.identity=null,b.color=null,b.offsetX=0,b.offsetY=0,b.blur=0,b.initialize=function(a,b,c,d){this.color=a,this.offsetX=b,this.offsetY=c,this.blur=d},b.toString=function(){return"[Shadow]"},b.clone=function(){return new a(this.color,this.offsetX,this.offsetY,this.blur)},a.identity=new a("transparent",0,0,0),createjs.Shadow=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.EventDispatcher;b.complete=!0,b.framerate=0,b._animations=null,b._frames=null,b._images=null,b._data=null,b._loadCount=0,b._frameHeight=0,b._frameWidth=0,b._numFrames=0,b._regX=0,b._regY=0,b.initialize=function(a){var b,c,d,e;if(null!=a){if(this.framerate=a.framerate||0,a.images&&(c=a.images.length)>0)for(e=this._images=[],b=0;c>b;b++){var f=a.images[b];if("string"==typeof f){var g=f;f=document.createElement("img"),f.src=g}e.push(f),f.getContext||f.complete||(this._loadCount++,this.complete=!1,function(a){f.onload=function(){a._handleImageLoad()}}(this))}if(null==a.frames);else if(a.frames instanceof Array)for(this._frames=[],e=a.frames,b=0,c=e.length;c>b;b++){var h=e[b];this._frames.push({image:this._images[h[4]?h[4]:0],rect:new createjs.Rectangle(h[0],h[1],h[2],h[3]),regX:h[5]||0,regY:h[6]||0})}else d=a.frames,this._frameWidth=d.width,this._frameHeight=d.height,this._regX=d.regX||0,this._regY=d.regY||0,this._numFrames=d.count,0==this._loadCount&&this._calculateFrames();if(this._animations=[],null!=(d=a.animations)){this._data={};var i;for(i in d){var j={name:i},k=d[i];if("number"==typeof k)e=j.frames=[k];else if(k instanceof Array)if(1==k.length)j.frames=[k[0]];else for(j.speed=k[3],j.next=k[2],e=j.frames=[],b=k[0];b<=k[1];b++)e.push(b);else{j.speed=k.speed,j.next=k.next;var l=k.frames;e=j.frames="number"==typeof l?[l]:l.slice(0)}(j.next===!0||void 0===j.next)&&(j.next=i),(j.next===!1||e.length<2&&j.next==i)&&(j.next=null),j.speed||(j.speed=1),this._animations.push(i),this._data[i]=j}}}},b.getNumFrames=function(a){if(null==a)return this._frames?this._frames.length:this._numFrames;var b=this._data[a];return null==b?0:b.frames.length},b.getAnimations=function(){return this._animations.slice(0)},b.getAnimation=function(a){return this._data[a]},b.getFrame=function(a){var b;return this._frames&&(b=this._frames[a])?b:null},b.getFrameBounds=function(a,b){var c=this.getFrame(a);return c?(b||new createjs.Rectangle).initialize(-c.regX,-c.regY,c.rect.width,c.rect.height):null},b.toString=function(){return"[SpriteSheet]"},b.clone=function(){var b=new a;return b.complete=this.complete,b._animations=this._animations,b._frames=this._frames,b._images=this._images,b._data=this._data,b._frameHeight=this._frameHeight,b._frameWidth=this._frameWidth,b._numFrames=this._numFrames,b._loadCount=this._loadCount,b},b._handleImageLoad=function(){0==--this._loadCount&&(this._calculateFrames(),this.complete=!0,this.dispatchEvent("complete"))},b._calculateFrames=function(){if(!this._frames&&0!=this._frameWidth){this._frames=[];for(var a=0,b=this._frameWidth,c=this._frameHeight,d=0,e=this._images;d<e.length;d++){for(var f=e[d],g=0|f.width/b,h=0|f.height/c,i=this._numFrames>0?Math.min(this._numFrames-a,g*h):g*h,j=0;i>j;j++)this._frames.push({image:f,rect:new createjs.Rectangle(j%g*b,(0|j/g)*c,b,c),regX:this._regX,regY:this._regY});a+=i}this._numFrames=a}},createjs.SpriteSheet=a}(),this.createjs=this.createjs||{},function(){function a(a,b,c){this.f=a,this.params=b,this.path=null==c?!0:c}a.prototype.exec=function(a){this.f.apply(a,this.params)};var b=function(){this.initialize()},c=b.prototype;b.getRGB=function(a,b,c,d){return null!=a&&null==c&&(d=b,c=255&a,b=255&a>>8,a=255&a>>16),null==d?"rgb("+a+","+b+","+c+")":"rgba("+a+","+b+","+c+","+d+")"},b.getHSL=function(a,b,c,d){return null==d?"hsl("+a%360+","+b+"%,"+c+"%)":"hsla("+a%360+","+b+"%,"+c+"%,"+d+")"},b.Command=a,b.BASE_64={A:0,B:1,C:2,D:3,E:4,F:5,G:6,H:7,I:8,J:9,K:10,L:11,M:12,N:13,O:14,P:15,Q:16,R:17,S:18,T:19,U:20,V:21,W:22,X:23,Y:24,Z:25,a:26,b:27,c:28,d:29,e:30,f:31,g:32,h:33,i:34,j:35,k:36,l:37,m:38,n:39,o:40,p:41,q:42,r:43,s:44,t:45,u:46,v:47,w:48,x:49,y:50,z:51,0:52,1:53,2:54,3:55,4:56,5:57,6:58,7:59,8:60,9:61,"+":62,"/":63},b.STROKE_CAPS_MAP=["butt","round","square"],b.STROKE_JOINTS_MAP=["miter","round","bevel"];var d=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");if(d.getContext){var e=b._ctx=d.getContext("2d");b.beginCmd=new a(e.beginPath,[],!1),b.fillCmd=new a(e.fill,[],!1),b.strokeCmd=new a(e.stroke,[],!1),d.width=d.height=1}c._strokeInstructions=null,c._strokeStyleInstructions=null,c._strokeIgnoreScale=!1,c._fillInstructions=null,c._fillMatrix=null,c._instructions=null,c._oldInstructions=null,c._activeInstructions=null,c._active=!1,c._dirty=!1,c.initialize=function(){this.clear(),this._ctx=b._ctx},c.isEmpty=function(){return!(this._instructions.length||this._oldInstructions.length||this._activeInstructions.length)},c.draw=function(a){this._dirty&&this._updateInstructions();for(var b=this._instructions,c=0,d=b.length;d>c;c++)b[c].exec(a)},c.drawAsPath=function(a){this._dirty&&this._updateInstructions();for(var b,c=this._instructions,d=0,e=c.length;e>d;d++)((b=c[d]).path||0==d)&&b.exec(a)},c.moveTo=function(b,c){return this._activeInstructions.push(new a(this._ctx.moveTo,[b,c])),this},c.lineTo=function(b,c){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.lineTo,[b,c])),this},c.arcTo=function(b,c,d,e,f){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.arcTo,[b,c,d,e,f])),this},c.arc=function(b,c,d,e,f,g){return this._dirty=this._active=!0,null==g&&(g=!1),this._activeInstructions.push(new a(this._ctx.arc,[b,c,d,e,f,g])),this},c.quadraticCurveTo=function(b,c,d,e){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.quadraticCurveTo,[b,c,d,e])),this},c.bezierCurveTo=function(b,c,d,e,f,g){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.bezierCurveTo,[b,c,d,e,f,g])),this},c.rect=function(b,c,d,e){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.rect,[b,c,d,e])),this},c.closePath=function(){return this._active&&(this._dirty=!0,this._activeInstructions.push(new a(this._ctx.closePath,[]))),this},c.clear=function(){return this._instructions=[],this._oldInstructions=[],this._activeInstructions=[],this._strokeStyleInstructions=this._strokeInstructions=this._fillInstructions=this._fillMatrix=null,this._active=this._dirty=this._strokeIgnoreScale=!1,this},c.beginFill=function(b){return this._active&&this._newPath(),this._fillInstructions=b?[new a(this._setProp,["fillStyle",b],!1)]:null,this._fillMatrix=null,this},c.beginLinearGradientFill=function(b,c,d,e,f,g){this._active&&this._newPath();for(var h=this._ctx.createLinearGradient(d,e,f,g),i=0,j=b.length;j>i;i++)h.addColorStop(c[i],b[i]);return this._fillInstructions=[new a(this._setProp,["fillStyle",h],!1)],this._fillMatrix=null,this},c.beginRadialGradientFill=function(b,c,d,e,f,g,h,i){this._active&&this._newPath();for(var j=this._ctx.createRadialGradient(d,e,f,g,h,i),k=0,l=b.length;l>k;k++)j.addColorStop(c[k],b[k]);return this._fillInstructions=[new a(this._setProp,["fillStyle",j],!1)],this._fillMatrix=null,this},c.beginBitmapFill=function(b,c,d){this._active&&this._newPath(),c=c||"";var e=this._ctx.createPattern(b,c);return this._fillInstructions=[new a(this._setProp,["fillStyle",e],!1)],this._fillMatrix=d?[d.a,d.b,d.c,d.d,d.tx,d.ty]:null,this},c.endFill=function(){return this.beginFill()},c.setStrokeStyle=function(c,d,e,f,g){return this._active&&this._newPath(),this._strokeStyleInstructions=[new a(this._setProp,["lineWidth",null==c?"1":c],!1),new a(this._setProp,["lineCap",null==d?"butt":isNaN(d)?d:b.STROKE_CAPS_MAP[d]],!1),new a(this._setProp,["lineJoin",null==e?"miter":isNaN(e)?e:b.STROKE_JOINTS_MAP[e]],!1),new a(this._setProp,["miterLimit",null==f?"10":f],!1)],this._strokeIgnoreScale=g,this},c.beginStroke=function(b){return this._active&&this._newPath(),this._strokeInstructions=b?[new a(this._setProp,["strokeStyle",b],!1)]:null,this},c.beginLinearGradientStroke=function(b,c,d,e,f,g){this._active&&this._newPath();for(var h=this._ctx.createLinearGradient(d,e,f,g),i=0,j=b.length;j>i;i++)h.addColorStop(c[i],b[i]);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",h],!1)],this},c.beginRadialGradientStroke=function(b,c,d,e,f,g,h,i){this._active&&this._newPath();for(var j=this._ctx.createRadialGradient(d,e,f,g,h,i),k=0,l=b.length;l>k;k++)j.addColorStop(c[k],b[k]);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",j],!1)],this},c.beginBitmapStroke=function(b,c){this._active&&this._newPath(),c=c||"";var d=this._ctx.createPattern(b,c);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",d],!1)],this},c.endStroke=function(){return this.beginStroke(),this},c.curveTo=c.quadraticCurveTo,c.drawRect=c.rect,c.drawRoundRect=function(a,b,c,d,e){return this.drawRoundRectComplex(a,b,c,d,e,e,e,e),this},c.drawRoundRectComplex=function(b,c,d,e,f,g,h,i){var j=(e>d?d:e)/2,k=0,l=0,m=0,n=0;0>f&&(f*=k=-1),f>j&&(f=j),0>g&&(g*=l=-1),g>j&&(g=j),0>h&&(h*=m=-1),h>j&&(h=j),0>i&&(i*=n=-1),i>j&&(i=j),this._dirty=this._active=!0;var o=this._ctx.arcTo,p=this._ctx.lineTo;return this._activeInstructions.push(new a(this._ctx.moveTo,[b+d-g,c]),new a(o,[b+d+g*l,c-g*l,b+d,c+g,g]),new a(p,[b+d,c+e-h]),new a(o,[b+d+h*m,c+e+h*m,b+d-h,c+e,h]),new a(p,[b+i,c+e]),new a(o,[b-i*n,c+e+i*n,b,c+e-i,i]),new a(p,[b,c+f]),new a(o,[b-f*k,c-f*k,b+f,c,f]),new a(this._ctx.closePath)),this},c.drawCircle=function(a,b,c){return this.arc(a,b,c,0,2*Math.PI),this},c.drawEllipse=function(b,c,d,e){this._dirty=this._active=!0;var f=.5522848,g=d/2*f,h=e/2*f,i=b+d,j=c+e,k=b+d/2,l=c+e/2;return this._activeInstructions.push(new a(this._ctx.moveTo,[b,l]),new a(this._ctx.bezierCurveTo,[b,l-h,k-g,c,k,c]),new a(this._ctx.bezierCurveTo,[k+g,c,i,l-h,i,l]),new a(this._ctx.bezierCurveTo,[i,l+h,k+g,j,k,j]),new a(this._ctx.bezierCurveTo,[k-g,j,b,l+h,b,l])),this},c.inject=function(b,c){return this._dirty=this._active=!0,this._activeInstructions.push(new a(b,[c])),this},c.drawPolyStar=function(b,c,d,e,f,g){this._dirty=this._active=!0,null==f&&(f=0),f=1-f,null==g?g=0:g/=180/Math.PI;var h=Math.PI/e;this._activeInstructions.push(new a(this._ctx.moveTo,[b+Math.cos(g)*d,c+Math.sin(g)*d]));for(var i=0;e>i;i++)g+=h,1!=f&&this._activeInstructions.push(new a(this._ctx.lineTo,[b+Math.cos(g)*d*f,c+Math.sin(g)*d*f])),g+=h,this._activeInstructions.push(new a(this._ctx.lineTo,[b+Math.cos(g)*d,c+Math.sin(g)*d]));return this},c.decodePath=function(a){for(var c=[this.moveTo,this.lineTo,this.quadraticCurveTo,this.bezierCurveTo,this.closePath],d=[2,2,4,6,0],e=0,f=a.length,g=[],h=0,i=0,j=b.BASE_64;f>e;){var k=a.charAt(e),l=j[k],m=l>>3,n=c[m];if(!n||3&l)throw"bad path data (@"+e+"): "+k;var o=d[m];m||(h=i=0),g.length=0,e++;for(var p=(1&l>>2)+2,q=0;o>q;q++){var r=j[a.charAt(e)],s=r>>5?-1:1;r=(31&r)<<6|j[a.charAt(e+1)],3==p&&(r=r<<6|j[a.charAt(e+2)]),r=s*r/10,q%2?h=r+=h:i=r+=i,g[q]=r,e+=p}n.apply(this,g)}return this},c.clone=function(){var a=new b;return a._instructions=this._instructions.slice(),a._activeInstructions=this._activeInstructions.slice(),a._oldInstructions=this._oldInstructions.slice(),this._fillInstructions&&(a._fillInstructions=this._fillInstructions.slice()),this._strokeInstructions&&(a._strokeInstructions=this._strokeInstructions.slice()),this._strokeStyleInstructions&&(a._strokeStyleInstructions=this._strokeStyleInstructions.slice()),a._active=this._active,a._dirty=this._dirty,a._fillMatrix=this._fillMatrix,a._strokeIgnoreScale=this._strokeIgnoreScale,a},c.toString=function(){return"[Graphics]"},c.mt=c.moveTo,c.lt=c.lineTo,c.at=c.arcTo,c.bt=c.bezierCurveTo,c.qt=c.quadraticCurveTo,c.a=c.arc,c.r=c.rect,c.cp=c.closePath,c.c=c.clear,c.f=c.beginFill,c.lf=c.beginLinearGradientFill,c.rf=c.beginRadialGradientFill,c.bf=c.beginBitmapFill,c.ef=c.endFill,c.ss=c.setStrokeStyle,c.s=c.beginStroke,c.ls=c.beginLinearGradientStroke,c.rs=c.beginRadialGradientStroke,c.bs=c.beginBitmapStroke,c.es=c.endStroke,c.dr=c.drawRect,c.rr=c.drawRoundRect,c.rc=c.drawRoundRectComplex,c.dc=c.drawCircle,c.de=c.drawEllipse,c.dp=c.drawPolyStar,c.p=c.decodePath,c._updateInstructions=function(){this._instructions=this._oldInstructions.slice(),this._instructions.push(b.beginCmd),this._appendInstructions(this._fillInstructions),this._appendInstructions(this._strokeInstructions),this._appendInstructions(this._strokeInstructions&&this._strokeStyleInstructions),this._appendInstructions(this._activeInstructions),this._fillInstructions&&this._appendDraw(b.fillCmd,this._fillMatrix),this._strokeInstructions&&this._appendDraw(b.strokeCmd,this._strokeIgnoreScale&&[1,0,0,1,0,0])},c._appendInstructions=function(a){a&&this._instructions.push.apply(this._instructions,a)},c._appendDraw=function(b,c){c?this._instructions.push(new a(this._ctx.save,[],!1),new a(this._ctx.transform,c,!1),b,new a(this._ctx.restore,[],!1)):this._instructions.push(b)},c._newPath=function(){this._dirty&&this._updateInstructions(),this._oldInstructions=this._instructions,this._activeInstructions=[],this._active=this._dirty=!1},c._setProp=function(a,b){this[a]=b},createjs.Graphics=b}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype=new createjs.EventDispatcher;a.suppressCrossDomainErrors=!1;var c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");c.getContext&&(a._hitTestCanvas=c,a._hitTestContext=c.getContext("2d"),c.width=c.height=1),a._nextCacheID=1,b.alpha=1,b.cacheCanvas=null,b.id=-1,b.mouseEnabled=!0,b.tickEnabled=!0,b.name=null,b.parent=null,b.regX=0,b.regY=0,b.rotation=0,b.scaleX=1,b.scaleY=1,b.skewX=0,b.skewY=0,b.shadow=null,b.visible=!0,b.x=0,b.y=0,b.compositeOperation=null,b.snapToPixel=!1,b.filters=null,b.cacheID=0,b.mask=null,b.hitArea=null,b.cursor=null,b._cacheOffsetX=0,b._cacheOffsetY=0,b._cacheScale=1,b._cacheDataURLID=0,b._cacheDataURL=null,b._matrix=null,b._rectangle=null,b._bounds=null,b.initialize=function(){this.id=createjs.UID.get(),this._matrix=new createjs.Matrix2D,this._rectangle=new createjs.Rectangle},b.isVisible=function(){return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY)},b.draw=function(a,b){var c=this.cacheCanvas;if(b||!c)return!1;var d,e=this._cacheScale,f=this._cacheOffsetX,g=this._cacheOffsetY;return(d=this._applyFilterBounds(f,g,0,0))&&(f=d.x,g=d.y),a.drawImage(c,f,g,c.width/e,c.height/e),!0},b.updateContext=function(a){var b,c=this.mask,d=this;c&&c.graphics&&!c.graphics.isEmpty()&&(b=c.getMatrix(c._matrix),a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty),c.graphics.drawAsPath(a),a.clip(),b.invert(),a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty)),b=d._matrix.identity().appendTransform(d.x,d.y,d.scaleX,d.scaleY,d.rotation,d.skewX,d.skewY,d.regX,d.regY),createjs.Stage._snapToPixelEnabled&&d.snapToPixel?a.transform(b.a,b.b,b.c,b.d,0|b.tx+.5,0|b.ty+.5):a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty),a.globalAlpha*=d.alpha,d.compositeOperation&&(a.globalCompositeOperation=d.compositeOperation),d.shadow&&this._applyShadow(a,d.shadow)},b.cache=function(a,b,c,d,e){e=e||1,this.cacheCanvas||(this.cacheCanvas=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")),this._cacheWidth=c,this._cacheHeight=d,this._cacheOffsetX=a,this._cacheOffsetY=b,this._cacheScale=e,this.updateCache()},b.updateCache=function(b){var c,d=this.cacheCanvas,e=this._cacheScale,f=this._cacheOffsetX*e,g=this._cacheOffsetY*e,h=this._cacheWidth,i=this._cacheHeight;if(!d)throw"cache() must be called before updateCache()";var j=d.getContext("2d");(c=this._applyFilterBounds(f,g,h,i))&&(f=c.x,g=c.y,h=c.width,i=c.height),h=Math.ceil(h*e),i=Math.ceil(i*e),h!=d.width||i!=d.height?(d.width=h,d.height=i):b||j.clearRect(0,0,h+1,i+1),j.save(),j.globalCompositeOperation=b,j.setTransform(e,0,0,e,-f,-g),this.draw(j,!0),this._applyFilters(),j.restore(),this.cacheID=a._nextCacheID++},b.uncache=function(){this._cacheDataURL=this.cacheCanvas=null,this.cacheID=this._cacheOffsetX=this._cacheOffsetY=0,this._cacheScale=1},b.getCacheDataURL=function(){return this.cacheCanvas?(this.cacheID!=this._cacheDataURLID&&(this._cacheDataURL=this.cacheCanvas.toDataURL()),this._cacheDataURL):null},b.getStage=function(){for(var a=this;a.parent;)a=a.parent;return a instanceof createjs.Stage?a:null},b.localToGlobal=function(a,b){var c=this.getConcatenatedMatrix(this._matrix);return null==c?null:(c.append(1,0,0,1,a,b),new createjs.Point(c.tx,c.ty))},b.globalToLocal=function(a,b){var c=this.getConcatenatedMatrix(this._matrix);return null==c?null:(c.invert(),c.append(1,0,0,1,a,b),new createjs.Point(c.tx,c.ty))},b.localToLocal=function(a,b,c){var d=this.localToGlobal(a,b);return c.globalToLocal(d.x,d.y)},b.setTransform=function(a,b,c,d,e,f,g,h,i){return this.x=a||0,this.y=b||0,this.scaleX=null==c?1:c,this.scaleY=null==d?1:d,this.rotation=e||0,this.skewX=f||0,this.skewY=g||0,this.regX=h||0,this.regY=i||0,this},b.getMatrix=function(a){var b=this;return(a?a.identity():new createjs.Matrix2D).appendTransform(b.x,b.y,b.scaleX,b.scaleY,b.rotation,b.skewX,b.skewY,b.regX,b.regY).appendProperties(b.alpha,b.shadow,b.compositeOperation)},b.getConcatenatedMatrix=function(a){a?a.identity():a=new createjs.Matrix2D;for(var b=this;null!=b;)a.prependTransform(b.x,b.y,b.scaleX,b.scaleY,b.rotation,b.skewX,b.skewY,b.regX,b.regY).prependProperties(b.alpha,b.shadow,b.compositeOperation),b=b.parent;return a},b.hitTest=function(b,c){var d=a._hitTestContext;d.setTransform(1,0,0,1,-b,-c),this.draw(d);var e=this._testHit(d);return d.setTransform(1,0,0,1,0,0),d.clearRect(0,0,2,2),e},b.set=function(a){for(var b in a)this[b]=a[b];return this},b.getBounds=function(){if(this._bounds)return this._rectangle.copy(this._bounds);
var a=this.cacheCanvas;if(a){var b=this._cacheScale;return this._rectangle.initialize(this._cacheOffsetX,this._cacheOffsetY,a.width/b,a.height/b)}return null},b.getTransformedBounds=function(){return this._getBounds()},b.setBounds=function(a,b,c,d){null==a&&(this._bounds=a),this._bounds=(this._bounds||new createjs.Rectangle).initialize(a,b,c,d)},b.clone=function(){var b=new a;return this.cloneProps(b),b},b.toString=function(){return"[DisplayObject (name="+this.name+")]"},b.cloneProps=function(a){a.alpha=this.alpha,a.name=this.name,a.regX=this.regX,a.regY=this.regY,a.rotation=this.rotation,a.scaleX=this.scaleX,a.scaleY=this.scaleY,a.shadow=this.shadow,a.skewX=this.skewX,a.skewY=this.skewY,a.visible=this.visible,a.x=this.x,a.y=this.y,a._bounds=this._bounds,a.mouseEnabled=this.mouseEnabled,a.compositeOperation=this.compositeOperation},b._applyShadow=function(a,b){b=b||Shadow.identity,a.shadowColor=b.color,a.shadowOffsetX=b.offsetX,a.shadowOffsetY=b.offsetY,a.shadowBlur=b.blur},b._tick=function(a){var b=this._listeners;if(b&&b.tick){var c=new createjs.Event("tick");c.params=a,this._dispatchEvent(c,this,2)}},b._testHit=function(b){try{var c=b.getImageData(0,0,1,1).data[3]>1}catch(d){if(!a.suppressCrossDomainErrors)throw"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images."}return c},b._applyFilters=function(){if(this.filters&&0!=this.filters.length&&this.cacheCanvas)for(var a=this.filters.length,b=this.cacheCanvas.getContext("2d"),c=this.cacheCanvas.width,d=this.cacheCanvas.height,e=0;a>e;e++)this.filters[e].applyFilter(b,0,0,c,d)},b._applyFilterBounds=function(a,b,c,d){var e,f,g=this.filters;if(!g||!(f=g.length))return null;for(var h=0;f>h;h++){var i=this.filters[h],j=i.getBounds&&i.getBounds();j&&(e||(e=this._rectangle.initialize(a,b,c,d)),e.x+=j.x,e.y+=j.y,e.width+=j.width,e.height+=j.height)}return e},b._getBounds=function(a,b){return this._transformBounds(this.getBounds(),a,b)},b._transformBounds=function(a,b,c){if(!a)return a;var d=a.x,e=a.y,f=a.width,g=a.height,h=c?this._matrix.identity():this.getMatrix(this._matrix);(d||e)&&h.appendTransform(0,0,1,1,0,0,0,-d,-e),b&&h.prependMatrix(b);var i=f*h.a,j=f*h.b,k=g*h.c,l=g*h.d,m=h.tx,n=h.ty,o=m,p=m,q=n,r=n;return(d=i+m)<o?o=d:d>p&&(p=d),(d=i+k+m)<o?o=d:d>p&&(p=d),(d=k+m)<o?o=d:d>p&&(p=d),(e=j+n)<q?q=e:e>r&&(r=e),(e=j+l+n)<q?q=e:e>r&&(r=e),(e=l+n)<q?q=e:e>r&&(r=e),a.initialize(o,q,p-o,r-q)},createjs.DisplayObject=a}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype=new createjs.DisplayObject;b.children=null,b.mouseChildren=!0,b.tickChildren=!0,b.DisplayObject_initialize=b.initialize,b.initialize=function(){this.DisplayObject_initialize(),this.children=[]},b.isVisible=function(){var a=this.cacheCanvas||this.children.length;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;for(var c=this.children.slice(0),d=0,e=c.length;e>d;d++){var f=c[d];f.isVisible()&&(a.save(),f.updateContext(a),f.draw(a),a.restore())}return!0},b.addChild=function(a){if(null==a)return a;var b=arguments.length;if(b>1){for(var c=0;b>c;c++)this.addChild(arguments[c]);return arguments[b-1]}return a.parent&&a.parent.removeChild(a),a.parent=this,this.children.push(a),a},b.addChildAt=function(a,b){var c=arguments.length,d=arguments[c-1];if(0>d||d>this.children.length)return arguments[c-2];if(c>2){for(var e=0;c-1>e;e++)this.addChildAt(arguments[e],d+e);return arguments[c-2]}return a.parent&&a.parent.removeChild(a),a.parent=this,this.children.splice(b,0,a),a},b.removeChild=function(a){var b=arguments.length;if(b>1){for(var c=!0,d=0;b>d;d++)c=c&&this.removeChild(arguments[d]);return c}return this.removeChildAt(createjs.indexOf(this.children,a))},b.removeChildAt=function(a){var b=arguments.length;if(b>1){for(var c=[],d=0;b>d;d++)c[d]=arguments[d];c.sort(function(a,b){return b-a});for(var e=!0,d=0;b>d;d++)e=e&&this.removeChildAt(c[d]);return e}if(0>a||a>this.children.length-1)return!1;var f=this.children[a];return f&&(f.parent=null),this.children.splice(a,1),!0},b.removeAllChildren=function(){for(var a=this.children;a.length;)a.pop().parent=null},b.getChildAt=function(a){return this.children[a]},b.getChildByName=function(a){for(var b=this.children,c=0,d=b.length;d>c;c++)if(b[c].name==a)return b[c];return null},b.sortChildren=function(a){this.children.sort(a)},b.getChildIndex=function(a){return createjs.indexOf(this.children,a)},b.getNumChildren=function(){return this.children.length},b.swapChildrenAt=function(a,b){var c=this.children,d=c[a],e=c[b];d&&e&&(c[a]=e,c[b]=d)},b.swapChildren=function(a,b){for(var c,d,e=this.children,f=0,g=e.length;g>f&&(e[f]==a&&(c=f),e[f]==b&&(d=f),null==c||null==d);f++);f!=g&&(e[c]=b,e[d]=a)},b.setChildIndex=function(a,b){var c=this.children,d=c.length;if(!(a.parent!=this||0>b||b>=d)){for(var e=0;d>e&&c[e]!=a;e++);e!=d&&e!=b&&(c.splice(e,1),c.splice(b,0,a))}},b.contains=function(a){for(;a;){if(a==this)return!0;a=a.parent}return!1},b.hitTest=function(a,b){return null!=this.getObjectUnderPoint(a,b)},b.getObjectsUnderPoint=function(a,b){var c=[],d=this.localToGlobal(a,b);return this._getObjectsUnderPoint(d.x,d.y,c),c},b.getObjectUnderPoint=function(a,b){var c=this.localToGlobal(a,b);return this._getObjectsUnderPoint(c.x,c.y)},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){return this._getBounds(null,!0)},b.getTransformedBounds=function(){return this._getBounds()},b.clone=function(b){var c=new a;if(this.cloneProps(c),b)for(var d=c.children=[],e=0,f=this.children.length;f>e;e++){var g=this.children[e].clone(b);g.parent=c,d.push(g)}return c},b.toString=function(){return"[Container (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){if(this.tickChildren)for(var b=this.children.length-1;b>=0;b--){var c=this.children[b];c.tickEnabled&&c._tick&&c._tick(a)}this.DisplayObject__tick(a)},b._getObjectsUnderPoint=function(b,c,d,e){for(var f=createjs.DisplayObject._hitTestContext,g=this._matrix,h=this.children.length,i=h-1;i>=0;i--){var j=this.children[i],k=e&&j.hitArea;if(j.visible&&(k||j.isVisible())&&(!e||j.mouseEnabled))if(!k&&j instanceof a){var l=j._getObjectsUnderPoint(b,c,d,e);if(!d&&l)return e&&!this.mouseChildren?this:l}else{if(j.getConcatenatedMatrix(g),k&&(g.appendTransform(k.x,k.y,k.scaleX,k.scaleY,k.rotation,k.skewX,k.skewY,k.regX,k.regY),g.alpha=k.alpha),f.globalAlpha=g.alpha,f.setTransform(g.a,g.b,g.c,g.d,g.tx-b,g.ty-c),(k||j).draw(f),!this._testHit(f))continue;if(f.setTransform(1,0,0,1,0,0),f.clearRect(0,0,2,2),!d)return e&&!this.mouseChildren?this:j;d.push(j)}}return null},b._getBounds=function(a,b){var c=this.DisplayObject_getBounds();if(c)return this._transformBounds(c,a,b);var d,e,f,g,h=b?this._matrix.identity():this.getMatrix(this._matrix);a&&h.prependMatrix(a);for(var i=this.children.length,j=0;i>j;j++){var k=this.children[j];if(k.visible&&(c=k._getBounds(h))){var l=c.x,m=c.y,n=l+c.width,o=m+c.height;(d>l||null==d)&&(d=l),(n>e||null==e)&&(e=n),(f>m||null==f)&&(f=m),(o>g||null==g)&&(g=o)}}return null==e?null:this._rectangle.initialize(d,f,e-d,g-f)},createjs.Container=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Container;a._snapToPixelEnabled=!1,b.autoClear=!0,b.canvas=null,b.mouseX=0,b.mouseY=0,b.snapToPixelEnabled=!1,b.mouseInBounds=!1,b.tickOnUpdate=!0,b.mouseMoveOutside=!1,b.nextStage=null,b._pointerData=null,b._pointerCount=0,b._primaryPointerID=null,b._mouseOverIntervalID=null,b.Container_initialize=b.initialize,b.initialize=function(a){this.Container_initialize(),this.canvas="string"==typeof a?document.getElementById(a):a,this._pointerData={},this.enableDOMEvents(!0)},b.update=function(){if(this.canvas){this.tickOnUpdate&&(this.dispatchEvent("tickstart"),this.tickEnabled&&this._tick(arguments.length?arguments:null),this.dispatchEvent("tickend")),this.dispatchEvent("drawstart"),a._snapToPixelEnabled=this.snapToPixelEnabled,this.autoClear&&this.clear();var b=this.canvas.getContext("2d");b.save(),this.updateContext(b),this.draw(b,!1),b.restore(),this.dispatchEvent("drawend")}},b.handleEvent=function(a){"tick"==a.type&&this.update(a)},b.clear=function(){if(this.canvas){var a=this.canvas.getContext("2d");a.setTransform(1,0,0,1,0,0),a.clearRect(0,0,this.canvas.width+1,this.canvas.height+1)}},b.toDataURL=function(a,b){b||(b="image/png");var c,d=this.canvas.getContext("2d"),e=this.canvas.width,f=this.canvas.height;if(a){c=d.getImageData(0,0,e,f);var g=d.globalCompositeOperation;d.globalCompositeOperation="destination-over",d.fillStyle=a,d.fillRect(0,0,e,f)}var h=this.canvas.toDataURL(b);return a&&(d.clearRect(0,0,e+1,f+1),d.putImageData(c,0,0),d.globalCompositeOperation=g),h},b.enableMouseOver=function(a){if(this._mouseOverIntervalID&&(clearInterval(this._mouseOverIntervalID),this._mouseOverIntervalID=null,0==a&&this._testMouseOver(!0)),null==a)a=20;else if(0>=a)return;var b=this;this._mouseOverIntervalID=setInterval(function(){b._testMouseOver()},1e3/Math.min(50,a))},b.enableDOMEvents=function(a){null==a&&(a=!0);var b,c,d=this._eventListeners;if(!a&&d){for(b in d)c=d[b],c.t.removeEventListener(b,c.f,!1);this._eventListeners=null}else if(a&&!d&&this.canvas){var e=window.addEventListener?window:document,f=this;d=this._eventListeners={},d.mouseup={t:e,f:function(a){f._handleMouseUp(a)}},d.mousemove={t:e,f:function(a){f._handleMouseMove(a)}},d.dblclick={t:this.canvas,f:function(a){f._handleDoubleClick(a)}},d.mousedown={t:this.canvas,f:function(a){f._handleMouseDown(a)}};for(b in d)c=d[b],c.t.addEventListener(b,c.f,!1)}},b.clone=function(){var b=new a(null);return this.cloneProps(b),b},b.toString=function(){return"[Stage (name="+this.name+")]"},b._getElementRect=function(a){var b;try{b=a.getBoundingClientRect()}catch(c){b={top:a.offsetTop,left:a.offsetLeft,width:a.offsetWidth,height:a.offsetHeight}}var d=(window.pageXOffset||document.scrollLeft||0)-(document.clientLeft||document.body.clientLeft||0),e=(window.pageYOffset||document.scrollTop||0)-(document.clientTop||document.body.clientTop||0),f=window.getComputedStyle?getComputedStyle(a):a.currentStyle,g=parseInt(f.paddingLeft)+parseInt(f.borderLeftWidth),h=parseInt(f.paddingTop)+parseInt(f.borderTopWidth),i=parseInt(f.paddingRight)+parseInt(f.borderRightWidth),j=parseInt(f.paddingBottom)+parseInt(f.borderBottomWidth);return{left:b.left+d+g,right:b.right+d-i,top:b.top+e+h,bottom:b.bottom+e-j}},b._getPointerData=function(a){var b=this._pointerData[a];return b||(b=this._pointerData[a]={x:0,y:0},null==this._primaryPointerID&&(this._primaryPointerID=a),(null==this._primaryPointerID||-1==this._primaryPointerID)&&(this._primaryPointerID=a)),b},b._handleMouseMove=function(a){a||(a=window.event),this._handlePointerMove(-1,a,a.pageX,a.pageY)},b._handlePointerMove=function(a,b,c,d){if(this.canvas){var e=this._getPointerData(a),f=e.inBounds;if(this._updatePointerPosition(a,b,c,d),f||e.inBounds||this.mouseMoveOutside){-1==a&&e.inBounds==!f&&this._dispatchMouseEvent(this,f?"mouseleave":"mouseenter",!1,a,e,b),this._dispatchMouseEvent(this,"stagemousemove",!1,a,e,b),this._dispatchMouseEvent(e.target,"pressmove",!0,a,e,b);var g=e.event;g&&g.hasEventListener("mousemove")&&g.dispatchEvent(new createjs.MouseEvent("mousemove",!1,!1,e.x,e.y,b,a,a==this._primaryPointerID,e.rawX,e.rawY),e.target),this.nextStage&&this.nextStage._handlePointerMove(a,b,c,d)}}},b._updatePointerPosition=function(a,b,c,d){var e=this._getElementRect(this.canvas);c-=e.left,d-=e.top;var f=this.canvas.width,g=this.canvas.height;c/=(e.right-e.left)/f,d/=(e.bottom-e.top)/g;var h=this._getPointerData(a);(h.inBounds=c>=0&&d>=0&&f-1>=c&&g-1>=d)?(h.x=c,h.y=d):this.mouseMoveOutside&&(h.x=0>c?0:c>f-1?f-1:c,h.y=0>d?0:d>g-1?g-1:d),h.posEvtObj=b,h.rawX=c,h.rawY=d,a==this._primaryPointerID&&(this.mouseX=h.x,this.mouseY=h.y,this.mouseInBounds=h.inBounds)},b._handleMouseUp=function(a){this._handlePointerUp(-1,a,!1)},b._handlePointerUp=function(a,b,c){var d=this._getPointerData(a);this._dispatchMouseEvent(this,"stagemouseup",!1,a,d,b);var e=d.target;e&&(this._getObjectsUnderPoint(d.x,d.y,null,!0)==e&&this._dispatchMouseEvent(e,"click",!0,a,d,b),this._dispatchMouseEvent(e,"pressup",!0,a,d,b));var f=d.event;f&&f.hasEventListener("mouseup")&&f.dispatchEvent(new createjs.MouseEvent("mouseup",!1,!1,d.x,d.y,b,a,a==this._primaryPointerID,d.rawX,d.rawY),e),c?(a==this._primaryPointerID&&(this._primaryPointerID=null),delete this._pointerData[a]):d.event=d.target=null,this.nextStage&&this.nextStage._handlePointerUp(a,b,c)},b._handleMouseDown=function(a){this._handlePointerDown(-1,a,a.pageX,a.pageY)},b._handlePointerDown=function(a,b,c,d){null!=d&&this._updatePointerPosition(a,b,c,d);var e=this._getPointerData(a);this._dispatchMouseEvent(this,"stagemousedown",!1,a,e,b),e.target=this._getObjectsUnderPoint(e.x,e.y,null,!0),e.event=this._dispatchMouseEvent(e.target,"mousedown",!0,a,e,b),this.nextStage&&this.nextStage._handlePointerDown(a,b,c,d)},b._testMouseOver=function(a){if(-1==this._primaryPointerID&&(a||this.mouseX!=this._mouseOverX||this.mouseY!=this._mouseOverY||!this.mouseInBounds)){var b,c,d,e,f=this._getPointerData(-1),g=f.posEvtObj,h=-1,i="";(a||this.mouseInBounds&&g&&g.target==this.canvas)&&(b=this._getObjectsUnderPoint(this.mouseX,this.mouseY,null,!0),this._mouseOverX=this.mouseX,this._mouseOverY=this.mouseY);var j=this._mouseOverTarget||[],k=j[j.length-1],l=this._mouseOverTarget=[];for(c=b;c;)l.unshift(c),null!=c.cursor&&(i=c.cursor),c=c.parent;for(this.canvas.style.cursor=i,d=0,e=l.length;e>d&&l[d]==j[d];d++)h=d;for(k!=b&&this._dispatchMouseEvent(k,"mouseout",!0,-1,f,g),d=j.length-1;d>h;d--)this._dispatchMouseEvent(j[d],"rollout",!1,-1,f,g);for(d=l.length-1;d>h;d--)this._dispatchMouseEvent(l[d],"rollover",!1,-1,f,g);k!=b&&this._dispatchMouseEvent(b,"mouseover",!0,-1,f,g)}},b._handleDoubleClick=function(a){var b=this._getPointerData(-1),c=this._getObjectsUnderPoint(b.x,b.y,null,!0);this._dispatchMouseEvent(c,"dblclick",!0,-1,b,a),this.nextStage&&this.nextStage._handleDoubleClick(a)},b._dispatchMouseEvent=function(a,b,c,d,e,f){if(a&&(c||a.hasEventListener(b))){var g=new createjs.MouseEvent(b,c,!1,e.x,e.y,f,d,d==this._primaryPointerID,e.rawX,e.rawY);return a.dispatchEvent(g),g}},createjs.Stage=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.image=null,b.snapToPixel=!0,b.sourceRect=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){this.DisplayObject_initialize(),"string"==typeof a?(this.image=document.createElement("img"),this.image.src=a):this.image=a},b.isVisible=function(){var a=this.cacheCanvas||this.image&&(this.image.complete||this.image.getContext||this.image.readyState>=2);return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;var c=this.sourceRect;return c?a.drawImage(this.image,c.x,c.y,c.width,c.height,0,0,c.width,c.height):a.drawImage(this.image,0,0),!0},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){var a=this.DisplayObject_getBounds();if(a)return a;var b=this.sourceRect||this.image,c=this.image&&(this.image.complete||this.image.getContext||this.image.readyState>=2);return c?this._rectangle.initialize(0,0,b.width,b.height):null},b.clone=function(){var b=new a(this.image);return this.sourceRect&&(b.sourceRect=this.sourceRect.clone()),this.cloneProps(b),b},b.toString=function(){return"[Bitmap (name="+this.name+")]"},createjs.Bitmap=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b){this.initialize(a,b)},b=a.prototype=new createjs.DisplayObject;b.currentFrame=0,b.currentAnimation=null,b.paused=!0,b.spriteSheet=null,b.snapToPixel=!0,b.offset=0,b.currentAnimationFrame=0,b.framerate=0,b._advanceCount=0,b._animation=null,b._currentFrame=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b){this.DisplayObject_initialize(),this.spriteSheet=a,b&&this.gotoAndPlay(b)},b.isVisible=function(){var a=this.cacheCanvas||this.spriteSheet.complete;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;this._normalizeFrame();var c=this.spriteSheet.getFrame(0|this._currentFrame);if(!c)return!1;var d=c.rect;return a.drawImage(c.image,d.x,d.y,d.width,d.height,-c.regX,-c.regY,d.width,d.height),!0},b.play=function(){this.paused=!1},b.stop=function(){this.paused=!0},b.gotoAndPlay=function(a){this.paused=!1,this._goto(a)},b.gotoAndStop=function(a){this.paused=!0,this._goto(a)},b.advance=function(a){var b=this._animation&&this._animation.speed||1,c=this.framerate||this.spriteSheet.framerate,d=c&&null!=a?a/(1e3/c):1;this._animation?this.currentAnimationFrame+=d*b:this._currentFrame+=d*b,this._normalizeFrame()},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){return this.DisplayObject_getBounds()||this.spriteSheet.getFrameBounds(this.currentFrame,this._rectangle)},b.clone=function(){var b=new a(this.spriteSheet);return this.cloneProps(b),b},b.toString=function(){return"[Sprite (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){this.paused||this.advance(a&&a[0]&&a[0].delta),this.DisplayObject__tick(a)},b._normalizeFrame=function(){var a,b=this._animation,c=this.paused,d=this._currentFrame,e=this.currentAnimationFrame;if(b)if(a=b.frames.length,(0|e)>=a){var f=b.next;if(this._dispatchAnimationEnd(b,d,c,f,a-1));else{if(f)return this._goto(f,e-a);this.paused=!0,e=this.currentAnimationFrame=b.frames.length-1,this._currentFrame=b.frames[e]}}else this._currentFrame=b.frames[0|e];else if(a=this.spriteSheet.getNumFrames(),d>=a&&!this._dispatchAnimationEnd(b,d,c,a-1)&&(this._currentFrame-=a)>=a)return this._normalizeFrame();this.currentFrame=0|this._currentFrame},b._dispatchAnimationEnd=function(a,b,c,d,e){var f=a?a.name:null;if(this.hasEventListener("animationend")){var g=new createjs.Event("animationend");g.name=f,g.next=d,this.dispatchEvent(g)}var h=this._animation!=a||this._currentFrame!=b;return h||c||!this.paused||(this.currentAnimationFrame=e,h=!0),h},b.DisplayObject_cloneProps=b.cloneProps,b.cloneProps=function(a){this.DisplayObject_cloneProps(a),a.currentFrame=this.currentFrame,a._currentFrame=this._currentFrame,a.currentAnimation=this.currentAnimation,a.paused=this.paused,a._animation=this._animation,a.currentAnimationFrame=this.currentAnimationFrame,a.framerate=this.framerate},b._goto=function(a,b){if(isNaN(a)){var c=this.spriteSheet.getAnimation(a);c&&(this.currentAnimationFrame=b||0,this._animation=c,this.currentAnimation=a,this._normalizeFrame())}else this.currentAnimationFrame=0,this.currentAnimation=this._animation=null,this._currentFrame=a,this._normalizeFrame()},createjs.Sprite=a}(),this.createjs=this.createjs||{},function(){var a="BitmapAnimation is deprecated in favour of Sprite. See VERSIONS file for info on changes.";if(!createjs.Sprite)throw a;(createjs.BitmapAnimation=function(b){console.log(a),this.initialize(b)}).prototype=new createjs.Sprite}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.graphics=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){this.DisplayObject_initialize(),this.graphics=a?a:new createjs.Graphics},b.isVisible=function(){var a=this.cacheCanvas||this.graphics&&!this.graphics.isEmpty();return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){return this.DisplayObject_draw(a,b)?!0:(this.graphics.draw(a),!0)},b.clone=function(b){var c=new a(b&&this.graphics?this.graphics.clone():this.graphics);return this.cloneProps(c),c},b.toString=function(){return"[Shape (name="+this.name+")]"},createjs.Shape=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.DisplayObject,c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");c.getContext&&(a._workingContext=c.getContext("2d"),c.width=c.height=1),a.H_OFFSETS={start:0,left:0,center:-.5,end:-1,right:-1},a.V_OFFSETS={top:0,hanging:-.01,middle:-.4,alphabetic:-.8,ideographic:-.85,bottom:-1},b.text="",b.font=null,b.color=null,b.textAlign="left",b.textBaseline="top",b.maxWidth=null,b.outline=0,b.lineHeight=0,b.lineWidth=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b,c){this.DisplayObject_initialize(),this.text=a,this.font=b,this.color=c},b.isVisible=function(){var a=this.cacheCanvas||null!=this.text&&""!==this.text;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;var c=this.color||"#000";return this.outline?(a.strokeStyle=c,a.lineWidth=1*this.outline):a.fillStyle=c,this._drawText(this._prepContext(a)),!0},b.getMeasuredWidth=function(){return this._prepContext(a._workingContext).measureText(this.text).width},b.getMeasuredLineHeight=function(){return 1.2*this._prepContext(a._workingContext).measureText("M").width},b.getMeasuredHeight=function(){return this._drawText(null,{}).height},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){var b=this.DisplayObject_getBounds();if(b)return b;if(null==this.text||""==this.text)return null;var c=this._drawText(null,{}),d=this.maxWidth&&this.maxWidth<c.width?this.maxWidth:c.width,e=d*a.H_OFFSETS[this.textAlign||"left"],f=this.lineHeight||this.getMeasuredLineHeight(),g=f*a.V_OFFSETS[this.textBaseline||"top"];return this._rectangle.initialize(e,g,d,c.height)},b.clone=function(){var b=new a(this.text,this.font,this.color);return this.cloneProps(b),b},b.toString=function(){return"[Text (text="+(this.text.length>20?this.text.substr(0,17)+"...":this.text)+")]"},b.DisplayObject_cloneProps=b.cloneProps,b.cloneProps=function(a){this.DisplayObject_cloneProps(a),a.textAlign=this.textAlign,a.textBaseline=this.textBaseline,a.maxWidth=this.maxWidth,a.outline=this.outline,a.lineHeight=this.lineHeight,a.lineWidth=this.lineWidth},b._prepContext=function(a){return a.font=this.font,a.textAlign=this.textAlign||"left",a.textBaseline=this.textBaseline||"top",a},b._drawText=function(b,c){var d=!!b;d||(b=this._prepContext(a._workingContext));for(var e=this.lineHeight||this.getMeasuredLineHeight(),f=0,g=0,h=String(this.text).split(/(?:\r\n|\r|\n)/),i=0,j=h.length;j>i;i++){var k=h[i],l=null;if(null!=this.lineWidth&&(l=b.measureText(k).width)>this.lineWidth){var m=k.split(/(\s)/);k=m[0],l=b.measureText(k).width;for(var n=1,o=m.length;o>n;n+=2){var p=b.measureText(m[n]+m[n+1]).width;l+p>this.lineWidth?(d&&this._drawTextLine(b,k,g*e),l>f&&(f=l),k=m[n+1],l=b.measureText(k).width,g++):(k+=m[n]+m[n+1],l+=p)}}d&&this._drawTextLine(b,k,g*e),c&&null==l&&(l=b.measureText(k).width),l>f&&(f=l),g++}return c&&(c.count=g,c.width=f,c.height=g*e),c},b._drawTextLine=function(a,b,c){this.outline?a.strokeText(b,0,c,this.maxWidth||65535):a.fillText(b,0,c,this.maxWidth||65535)},createjs.Text=a}(),this.createjs=this.createjs||{},function(){function a(a,b){this.initialize(a,b)}var b=a.prototype=new createjs.DisplayObject;b.text="",b.spriteSheet=null,b.lineHeight=0,b.letterSpacing=0,b.spaceWidth=0,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b){this.DisplayObject_initialize(),this.text=a,this.spriteSheet=b},b.DisplayObject_draw=b.draw,b.draw=function(a,b){return this.DisplayObject_draw(a,b)?!0:(this._drawText(a),void 0)},b.isVisible=function(){var a=this.cacheCanvas||this.spriteSheet&&this.spriteSheet.complete&&this.text;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.getBounds=function(){var a=this._rectangle;return this._drawText(null,a),a.width?a:null},b._getFrame=function(a,b){var c,d=b.getAnimation(a);return d||(a!=(c=a.toUpperCase())||a!=(c=a.toLowerCase())||(c=null),c&&(d=b.getAnimation(c))),d&&b.getFrame(d.frames[0])},b._getLineHeight=function(a){var b=this._getFrame("1",a)||this._getFrame("T",a)||this._getFrame("L",a)||a.getFrame(0);return b?b.rect.height:1},b._getSpaceWidth=function(a){var b=this._getFrame("1",a)||this._getFrame("l",a)||this._getFrame("e",a)||this._getFrame("a",a)||a.getFrame(0);return b?b.rect.width:1},b._drawText=function(a,b){var c,d,e,f=0,g=0,h=this.spaceWidth,i=this.lineHeight,j=this.spriteSheet,k=!!this._getFrame(" ",j);k||0!=h||(h=this._getSpaceWidth(j)),0==i&&(i=this._getLineHeight(j));for(var l=0,m=0,n=this.text.length;n>m;m++){var o=this.text.charAt(m);if(k||" "!=o)if("\n"!=o&&"\r"!=o){var p=this._getFrame(o,j);if(p){var q=p.rect;e=p.regX,c=q.width,a&&a.drawImage(p.image,q.x,q.y,c,d=q.height,f-e,g-p.regY,c,d),f+=c+this.letterSpacing}}else"\r"==o&&"\n"==this.text.charAt(m+1)&&m++,f-e>l&&(l=f-e),f=0,g+=i;else f+=h}f-e>l&&(l=f-e),b&&(b.width=l-this.letterSpacing,b.height=g+i)},createjs.BitmapText=a}(),this.createjs=this.createjs||{},function(){var a=function(){throw"SpriteSheetUtils cannot be instantiated"},b=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");b.getContext&&(a._workingCanvas=b,a._workingContext=b.getContext("2d"),b.width=b.height=1),a.addFlippedFrames=function(b,c,d,e){if(c||d||e){var f=0;c&&a._flip(b,++f,!0,!1),d&&a._flip(b,++f,!1,!0),e&&a._flip(b,++f,!0,!0)}},a.extractFrame=function(b,c){isNaN(c)&&(c=b.getAnimation(c).frames[0]);var d=b.getFrame(c);if(!d)return null;var e=d.rect,f=a._workingCanvas;f.width=e.width,f.height=e.height,a._workingContext.drawImage(d.image,e.x,e.y,e.width,e.height,0,0,e.width,e.height);var g=document.createElement("img");return g.src=f.toDataURL("image/png"),g},a.mergeAlpha=function(a,b,c){c||(c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")),c.width=Math.max(b.width,a.width),c.height=Math.max(b.height,a.height);var d=c.getContext("2d");return d.save(),d.drawImage(a,0,0),d.globalCompositeOperation="destination-in",d.drawImage(b,0,0),d.restore(),c},a._flip=function(b,c,d,e){for(var f=b._images,g=a._workingCanvas,h=a._workingContext,i=f.length/c,j=0;i>j;j++){var k=f[j];k.__tmp=j,h.setTransform(1,0,0,1,0,0),h.clearRect(0,0,g.width+1,g.height+1),g.width=k.width,g.height=k.height,h.setTransform(d?-1:1,0,0,e?-1:1,d?k.width:0,e?k.height:0),h.drawImage(k,0,0);var l=document.createElement("img");l.src=g.toDataURL("image/png"),l.width=k.width,l.height=k.height,f.push(l)}var m=b._frames,n=m.length/c;for(j=0;n>j;j++){k=m[j];var o=k.rect.clone();l=f[k.image.__tmp+i*c];var p={image:l,rect:o,regX:k.regX,regY:k.regY};d&&(o.x=l.width-o.x-o.width,p.regX=o.width-k.regX),e&&(o.y=l.height-o.y-o.height,p.regY=o.height-k.regY),m.push(p)}var q="_"+(d?"h":"")+(e?"v":""),r=b._animations,s=b._data,t=r.length/c;for(j=0;t>j;j++){var u=r[j];k=s[u];var v={name:u+q,speed:k.speed,next:k.next,frames:[]};k.next&&(v.next+=q),m=k.frames;for(var w=0,x=m.length;x>w;w++)v.frames.push(m[w]+n*c);s[v.name]=v,r.push(v.name)}},createjs.SpriteSheetUtils=a}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype=new createjs.EventDispatcher;a.ERR_DIMENSIONS="frame dimensions exceed max spritesheet dimensions",a.ERR_RUNNING="a build is already running",b.maxWidth=2048,b.maxHeight=2048,b.spriteSheet=null,b.scale=1,b.padding=1,b.timeSlice=.3,b.progress=-1,b._frames=null,b._animations=null,b._data=null,b._nextFrameIndex=0,b._index=0,b._timerID=null,b._scale=1,b.initialize=function(){this._frames=[],this._animations={}},b.addFrame=function(b,c,d,e,f,g){if(this._data)throw a.ERR_RUNNING;var h=c||b.bounds||b.nominalBounds;return!h&&b.getBounds&&(h=b.getBounds()),h?(d=d||1,this._frames.push({source:b,sourceRect:h,scale:d,funct:e,params:f,scope:g,index:this._frames.length,height:h.height*d})-1):null},b.addAnimation=function(b,c,d,e){if(this._data)throw a.ERR_RUNNING;this._animations[b]={frames:c,next:d,frequency:e}},b.addMovieClip=function(b,c,d){if(this._data)throw a.ERR_RUNNING;var e=b.frameBounds,f=c||b.bounds||b.nominalBounds;if(!f&&b.getBounds&&(f=b.getBounds()),!f&&!e)return null;for(var g=this._frames.length,h=b.timeline.duration,i=0;h>i;i++){var j=e&&e[i]?e[i]:f;this.addFrame(b,j,d,function(a){var b=this.actionsEnabled;this.actionsEnabled=!1,this.gotoAndStop(a),this.actionsEnabled=b},[i],b)}var k=b.timeline._labels,l=[];for(var m in k)l.push({index:k[m],label:m});if(l.length){l.sort(function(a,b){return a.index-b.index});for(var i=0,n=l.length;n>i;i++){for(var o=l[i].label,p=g+l[i].index,q=g+(i==n-1?h:l[i+1].index),r=[],s=p;q>s;s++)r.push(s);this.addAnimation(o,r,!0)}}},b.build=function(){if(this._data)throw a.ERR_RUNNING;for(this._startBuild();this._drawNext(););return this._endBuild(),this.spriteSheet},b.buildAsync=function(b){if(this._data)throw a.ERR_RUNNING;this.timeSlice=b,this._startBuild();var c=this;this._timerID=setTimeout(function(){c._run()},50-50*Math.max(.01,Math.min(.99,this.timeSlice||.3)))},b.stopAsync=function(){clearTimeout(this._timerID),this._data=null},b.clone=function(){throw"SpriteSheetBuilder cannot be cloned."},b.toString=function(){return"[SpriteSheetBuilder]"},b._startBuild=function(){var b=this.padding||0;this.progress=0,this.spriteSheet=null,this._index=0,this._scale=this.scale;var c=[];this._data={images:[],frames:c,animations:this._animations};var d=this._frames.slice();if(d.sort(function(a,b){return a.height<=b.height?-1:1}),d[d.length-1].height+2*b>this.maxHeight)throw a.ERR_DIMENSIONS;for(var e=0,f=0,g=0;d.length;){var h=this._fillRow(d,e,g,c,b);if(h.w>f&&(f=h.w),e+=h.h,!h.h||!d.length){var i=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");i.width=this._getSize(f,this.maxWidth),i.height=this._getSize(e,this.maxHeight),this._data.images[g]=i,h.h||(f=e=0,g++)}}},b._getSize=function(a,b){for(var c=4;Math.pow(2,++c)<a;);return Math.min(b,Math.pow(2,c))},b._fillRow=function(b,c,d,e,f){var g=this.maxWidth,h=this.maxHeight;c+=f;for(var i=h-c,j=f,k=0,l=b.length-1;l>=0;l--){var m=b[l],n=this._scale*m.scale,o=m.sourceRect,p=m.source,q=Math.floor(n*o.x-f),r=Math.floor(n*o.y-f),s=Math.ceil(n*o.height+2*f),t=Math.ceil(n*o.width+2*f);if(t>g)throw a.ERR_DIMENSIONS;s>i||j+t>g||(m.img=d,m.rect=new createjs.Rectangle(j,c,t,s),k=k||s,b.splice(l,1),e[m.index]=[j,c,t,s,d,Math.round(-q+n*p.regX-f),Math.round(-r+n*p.regY-f)],j+=t)}return{w:j,h:k}},b._endBuild=function(){this.spriteSheet=new createjs.SpriteSheet(this._data),this._data=null,this.progress=1,this.dispatchEvent("complete")},b._run=function(){for(var a=50*Math.max(.01,Math.min(.99,this.timeSlice||.3)),b=(new Date).getTime()+a,c=!1;b>(new Date).getTime();)if(!this._drawNext()){c=!0;break}if(c)this._endBuild();else{var d=this;this._timerID=setTimeout(function(){d._run()},50-a)}var e=this.progress=this._index/this._frames.length;if(this.hasEventListener("progress")){var f=new createjs.Event("progress");f.progress=e,this.dispatchEvent(f)}},b._drawNext=function(){var a=this._frames[this._index],b=a.scale*this._scale,c=a.rect,d=a.sourceRect,e=this._data.images[a.img],f=e.getContext("2d");return a.funct&&a.funct.apply(a.scope,a.params),f.save(),f.beginPath(),f.rect(c.x,c.y,c.width,c.height),f.clip(),f.translate(Math.ceil(c.x-d.x*b),Math.ceil(c.y-d.y*b)),f.scale(b,b),a.source.draw(f),f.restore(),++this._index<this._frames.length},createjs.SpriteSheetBuilder=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.htmlElement=null,b._oldMtx=null,b._visible=!1,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){"string"==typeof a&&(a=document.getElementById(a)),this.DisplayObject_initialize(),this.mouseEnabled=!1,this.htmlElement=a;var b=a.style;b.position="absolute",b.transformOrigin=b.WebkitTransformOrigin=b.msTransformOrigin=b.MozTransformOrigin=b.OTransformOrigin="0% 0%"},b.isVisible=function(){return null!=this.htmlElement},b.draw=function(){return this.visible&&(this._visible=!0),!0
},b.cache=function(){},b.uncache=function(){},b.updateCache=function(){},b.hitTest=function(){},b.localToGlobal=function(){},b.globalToLocal=function(){},b.localToLocal=function(){},b.clone=function(){throw"DOMElement cannot be cloned."},b.toString=function(){return"[DOMElement (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){var b=this.getStage();this._visible=!1,b&&b.on("drawend",this._handleDrawEnd,this,!0),this.DisplayObject__tick(a)},b._handleDrawEnd=function(){var a=this.htmlElement;if(a){var b=a.style,c=this._visible?"visible":"hidden";if(c!=b.visibility&&(b.visibility=c),this._visible){var d=this.getConcatenatedMatrix(this._matrix),e=this._oldMtx,f=1e4;if(e&&e.alpha==d.alpha||(b.opacity=""+(0|d.alpha*f)/f,e&&(e.alpha=d.alpha)),!e||e.tx!=d.tx||e.ty!=d.ty||e.a!=d.a||e.b!=d.b||e.c!=d.c||e.d!=d.d){var g="matrix("+(0|d.a*f)/f+","+(0|d.b*f)/f+","+(0|d.c*f)/f+","+(0|d.d*f)/f+","+(0|d.tx+.5);b.transform=b.WebkitTransform=b.OTransform=b.msTransform=g+","+(0|d.ty+.5)+")",b.MozTransform=g+"px,"+(0|d.ty+.5)+"px)",this._oldMtx=e?e.copy(d):d.clone()}}}},createjs.DOMElement=a}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype;b.initialize=function(){},b.getBounds=function(){return null},b.applyFilter=function(){},b.toString=function(){return"[Filter]"},b.clone=function(){return new a},createjs.Filter=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.Filter;b.initialize=function(a,b,c){(isNaN(a)||0>a)&&(a=0),this.blurX=0|a,(isNaN(b)||0>b)&&(b=0),this.blurY=0|b,(isNaN(c)||1>c)&&(c=1),this.quality=0|c},b.blurX=0,b.blurY=0,b.quality=1,b.mul_table=[1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1],b.shg_table=[0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9],b.getBounds=function(){var a=.5*Math.pow(this.quality,.6);return new createjs.Rectangle(-this.blurX*a,-this.blurY*a,2*this.blurX*a,2*this.blurY*a)},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}var k=this.blurX/2;if(isNaN(k)||0>k)return!1;k|=0;var l=this.blurY/2;if(isNaN(l)||0>l)return!1;if(l|=0,0==k&&0==l)return!1;var m=this.quality;(isNaN(m)||1>m)&&(m=1),m|=0,m>3&&(m=3),1>m&&(m=1);var b,c,n,o,p,q,r,s,t,u,v,w,x,y,z,A=i.data,B=k+k+1,C=l+l+1,D=d-1,E=e-1,F=k+1,G=l+1,H={r:0,b:0,g:0,a:0,next:null},I=H;for(n=1;B>n;n++)I=I.next={r:0,b:0,g:0,a:0,next:null};I.next=H;var J={r:0,b:0,g:0,a:0,next:null},K=J;for(n=1;C>n;n++)K=K.next={r:0,b:0,g:0,a:0,next:null};K.next=J;for(var L=null;m-->0;){r=q=0;var M=this.mul_table[k],N=this.shg_table[k];for(c=e;--c>-1;){for(s=F*(w=A[q]),t=F*(x=A[q+1]),u=F*(y=A[q+2]),v=F*(z=A[q+3]),I=H,n=F;--n>-1;)I.r=w,I.g=x,I.b=y,I.a=z,I=I.next;for(n=1;F>n;n++)o=q+((n>D?D:n)<<2),s+=I.r=A[o],t+=I.g=A[o+1],u+=I.b=A[o+2],v+=I.a=A[o+3],I=I.next;for(L=H,b=0;d>b;b++)A[q++]=s*M>>>N,A[q++]=t*M>>>N,A[q++]=u*M>>>N,A[q++]=v*M>>>N,o=r+((o=b+k+1)<D?o:D)<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next;r+=d}for(M=this.mul_table[l],N=this.shg_table[l],b=0;d>b;b++){for(q=b<<2,s=G*(w=A[q]),t=G*(x=A[q+1]),u=G*(y=A[q+2]),v=G*(z=A[q+3]),K=J,n=0;G>n;n++)K.r=w,K.g=x,K.b=y,K.a=z,K=K.next;for(p=d,n=1;l>=n;n++)q=p+b<<2,s+=K.r=A[q],t+=K.g=A[q+1],u+=K.b=A[q+2],v+=K.a=A[q+3],K=K.next,E>n&&(p+=d);if(q=b,L=J,m>0)for(c=0;e>c;c++)o=q<<2,A[o+3]=z=v*M>>>N,z>0?(A[o]=s*M>>>N,A[o+1]=t*M>>>N,A[o+2]=u*M>>>N):A[o]=A[o+1]=A[o+2]=0,o=b+((o=c+G)<E?o:E)*d<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next,q+=d;else for(c=0;e>c;c++)o=q<<2,A[o+3]=z=v*M>>>N,z>0?(z=255/z,A[o]=(s*M>>>N)*z,A[o+1]=(t*M>>>N)*z,A[o+2]=(u*M>>>N)*z):A[o]=A[o+1]=A[o+2]=0,o=b+((o=c+G)<E?o:E)*d<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next,q+=d}}return f.putImageData(i,g,h),!0},b.clone=function(){return new a(this.blurX,this.blurY,this.quality)},b.toString=function(){return"[BlurFilter]"},createjs.BlurFilter=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.initialize=function(a){this.alphaMap=a},b.alphaMap=null,b._alphaMap=null,b._mapData=null,b.applyFilter=function(a,b,c,d,e,f,g,h){if(!this.alphaMap)return!0;if(!this._prepAlphaMap())return!1;f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k=i.data,l=this._mapData,m=k.length,n=0;m>n;n+=4)k[n+3]=l[n]||0;return f.putImageData(i,g,h),!0},b.clone=function(){return new a(this.alphaMap)},b.toString=function(){return"[AlphaMapFilter]"},b._prepAlphaMap=function(){if(!this.alphaMap)return!1;if(this.alphaMap==this._alphaMap&&this._mapData)return!0;this._mapData=null;var a,b=this._alphaMap=this.alphaMap,c=b;b instanceof HTMLCanvasElement?a=c.getContext("2d"):(c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"),c.width=b.width,c.height=b.height,a=c.getContext("2d"),a.drawImage(b,0,0));try{var d=a.getImageData(0,0,b.width,b.height)}catch(e){return!1}return this._mapData=d.data,!0},createjs.AlphaMapFilter=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.initialize=function(a){this.mask=a},b.mask=null,b.applyFilter=function(a,b,c,d,e,f,g,h){return this.mask?(f=f||a,null==g&&(g=b),null==h&&(h=c),f.save(),f.globalCompositeOperation="destination-in",f.drawImage(this.mask,g,h),f.restore(),!0):!0},b.clone=function(){return new a(this.mask)},b.toString=function(){return"[AlphaMaskFilter]"},createjs.AlphaMaskFilter=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c,d,e,f,g,h){this.initialize(a,b,c,d,e,f,g,h)},b=a.prototype=new createjs.Filter;b.redMultiplier=1,b.greenMultiplier=1,b.blueMultiplier=1,b.alphaMultiplier=1,b.redOffset=0,b.greenOffset=0,b.blueOffset=0,b.alphaOffset=0,b.initialize=function(a,b,c,d,e,f,g,h){this.redMultiplier=null!=a?a:1,this.greenMultiplier=null!=b?b:1,this.blueMultiplier=null!=c?c:1,this.alphaMultiplier=null!=d?d:1,this.redOffset=e||0,this.greenOffset=f||0,this.blueOffset=g||0,this.alphaOffset=h||0},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k=i.data,l=k.length,m=0;l>m;m+=4)k[m]=k[m]*this.redMultiplier+this.redOffset,k[m+1]=k[m+1]*this.greenMultiplier+this.greenOffset,k[m+2]=k[m+2]*this.blueMultiplier+this.blueOffset,k[m+3]=k[m+3]*this.alphaMultiplier+this.alphaOffset;return f.putImageData(i,g,h),!0},b.toString=function(){return"[ColorFilter]"},b.clone=function(){return new a(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset)},createjs.ColorFilter=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype;a.DELTA_INDEX=[0,.01,.02,.04,.05,.06,.07,.08,.1,.11,.12,.14,.15,.16,.17,.18,.2,.21,.22,.24,.25,.27,.28,.3,.32,.34,.36,.38,.4,.42,.44,.46,.48,.5,.53,.56,.59,.62,.65,.68,.71,.74,.77,.8,.83,.86,.89,.92,.95,.98,1,1.06,1.12,1.18,1.24,1.3,1.36,1.42,1.48,1.54,1.6,1.66,1.72,1.78,1.84,1.9,1.96,2,2.12,2.25,2.37,2.5,2.62,2.75,2.87,3,3.2,3.4,3.6,3.8,4,4.3,4.7,4.9,5,5.5,6,6.5,6.8,7,7.3,7.5,7.8,8,8.4,8.7,9,9.4,9.6,9.8,10],a.IDENTITY_MATRIX=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1],a.LENGTH=a.IDENTITY_MATRIX.length,b.initialize=function(a,b,c,d){return this.reset(),this.adjustColor(a,b,c,d),this},b.reset=function(){return this.copyMatrix(a.IDENTITY_MATRIX)},b.adjustColor=function(a,b,c,d){return this.adjustHue(d),this.adjustContrast(b),this.adjustBrightness(a),this.adjustSaturation(c)},b.adjustBrightness=function(a){return 0==a||isNaN(a)?this:(a=this._cleanValue(a,255),this._multiplyMatrix([1,0,0,0,a,0,1,0,0,a,0,0,1,0,a,0,0,0,1,0,0,0,0,0,1]),this)},b.adjustContrast=function(b){if(0==b||isNaN(b))return this;b=this._cleanValue(b,100);var c;return 0>b?c=127+127*(b/100):(c=b%1,c=0==c?a.DELTA_INDEX[b]:a.DELTA_INDEX[b<<0]*(1-c)+a.DELTA_INDEX[(b<<0)+1]*c,c=127*c+127),this._multiplyMatrix([c/127,0,0,0,.5*(127-c),0,c/127,0,0,.5*(127-c),0,0,c/127,0,.5*(127-c),0,0,0,1,0,0,0,0,0,1]),this},b.adjustSaturation=function(a){if(0==a||isNaN(a))return this;a=this._cleanValue(a,100);var b=1+(a>0?3*a/100:a/100),c=.3086,d=.6094,e=.082;return this._multiplyMatrix([c*(1-b)+b,d*(1-b),e*(1-b),0,0,c*(1-b),d*(1-b)+b,e*(1-b),0,0,c*(1-b),d*(1-b),e*(1-b)+b,0,0,0,0,0,1,0,0,0,0,0,1]),this},b.adjustHue=function(a){if(0==a||isNaN(a))return this;a=this._cleanValue(a,180)/180*Math.PI;var b=Math.cos(a),c=Math.sin(a),d=.213,e=.715,f=.072;return this._multiplyMatrix([d+b*(1-d)+c*-d,e+b*-e+c*-e,f+b*-f+c*(1-f),0,0,d+b*-d+.143*c,e+b*(1-e)+.14*c,f+b*-f+c*-.283,0,0,d+b*-d+c*-(1-d),e+b*-e+c*e,f+b*(1-f)+c*f,0,0,0,0,0,1,0,0,0,0,0,1]),this},b.concat=function(b){return b=this._fixMatrix(b),b.length!=a.LENGTH?this:(this._multiplyMatrix(b),this)},b.clone=function(){return(new a).copyMatrix(this)},b.toArray=function(){for(var b=[],c=0,d=a.LENGTH;d>c;c++)b[c]=this[c];return b},b.copyMatrix=function(b){for(var c=a.LENGTH,d=0;c>d;d++)this[d]=b[d];return this},b.toString=function(){return"[ColorMatrix]"},b._multiplyMatrix=function(a){for(var b=[],c=0;5>c;c++){for(var d=0;5>d;d++)b[d]=this[d+5*c];for(var d=0;5>d;d++){for(var e=0,f=0;5>f;f++)e+=a[d+5*f]*b[f];this[d+5*c]=e}}},b._cleanValue=function(a,b){return Math.min(b,Math.max(-b,a))},b._fixMatrix=function(b){return b instanceof a&&(b=b.toArray()),b.length<a.LENGTH?b=b.slice(0,b.length).concat(a.IDENTITY_MATRIX.slice(b.length,a.LENGTH)):b.length>a.LENGTH&&(b=b.slice(0,a.LENGTH)),b},createjs.ColorMatrix=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.matrix=null,b.initialize=function(a){this.matrix=a},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k,l,m,n,o=i.data,p=o.length,q=this.matrix,r=q[0],s=q[1],t=q[2],u=q[3],v=q[4],w=q[5],x=q[6],y=q[7],z=q[8],A=q[9],B=q[10],C=q[11],D=q[12],E=q[13],F=q[14],G=q[15],H=q[16],I=q[17],J=q[18],K=q[19],L=0;p>L;L+=4)k=o[L],l=o[L+1],m=o[L+2],n=o[L+3],o[L]=k*r+l*s+m*t+n*u+v,o[L+1]=k*w+l*x+m*y+n*z+A,o[L+2]=k*B+l*C+m*D+n*E+F,o[L+3]=k*G+l*H+m*I+n*J+K;return f.putImageData(i,g,h),!0},b.toString=function(){return"[ColorMatrixFilter]"},b.clone=function(){return new a(this.matrix)},createjs.ColorMatrixFilter=a}(),this.createjs=this.createjs||{},function(){var a=function(){throw"Touch cannot be instantiated"};a.isSupported=function(){return"ontouchstart"in window||window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>0||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>0},a.enable=function(b,c,d){return b&&b.canvas&&a.isSupported()?(b.__touch={pointers:{},multitouch:!c,preventDefault:!d,count:0},"ontouchstart"in window?a._IOS_enable(b):(window.navigator.msPointerEnabled||window.navigator.pointerEnabled)&&a._IE_enable(b),!0):!1},a.disable=function(b){b&&("ontouchstart"in window?a._IOS_disable(b):(window.navigator.msPointerEnabled||window.navigator.pointerEnabled)&&a._IE_disable(b))},a._IOS_enable=function(b){var c=b.canvas,d=b.__touch.f=function(c){a._IOS_handleEvent(b,c)};c.addEventListener("touchstart",d,!1),c.addEventListener("touchmove",d,!1),c.addEventListener("touchend",d,!1),c.addEventListener("touchcancel",d,!1)},a._IOS_disable=function(a){var b=a.canvas;if(b){var c=a.__touch.f;b.removeEventListener("touchstart",c,!1),b.removeEventListener("touchmove",c,!1),b.removeEventListener("touchend",c,!1),b.removeEventListener("touchcancel",c,!1)}},a._IOS_handleEvent=function(a,b){if(a){a.__touch.preventDefault&&b.preventDefault&&b.preventDefault();for(var c=b.changedTouches,d=b.type,e=0,f=c.length;f>e;e++){var g=c[e],h=g.identifier;g.target==a.canvas&&("touchstart"==d?this._handleStart(a,h,b,g.pageX,g.pageY):"touchmove"==d?this._handleMove(a,h,b,g.pageX,g.pageY):("touchend"==d||"touchcancel"==d)&&this._handleEnd(a,h,b))}}},a._IE_enable=function(b){var c=b.canvas,d=b.__touch.f=function(c){a._IE_handleEvent(b,c)};void 0===window.navigator.pointerEnabled?(c.addEventListener("MSPointerDown",d,!1),window.addEventListener("MSPointerMove",d,!1),window.addEventListener("MSPointerUp",d,!1),window.addEventListener("MSPointerCancel",d,!1),b.__touch.preventDefault&&(c.style.msTouchAction="none")):(c.addEventListener("pointerdown",d,!1),window.addEventListener("pointermove",d,!1),window.addEventListener("pointerup",d,!1),window.addEventListener("pointercancel",d,!1),b.__touch.preventDefault&&(c.style.touchAction="none")),b.__touch.activeIDs={}},a._IE_disable=function(a){var b=a.__touch.f;void 0===window.navigator.pointerEnabled?(window.removeEventListener("MSPointerMove",b,!1),window.removeEventListener("MSPointerUp",b,!1),window.removeEventListener("MSPointerCancel",b,!1),a.canvas&&a.canvas.removeEventListener("MSPointerDown",b,!1)):(window.removeEventListener("pointermove",b,!1),window.removeEventListener("pointerup",b,!1),window.removeEventListener("pointercancel",b,!1),a.canvas&&a.canvas.removeEventListener("pointerdown",b,!1))},a._IE_handleEvent=function(a,b){if(a){a.__touch.preventDefault&&b.preventDefault&&b.preventDefault();var c=b.type,d=b.pointerId,e=a.__touch.activeIDs;if("MSPointerDown"==c||"pointerdown"==c){if(b.srcElement!=a.canvas)return;e[d]=!0,this._handleStart(a,d,b,b.pageX,b.pageY)}else e[d]&&("MSPointerMove"==c||"pointermove"==c?this._handleMove(a,d,b,b.pageX,b.pageY):("MSPointerUp"==c||"MSPointerCancel"==c||"pointerup"==c||"pointercancel"==c)&&(delete e[d],this._handleEnd(a,d,b)))}},a._handleStart=function(a,b,c,d,e){var f=a.__touch;if(f.multitouch||!f.count){var g=f.pointers;g[b]||(g[b]=!0,f.count++,a._handlePointerDown(b,c,d,e))}},a._handleMove=function(a,b,c,d,e){a.__touch.pointers[b]&&a._handlePointerMove(b,c,d,e)},a._handleEnd=function(a,b,c){var d=a.__touch,e=d.pointers;e[b]&&(d.count--,a._handlePointerUp(b,c,!0),delete e[b])},createjs.Touch=a}(),this.createjs=this.createjs||{},function(){var a=createjs.EaselJS=createjs.EaselJS||{};a.version="NEXT",a.buildDate="Thu, 05 Dec 2013 22:43:21 GMT"}();
define("createjs.easel", function(){});

/**
 * @module Skritter
 * @submodule Model
 * @author Joshua McFarland
 */
define('models/StudyParam',[
    'createjs.easel',
    'backbone'
], function() {
    /**
     * @class StudyParam
     */
    var StudyParam = Backbone.Model.extend({
        /**
         * @method getAngle
         * @return {Number}
         */
        getAngle: function() {
            return skritter.fn.getAngle(this.get('corners'));
       },
        /**
         * @method getBitmap
         * @return {Bitmap}
         */
        getBitmap: function() {
            return new createjs.Bitmap(skritter.assets.getStroke(this.get('bitmapId')).src);
        },
        /**
         * @method getLength
         * @return {Number}
         */
        getLength: function() {
            var length = 0;
            for (var i = 0; i < this.get('corners').length - 1; i++)
            {
                length += skritter.fn.getDistance(this.get('corners')[i], this.get('corners')[i + 1]);
            }
            return length;
        }
    });

    return StudyParam;
});
/**
 * @module Skritter
 * @param StudyParam
 * @author Joshua McFarland
 */
define('Recognizer',[
    'models/StudyParam',
    'lodash'
], function(StudyParam) {
    /**
     * @class Recognizer
     * @param {CanvasCharacter} userCharacter
     * @param {CanvasStroke} userStroke
     * @param {Array} userTargets
     * @constructor
     */
    function Recognizer(userCharacter, userStroke, userTargets) {
        //set the values for recognition
        this.currentPosition = userCharacter.getStrokeCount() + 1;
        this.stroke = userStroke;
        this.targets = userTargets;
        this.canvasSize = skritter.settings.get('canvasSize');
        //set the scaled threshold values
        this.angleThreshold = 30;
        //TODO: hook these settings into the users
        this.distanceThreshold = 150 * (this.canvasSize / 600);
        this.lengthThreshold = 300 * (this.canvasSize / 600);
        this.orderStrictness = 0;
    }

    /**
     * @method recognize
     * @param {Array} ignoreCheck
     * @param {Boolean} enforceOrder
     * @returns {CanvasStroke}
     */
    Recognizer.prototype.recognize = function(ignoreCheck, enforceOrder) {
        var results = this.getResultSet();
        if (enforceOrder)
            this.orderStrictness = 0;
        for (var i in results)
        {
            var result = results[i];
            var scores = result.scores;

            if (!_.contains(ignoreCheck, 'angle')) {
                if (scores.angle > this.angleThreshold)
                    continue;
            }
            if (!_.contains(ignoreCheck, 'distance')) {
                if (scores.distance > this.distanceThreshold)
                    continue;
            }
            if (!_.contains(ignoreCheck, 'length')) {
                if (scores.length > this.lengthThreshold)
                    continue;
            }

            if (!_.contains(ignoreCheck, 'offset')) {
                var orderOffset = result.position - this.currentPosition;
                if (_.contains(ignoreCheck, 'offset') || orderOffset > this.orderStrictness)
                    continue;
            }

            var total = 0;
            for (var s in scores)
            {
                total += scores[s];
            }
            results[i].result = total;
        }

        results = _.filter(results, 'result');

        if (results.length > 0) {
            var matched = _.first(_.sortBy(results, 'result'));
            this.stroke.set('bitmapId', matched.bitmapId);
            this.stroke.set('contains', matched.contains);
            this.stroke.set('data', matched.data);
            this.stroke.set('feedback', matched.feedback);
            this.stroke.set('id', matched.id);
            this.stroke.set('params', matched.params);
            this.stroke.set('part', matched.part);
            this.stroke.set('position', matched.position);
            this.stroke.set('result', matched.result);
            this.stroke.set('scores', matched.scores);
            this.stroke.set('sprite', matched.sprite);
            return this.stroke;
        }

        return null;
    };

    /**
     * @method getResultSet
     * @returns {Array}
     */
    Recognizer.prototype.getResultSet = function() {
        var results = [];
        for (var a in this.targets)
        {
            var variations = this.targets[a];
            for (var b in variations.models)
            {
                var bitmapId = variations.at(b).get('bitmapId');
                var data = variations.at(b).get('data');
                var id = variations.at(b).get('id');
                var params = variations.at(b).getInflatedParams();
                var part = variations.at(b).get('part');
                var position = variations.at(b).get('position');
                var variation = variations.at(b).get('variation');
                var rune = variations.at(b).get('rune');
                var sprite = variations.at(b).get('sprite');

                //TODO: update this backwards check to use the new params concept
                //right now it's just a hack to manually inject params backwards
                var reverseCorners = _.cloneDeep(params[0].get('corners')).reverse();
                var reverseDeviations = _.cloneDeep(params[0].get('deviations')).reverse();
                params.push(new StudyParam({
                    bitmapId: bitmapId,
                    corners: reverseCorners,
                    deviations: reverseDeviations,
                    feedback: 'backwards'
                }));

                for (var p in params) {
                    var result = [];
                    var param = params[p];

                    var scores = {
                        angle: this.checkAngle(param),
                        corners: this.checkCorners(param),
                        distance: this.checkDistance(param),
                        length: this.checkLength(param)
                    };

                    result.bitmapId = bitmapId;
                    result.contains = param.get('contains');
                    result.data = data;
                    result.feedback = param.get('feedback');
                    result.id = id;
                    result.param = param;
                    result.part = part;
                    result.position = position;
                    result.variation = variation;
                    result.rune = rune;
                    result.scores = scores;
                    result.sprite = sprite;
                    results.push(result);
                }
            }
        }
        return results;
    };

    /**
     * @method checkAngle
     * @param {StudyParam} param
     * @returns {Number}
     */
    Recognizer.prototype.checkAngle = function(param) {
        var score = Math.abs(this.stroke.getAngle() - param.getAngle());
        return score;
    };

    /**
     * @method checkCorners
     * @param {StudyParam} param
     * @returns {Number}
     */
    Recognizer.prototype.checkCorners = function(param) {
        var cornerPenalty = 200;
        return Math.abs(param.get('corners').length - this.stroke.get('corners').length) * cornerPenalty;
    };

    /**
     * @method checkDistance
     * @param {StudyParam} param
     * @returns {Number}
     */
    Recognizer.prototype.checkDistance = function(param) {
        //ISSUE #75: might be better to check the distance from the mid-points
        var score = skritter.fn.getDistance(skritter.fn.getBoundingRectangle(this.stroke.get('corners'), this.canvasSize, this.canvasSize, 6),
                skritter.fn.getBoundingRectangle(param.get('corners'), this.canvasSize, this.canvasSize, 6));
        return score;
    };

    /**
     * @method checkLength
     * @param {StudyParam} param
     * @returns {Number}
     */
    Recognizer.prototype.checkLength = function(param) {
        var score = Math.abs(this.stroke.getLength() - param.getLength());
        return score;
    };


    return Recognizer;
});
/**
 * Handles adjustments made when tweening from a user drawn squigs to
 * 
 * @module Skritter
 * @class Mauler
 * @author Joshua McFarland
 */
define('Mauler',[],function() {
    /**
     * @method tweak
     * @param {Bitmap} bitmap
     * @param {Number} bitmapId
     * @returns {Bitmap}
     */
    var tweak = function(bitmap, bitmapId) {
        switch (bitmapId) {

        }
        return bitmap;
    };


    return {
        tweak: tweak
    };
});
// ShortStrawJS, a javascript implementation
// http://www.lab4games.net/zz85/blog/2010/01/21/geeknotes-shortstrawjs-fast-and-simple-corner-detection/
//
// Derived heavily from the AS3 implementation of the ShortStraw Corner Finder (Wolin et al. 2008)
// by Felix Raab. 21 July 2009.
// http://www.betriebsraum.de/blog/2009/07/21/efficient-gesture-recognition-and-corner-finding-in-as3/
//
// Based on the paper ShortStraw: A Simple and Effective Corner Finder for Polylines
// http://srlweb.cs.tamu.edu/srlng_media/content/objects/object-1246294647-350817e4b0870da27e16472ed36475db/Wolin_SBIM08.pdf
//
// For comments on this JS port, email Joshua Koo (zz85nus @ gmail.com)
//
// Released under MIT license: http://www.opensource.org/licenses/mit-license.php

/**
 * @module Skritter
 */
define('Shortstraw',[],function() {
    /**
     * @class Shortstraw
     * @param {Array} points
     * @returns {Array}
     * @constructor
     */
    function Shortstraw(points) {
        var DIAGONAL_INTERVAL = 40; //default 40
        var STRAW_WINDOW = 3; //default 3
        var MEDIAN_THRESHOLD = 0.95; //default 95
        var LINE_THRESHOLD = 0.95; //default 95
        var self = this;

        if (!points)
            return;

        this.distance = function(p1, p2) {
            var dx = p2.x - p1.x;
            var dy = p2.y - p1.y;
            return Math.pow((dx * dx) + (dy * dy), 1 / 2);
        };

        this.pathDistance = function(points, a, b) {
            var d = 0;
            for (var i = a; i < b; i++)
            {
                d += this.distance(points[i], points[i + 1]);
            }
            return d;
        };

        this.isLine = function(points, a, b) {
            var distance = this.distance(points[a], points[b]);
            var pathDistance = this.pathDistance(points, a, b);
            return (distance / pathDistance) > LINE_THRESHOLD;
        };

        this.median = function(values) {
            var s = values.concat();
            s.sort();
            var m;
            if (s.length % 2 === 0) {
                m = s.length / 2;
                return (s[m - 1] + s[m]) / 2;
            } else {
                m = (s.length + 1) / 2;
                return s[m - 1];
            }
        };

        var s = determineResampleSpacing(points);
        var resampled = resamplePoints(points, s);
        var corners = getCorners(resampled);
        var cornerPoints = [];

        for (var i in corners)
        {
            cornerPoints.push(resampled[corners[i]]);
        }

        function determineResampleSpacing(points) {
            var b = boundingBox(points);
            var p1 = {x: b.x, y: b.y};
            var p2 = {x: b.x + b.w, y: b.y + b.h};
            var d = self.distance(p1, p2);

            return d / DIAGONAL_INTERVAL;
        }

        function resamplePoints(points, s) {
            var distance = 0;
            var resampled = [];

            resampled.push(points[0]);

            for (var i = 1; i < points.length; i++)
            {
                var p1 = points[i - 1];
                var p2 = points[i];
                var d2 = self.distance(p1, p2);
                if ((distance + d2) >= s) {
                    var qx = p1.x + ((s - distance) / d2) * (p2.x - p1.x);
                    var qy = p1.y + ((s - distance) / d2) * (p2.y - p1.y);
                    var q = {x: qx, y: qy};
                    resampled.push(q);
                    points.splice(i, 0, q);
                    distance = 0;
                } else {
                    distance += d2;
                }
            }
            resampled.push(points[points.length - 1]);
            return resampled;
        }

        function getCorners(points) {
            var corners = [0];
            var w = STRAW_WINDOW;
            var straws = [];
            var i;

            for (i = w; i < points.length - w; i++)
            {
                straws[i] = (self.distance(points[i - w], points[i + w]));
            }

            var t = self.median(straws) * MEDIAN_THRESHOLD;

            for (i = w; i < points.length - w; i++)
            {
                if (straws[i] < t) {
                    var localMin = Number.POSITIVE_INFINITY;
                    var localMinIndex = i;
                    while (i < straws.length && straws[i] < t)
                    {
                        if (straws[i] < localMin) {
                            localMin = straws[i];
                            localMinIndex = i;
                        }
                        i++;
                    }
                    corners.push(localMinIndex);
                }
            }
            corners.push(points.length - 1);
            corners = postProcessCorners(points, corners, straws);
            return corners;
        }

        function postProcessCorners(points, corners, straws) {
            var go = false;
            var i, c1, c2;

            while (!go)
            {
                go = true;
                for (i = 1; i < corners.length; i++)
                {
                    c1 = corners[i - 1];
                    c2 = corners[i];
                    if (!self.isLine(points, c1, c2)) {
                        var newCorner =
                                halfwayCorner(straws, c1, c2);
                        if (newCorner > c1 && newCorner < c2) {
                            corners.splice(i, 0, newCorner);
                            go = false;
                        }
                    }
                }
            }

            for (i = 1; i < corners.length - 1; i++)
            {
                c1 = corners[i - 1];
                c2 = corners[i + 1];
                if (self.isLine(points, c1, c2)) {
                    corners.splice(i, 1);
                    i--;
                }
            }

            return corners;
        }

        function halfwayCorner(straws, a, b) {
            var quarter = (b - a) / 4;
            var minValue = Number.POSITIVE_INFINITY;
            var minIndex;

            for (var i = a + quarter; i < (b - quarter); i++)
            {
                if (straws[i] < minValue) {
                    minValue = straws[i];
                    minIndex = i;
                }
            }
            return minIndex;
        }

        function boundingBox(points) {
            var minX = Number.POSITIVE_INFINITY;
            var maxX = Number.NEGATIVE_INFINITY;
            var minY = Number.POSITIVE_INFINITY;
            var maxY = Number.NEGATIVE_INFINITY;

            for (var i in points)
            {
                var p = points[i];
                if (p.x < minX) {
                    minX = p.x;
                }
                if (p.x > maxX) {
                    maxX = p.x;
                }
                if (p.y < minY) {
                    minY = p.y;
                }
                if (p.y > maxY) {
                    maxY = p.y;
                }
            }
            return {x: minX, y: minY, w: maxX - minX, h: maxY - minY};
        }
        
        return cornerPoints;
    }

    return Shortstraw;
});
/**
 * @module Skritter
 * @submodule Model
 * @param Mauler
 * @param Shortstraw
 * @author Joshua McFarland 
 */
define('models/CanvasStroke',[
    'Mauler',
    'Shortstraw',
    'backbone',
    'createjs.easel'
], function(Mauler, Shortstraw) {
    /**
     * @class CanvasStroke
     */
    var CanvasStroke = Backbone.Model.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.on('change:points', function(stroke) {
                stroke.set('corners', Shortstraw(_.clone(stroke.get('points'))));
            });
        },
        /**
         * @property {Object} defaults
         */
        defaults: {
            isTweening: false
        },
        /**
         * Returns the angle created by the starting and ending point of the entire object.
         * 
         * @method getAngle
         * @return {Number} description
         */
        getAngle: function() {
            return skritter.fn.getAngle(this.get('points'));
        },
        /**
         * Returns the contained stroke ids.
         * 
         * @method getContainedStrokeIds
         * @return {Array}
         */
        getContainedStrokeIds: function() {
            var ids = [];

            if (!this.has('contains')) {
                ids.push(this.get('id'));
                return ids;
            }

            var contains = this.get('contains');
            var position = this.get('position');
            for (var i in contains)
            {
                var contained = contains[i];
                ids.push(position + '|' + contained);
                ids.push((position + 1) + '|' + contained);
            }

            return ids;
        },
        /**
         * Returns the length of the stroke based on the distance between the corner segments.
         * 
         * @method getLength
         * @return {Number}
         */
        getLength: function() {
            var length = 0;
            for (var i = 0; i < this.get('corners').length - 1; i++)
                length += skritter.fn.getDistance(this.get('corners')[i], this.get('corners')[i + 1]);
            return length;
        },
        /**
         * Returns the sprite transformed to fit the stroke data and canvas size.
         * 
         * @method getInflatedSprite
         * @return {unresolved}
         */
        getInflatedSprite: function() {
            var sprite = this.get('sprite').clone();
            var spriteBounds = sprite.getBounds();
            var data = this.getInflatedData();         
            var ms = sprite.getMatrix();
            
            var sx = data.w / spriteBounds.width;
            var sy = data.h / spriteBounds.height;
            ms.scale(sx, sy);
            ms.translate(-data.w / 2, -data.h / 2);
            ms.rotate(data.rot * Math.PI / 180);
            var t = ms.decompose();

            sprite.setTransform(t.x, t.y, t.scaleX, t.scaleY, t.rotation, t.skewX, t.skewY);
            var finalBounds = sprite.getTransformedBounds();          
            sprite.x += finalBounds.width / 2 + data.x;
            sprite.y += finalBounds.height / 2 + data.y;

            return sprite;
        },
        /**
         * Returns an inflated version of the data based on the canvas size.
         * 
         * @method getInflatedData
         * @return {Object}
         */
        getInflatedData: function() {
            var bounds = this.get('sprite').getBounds();
            var canvasSize = skritter.settings.get('canvasSize');
            var data = this.get('data');
            return {
                n: data[0],
                x: data[1] * canvasSize,
                y: data[2] * canvasSize,
                w: data[3] * canvasSize,
                h: data[4] * canvasSize,
                scaleX: (data[3] * canvasSize) / bounds.width,
                scaleY: (data[4] * canvasSize) / bounds.height,
                rot: -data[5]
            };
        },
        /**
         * Returns an inflated version of the params based on the canvas size.
         * 
         * @method getInflatedParams
         * @return {Array}
         */
        getInflatedParams: function() {
            var params = skritter.data.params.where({bitmapId: this.get('bitmapId')});
            var inflatedParams = [];
            for (var p in params) {
                var param = params[p].clone();
                //inflates the param corners
                var corners = _.cloneDeep(param.get('corners'));
                for (var c in corners) {
                    var inflatedCorner = this.getInflatedSprite().getMatrix().transformPoint(corners[c].x, corners[c].y);
                    corners[c].x = inflatedCorner.x;
                    corners[c].y = inflatedCorner.y;
                }
                param.set('corners', corners);
                //inflates the param deviations
                var deviations = _.cloneDeep(param.get('deviations'));
                for (var d in deviations) {
                    var inflatedDeviation = this.getInflatedSprite().getMatrix().transformPoint(deviations[d].x, deviations[d].y);
                    deviations[d].x = inflatedDeviation.x;
                    deviations[d].y = inflatedDeviation.y;
                }
                param.set('deviations', deviations);
                inflatedParams.push(param);
            }
            return inflatedParams;
        },
        /**
         * Returns an object of the bounding rectangle of the points.
         * 
         * @method getRectangle
         * @return {Object}
         */
        getRectangle: function() {
            var canvasSize = skritter.settings.get('canvasSize');
            return skritter.fn.getBoundingRectangle(this.get('points'), canvasSize, canvasSize, 14);
        },
        /**
         * Returns an object of the bounding rectangle of the corners.
         * 
         * @method getRectangleCorners
         * @return {Object}
         */
        getRectangleCorners: function() {
            var canvasSize = skritter.settings.get('canvasSize');
            return skritter.fn.getBoundingRectangle(this.get('corners'), canvasSize, canvasSize, 14);
        },
        /**
         * Returns the raw sprite without any transformations or positioning.
         * 
         * @method getSprite
         * @returns {Bitmap}
         */
        getSprite: function() {
            return this.get('sprite');
        },
        /**
         * Returns a sprite of the target stroke that has been altered based on the users input.
         * 
         * @method getUserSprite
         * @return {Bitmap}
         */
        getUserSprite: function() {
            var sprite = this.getInflatedSprite();
            var rect = this.getRectangle();
            sprite.x = rect.x;
            sprite.y = rect.y;
            return Mauler.tweak(sprite, this.get('bitmapId'));
        }

    });

    return CanvasStroke;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param CanvasStroke
 * @author Joshua McFarland
 */
define('collections/CanvasCharacter',[
    'models/CanvasStroke',
    'backbone',
    'createjs.easel'
], function(CanvasStroke) {
    /**
     * @class CanvasCharacter
     */
    var CanvasCharacter = Backbone.Collection.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.targets = [];
        },
        /**
         * @property {CanvasStroke} model
         */
        model: CanvasStroke,
        /**
         * @method comparator
         * @param {CanvasStroke} stroke
         * @returns {CanvasStroke}
         */
        comparator: function(stroke) {
            return stroke.get('position');
        },
        /**
         * Checks the character to see if the stroke already exists either directly or indirectly as
         * a contained double stroke.
         * 
         * @method containsStroke
         * @param {CanvasStroke} stroke
         * @returns {Boolean} Returns true if the character contains the stroke
         */
        containsStroke: function(stroke) {
            var strokeId = stroke.get('id');
            var strokeContains = stroke.getContainedStrokeIds();
            for (var i in this.models) {
                var id = this.models[i].get('id');
                var contains = this.models[i].getContainedStrokeIds();
                //directly check for strokes position
                if (strokeId === id) {
                    return true;
                }
                //checks for existing contained strokes
                if (contains) {
                    for (i in contains) {
                        var contained = contains[i];
                        if (_.contains(strokeContains, contained)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        },
        /**
         * Gets a container with all of the child stroke that character is comprised of and
         * returns them in a single container.
         * 
         * @method getCharacterSprite
         * @returns {Container} A container of sprites contained in the character
         */
        getCharacterSprite: function() {
            var spriteContainer = new createjs.Container();
            spriteContainer.name = 'character';
            for (var i in this.models) {
                spriteContainer.addChild(this.models[i].getInflatedSprite().clone());
            }
            return spriteContainer;
        },
        /**
         * The number of strokes in a row starting from the first that are in the correct order.s
         * 
         * @method getConsecutiveStrokeCount
         * @returns {Number}
         */
        getConsecutiveStrokeCount: function() {
            var strokeCount = 0;
            for (var i in this.models) {
                var stroke = this.models[i];
                var expected = strokeCount + 1;
                if (stroke.get('position') !== expected)
                    break;
                strokeCount += (stroke.has('contains')) ? 2 : 1;
            }
            return strokeCount;
        },
        /**
         * Returns a flattened array of the inflated params.
         * 
         * @method getCorners
         * @returns {Array}
         */
        getParams: function() {
            var corners = [];
            for (var i in this.models)
                corners.push(this.models[i].getInflatedParams()[0].get('corners'));
            return _.flatten(corners, true);
        },
        /**
         * Returns the next expected stroke based on the next stroke.
         * 
         * @method getExpectedStroke
         * @param {CanvasStroke} nextStroke
         * @returns {CanvasStroke}
         */
        getExpectedStroke: function(nextStroke) {
            var position;
            //emulate the next stroke in the character to better predict the variation
            var character = this.clone();
            character.add(nextStroke);
            character.targets = this.targets;
            var index = character.getVariationIndex();
            var consecutive = this.getConsecutiveStrokeCount();
            //select a position based on consecutive strokes
            if (consecutive === 0) {
                position = 1;
            } else {
                position = consecutive + 1;
            }
            //find the expected stroke and return it
            var stroke = character.targets[index].findWhere({position: position});
            if (stroke)
                return stroke;
        },
        /**
         * Returns the next stroke based on the predicted variation.
         * 
         * @method getNextStroke
         * @returns {CanvasStroke}
         */
        getNextStroke: function() {
            var index = this.getVariationIndex();
            var position = this.getConsecutiveStrokeCount() + 1;
            var stroke = this.targets[index].findWhere({position: position});
            if (stroke)
                return stroke;
        },
        /**
         * Returns the index of the variation that matches the currently input character.
         * 
         * @method getVariationIndex
         * @returns {Number}
         */
        getVariationIndex: function() {
            var scores = [];
            if (this.targets.length === 0)
                return 0;
            //sizes and sets the scores array
            for (var i = 0; i < this.targets.length; i++)
                scores[i] = 0;
            //score each variation based on if it exists in the character
            for (var a in this.models) {
                var strokeId = this.models[a].get('id');
                for (var b in this.targets) {
                    var variation = this.targets[b];
                    if (variation.findWhere({id: strokeId}))
                        scores[b]++;
                }
            }
            return scores.indexOf(Math.max.apply(Math, scores));
        },
        /**
         * Returns a count of the total number of strokes in the character including the broken
         * down double strokes.
         * 
         * @method getStrokeCount
         * @param {Boolean} ignoreTweening
         * @returns {Number} The total number of stroke in the character
         */
        getStrokeCount: function(ignoreTweening) {
            var strokeCount = 0;
            for (var i in this.models) {
                var stroke = this.models[i];
                if (ignoreTweening) {
                    if (!stroke.get('isTweening')) {
                        if (stroke.has('contains')) {
                            strokeCount += stroke.get('contains').length;
                        } else {
                            strokeCount++;
                        }
                    }
                } else {
                    if (stroke.has('contains')) {
                        strokeCount += stroke.get('contains').length;
                    } else {
                        strokeCount++;
                    }

                }
            }
            return strokeCount;
        },
        /**
         * Returns the stroke highest possible stroke count out of all of the targets.
         * 
         * @method getTargetStrokeCount
         * @returns {Number}
         */
        getTargetStrokeCount: function() {
            var strokeCount = 0;
            for (var a in this.targets)
            {
                if (this.targets[a].getStrokeCount() > strokeCount) {
                    strokeCount = this.targets[a].getStrokeCount();
                }
            }
            return strokeCount;
        },
        /**
         * Returns true if the character contains all of the completed strokes.
         * 
         * @method isComplete
         * @returns {Boolean}
         */
        isComplete: function() {
            if (this.getStrokeCount() >= this.getTargetStrokeCount())
                return true;
            return false;
        }
    });

    return CanvasCharacter;
});
/*!
* @license TweenJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2011-2013 gskinner.com, inc.
*
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
*/

/**!
 * SoundJS FlashPlugin also includes swfobject (http://code.google.com/p/swfobject/)
 */

this.createjs=this.createjs||{},function(){var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype;b.type=null,b.target=null,b.currentTarget=null,b.eventPhase=0,b.bubbles=!1,b.cancelable=!1,b.timeStamp=0,b.defaultPrevented=!1,b.propagationStopped=!1,b.immediatePropagationStopped=!1,b.removed=!1,b.initialize=function(a,b,c){this.type=a,this.bubbles=b,this.cancelable=c,this.timeStamp=(new Date).getTime()},b.preventDefault=function(){this.defaultPrevented=!0},b.stopPropagation=function(){this.propagationStopped=!0},b.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},b.remove=function(){this.removed=!0},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable)},b.toString=function(){return"[Event (type="+this.type+")]"},createjs.Event=a}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype;a.initialize=function(a){a.addEventListener=b.addEventListener,a.on=b.on,a.removeEventListener=a.off=b.removeEventListener,a.removeAllEventListeners=b.removeAllEventListeners,a.hasEventListener=b.hasEventListener,a.dispatchEvent=b.dispatchEvent,a._dispatchEvent=b._dispatchEvent},b._listeners=null,b._captureListeners=null,b.initialize=function(){},b.addEventListener=function(a,b,c){var d;d=c?this._captureListeners=this._captureListeners||{}:this._listeners=this._listeners||{};var e=d[a];return e&&this.removeEventListener(a,b,c),e=d[a],e?e.push(b):d[a]=[b],b},b.on=function(a,b,c,d,e,f){return b.handleEvent&&(c=c||b,b=b.handleEvent),c=c||this,this.addEventListener(a,function(a){b.call(c,a,e),d&&a.remove()},f)},b.removeEventListener=function(a,b,c){var d=c?this._captureListeners:this._listeners;if(d){var e=d[a];if(e)for(var f=0,g=e.length;g>f;f++)if(e[f]==b){1==g?delete d[a]:e.splice(f,1);break}}},b.off=b.removeEventListener,b.removeAllEventListeners=function(a){a?(this._listeners&&delete this._listeners[a],this._captureListeners&&delete this._captureListeners[a]):this._listeners=this._captureListeners=null},b.dispatchEvent=function(a,b){if("string"==typeof a){var c=this._listeners;if(!c||!c[a])return!1;a=new createjs.Event(a)}if(a.target=b||this,a.bubbles&&this.parent){for(var d=this,e=[d];d.parent;)e.push(d=d.parent);var f,g=e.length;for(f=g-1;f>=0&&!a.propagationStopped;f--)e[f]._dispatchEvent(a,1+(0==f));for(f=1;g>f&&!a.propagationStopped;f++)e[f]._dispatchEvent(a,3)}else this._dispatchEvent(a,2);return a.defaultPrevented},b.hasEventListener=function(a){var b=this._listeners,c=this._captureListeners;return!!(b&&b[a]||c&&c[a])},b.toString=function(){return"[EventDispatcher]"},b._dispatchEvent=function(a,b){var c,d=1==b?this._captureListeners:this._listeners;if(a&&d){var e=d[a.type];if(!e||!(c=e.length))return;a.currentTarget=this,a.eventPhase=b,a.removed=!1,e=e.slice();for(var f=0;c>f&&!a.immediatePropagationStopped;f++){var g=e[f];g.handleEvent?g.handleEvent(a):g(a),a.removed&&(this.off(a.type,g,1==b),a.removed=!1)}}},createjs.EventDispatcher=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.EventDispatcher;a.NONE=0,a.LOOP=1,a.REVERSE=2,a.IGNORE={},a._tweens=[],a._plugins={},a.get=function(b,c,d,e){return e&&a.removeTweens(b),new a(b,c,d)},a.tick=function(b,c){for(var d=a._tweens.slice(),e=d.length-1;e>=0;e--){var f=d[e];c&&!f.ignoreGlobalPause||f._paused||f.tick(f._useTicks?1:b)}},a.handleEvent=function(a){"tick"==a.type&&this.tick(a.delta,a.paused)},a.removeTweens=function(b){if(b.tweenjs_count){for(var c=a._tweens,d=c.length-1;d>=0;d--)c[d]._target==b&&(c[d]._paused=!0,c.splice(d,1));b.tweenjs_count=0}},a.removeAllTweens=function(){for(var b=a._tweens,c=0,d=b.length;d>c;c++){var e=b[c];e.paused=!0,e.target.tweenjs_count=0}b.length=0},a.hasActiveTweens=function(b){return b?b.tweenjs_count:a._tweens&&!!a._tweens.length},a.installPlugin=function(b,c){var d=b.priority;null==d&&(b.priority=d=0);for(var e=0,f=c.length,g=a._plugins;f>e;e++){var h=c[e];if(g[h]){for(var i=g[h],j=0,k=i.length;k>j&&!(d<i[j].priority);j++);g[h].splice(j,0,b)}else g[h]=[b]}},a._register=function(b,c){var d=b._target,e=a._tweens;if(c)d&&(d.tweenjs_count=d.tweenjs_count?d.tweenjs_count+1:1),e.push(b),!a._inited&&createjs.Ticker&&(createjs.Ticker.addEventListener("tick",a),a._inited=!0);else{d&&d.tweenjs_count--;for(var f=e.length;f--;)if(e[f]==b)return e.splice(f,1),void 0}},b.ignoreGlobalPause=!1,b.loop=!1,b.duration=0,b.pluginData=null,b.target=null,b.position=null,b.passive=!1,b._paused=!1,b._curQueueProps=null,b._initQueueProps=null,b._steps=null,b._actions=null,b._prevPosition=0,b._stepPosition=0,b._prevPos=-1,b._target=null,b._useTicks=!1,b._inited=!1,b.initialize=function(b,c,d){this.target=this._target=b,c&&(this._useTicks=c.useTicks,this.ignoreGlobalPause=c.ignoreGlobalPause,this.loop=c.loop,c.onChange&&this.addEventListener("change",c.onChange),c.override&&a.removeTweens(b)),this.pluginData=d||{},this._curQueueProps={},this._initQueueProps={},this._steps=[],this._actions=[],c&&c.paused?this._paused=!0:a._register(this,!0),c&&null!=c.position&&this.setPosition(c.position,a.NONE)},b.wait=function(a,b){if(null==a||0>=a)return this;var c=this._cloneProps(this._curQueueProps);return this._addStep({d:a,p0:c,e:this._linearEase,p1:c,v:b})},b.to=function(a,b,c){return(isNaN(b)||0>b)&&(b=0),this._addStep({d:b||0,p0:this._cloneProps(this._curQueueProps),e:c,p1:this._cloneProps(this._appendQueueProps(a))})},b.call=function(a,b,c){return this._addAction({f:a,p:b?b:[this],o:c?c:this._target})},b.set=function(a,b){return this._addAction({f:this._set,o:this,p:[a,b?b:this._target]})},b.play=function(a){return a||(a=this),this.call(a.setPaused,[!1],a)},b.pause=function(a){return a||(a=this),this.call(a.setPaused,[!0],a)},b.setPosition=function(a,b){0>a&&(a=0),null==b&&(b=1);var c=a,d=!1;if(c>=this.duration&&(this.loop?c%=this.duration:(c=this.duration,d=!0)),c==this._prevPos)return d;var e=this._prevPos;if(this.position=this._prevPos=c,this._prevPosition=a,this._target)if(d)this._updateTargetProps(null,1);else if(this._steps.length>0){for(var f=0,g=this._steps.length;g>f&&!(this._steps[f].t>c);f++);var h=this._steps[f-1];this._updateTargetProps(h,(this._stepPosition=c-h.t)/h.d)}return 0!=b&&this._actions.length>0&&(this._useTicks?this._runActions(c,c):1==b&&e>c?(e!=this.duration&&this._runActions(e,this.duration),this._runActions(0,c,!0)):this._runActions(e,c)),d&&this.setPaused(!0),this.dispatchEvent("change"),d},b.tick=function(a){this._paused||this.setPosition(this._prevPosition+a)},b.setPaused=function(b){return this._paused=!!b,a._register(this,!b),this},b.w=b.wait,b.t=b.to,b.c=b.call,b.s=b.set,b.toString=function(){return"[Tween]"},b.clone=function(){throw"Tween can not be cloned."},b._updateTargetProps=function(b,c){var d,e,f,g,h,i;if(b||1!=c){if(this.passive=!!b.v,this.passive)return;b.e&&(c=b.e(c,0,1,1)),d=b.p0,e=b.p1}else this.passive=!1,d=e=this._curQueueProps;for(var j in this._initQueueProps){null==(g=d[j])&&(d[j]=g=this._initQueueProps[j]),null==(h=e[j])&&(e[j]=h=g),f=g==h||0==c||1==c||"number"!=typeof g?1==c?h:g:g+(h-g)*c;var k=!1;if(i=a._plugins[j])for(var l=0,m=i.length;m>l;l++){var n=i[l].tween(this,j,f,d,e,c,!!b&&d==e,!b);n==a.IGNORE?k=!0:f=n}k||(this._target[j]=f)}},b._runActions=function(a,b,c){var d=a,e=b,f=-1,g=this._actions.length,h=1;for(a>b&&(d=b,e=a,f=g,g=h=-1);(f+=h)!=g;){var i=this._actions[f],j=i.t;(j==e||j>d&&e>j||c&&j==a)&&i.f.apply(i.o,i.p)}},b._appendQueueProps=function(b){var c,d,e,f,g;for(var h in b)if(void 0===this._initQueueProps[h]){if(d=this._target[h],c=a._plugins[h])for(e=0,f=c.length;f>e;e++)d=c[e].init(this,h,d);this._initQueueProps[h]=this._curQueueProps[h]=void 0===d?null:d}else d=this._curQueueProps[h];for(var h in b){if(d=this._curQueueProps[h],c=a._plugins[h])for(g=g||{},e=0,f=c.length;f>e;e++)c[e].step&&c[e].step(this,h,d,b[h],g);this._curQueueProps[h]=b[h]}return g&&this._appendQueueProps(g),this._curQueueProps},b._cloneProps=function(a){var b={};for(var c in a)b[c]=a[c];return b},b._addStep=function(a){return a.d>0&&(this._steps.push(a),a.t=this.duration,this.duration+=a.d),this},b._addAction=function(a){return a.t=this.duration,this._actions.push(a),this},b._set=function(a,b){for(var c in a)b[c]=a[c]},createjs.Tween=a}(),this.createjs=this.createjs||{},function(){var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.EventDispatcher;b.ignoreGlobalPause=!1,b.duration=0,b.loop=!1,b.position=null,b._paused=!1,b._tweens=null,b._labels=null,b._labelList=null,b._prevPosition=0,b._prevPos=-1,b._useTicks=!1,b.initialize=function(a,b,c){this._tweens=[],c&&(this._useTicks=c.useTicks,this.loop=c.loop,this.ignoreGlobalPause=c.ignoreGlobalPause,c.onChange&&this.addEventListener("change",c.onChange)),a&&this.addTween.apply(this,a),this.setLabels(b),c&&c.paused?this._paused=!0:createjs.Tween._register(this,!0),c&&null!=c.position&&this.setPosition(c.position,createjs.Tween.NONE)},b.addTween=function(a){var b=arguments.length;if(b>1){for(var c=0;b>c;c++)this.addTween(arguments[c]);return arguments[0]}return 0==b?null:(this.removeTween(a),this._tweens.push(a),a.setPaused(!0),a._paused=!1,a._useTicks=this._useTicks,a.duration>this.duration&&(this.duration=a.duration),this._prevPos>=0&&a.setPosition(this._prevPos,createjs.Tween.NONE),a)},b.removeTween=function(a){var b=arguments.length;if(b>1){for(var c=!0,d=0;b>d;d++)c=c&&this.removeTween(arguments[d]);return c}if(0==b)return!1;for(var e=this._tweens,d=e.length;d--;)if(e[d]==a)return e.splice(d,1),a.duration>=this.duration&&this.updateDuration(),!0;return!1},b.addLabel=function(a,b){this._labels[a]=b;var c=this._labelList;if(c){for(var d=0,e=c.length;e>d&&!(b<c[d].position);d++);c.splice(d,0,{label:a,position:b})}},b.setLabels=function(a){this._labels=a?a:{}},b.getLabels=function(){var a=this._labelList;if(!a){a=this._labelList=[];var b=this._labels;for(var c in b)a.push({label:c,position:b[c]});a.sort(function(a,b){return a.position-b.position})}return a},b.getCurrentLabel=function(){var a=this.getLabels(),b=this.position,c=a.length;if(c){for(var d=0;c>d&&!(b<a[d].position);d++);return 0==d?null:a[d-1].label}return null},b.gotoAndPlay=function(a){this.setPaused(!1),this._goto(a)},b.gotoAndStop=function(a){this.setPaused(!0),this._goto(a)},b.setPosition=function(a,b){0>a&&(a=0);var c=this.loop?a%this.duration:a,d=!this.loop&&a>=this.duration;if(c==this._prevPos)return d;this._prevPosition=a,this.position=this._prevPos=c;for(var e=0,f=this._tweens.length;f>e;e++)if(this._tweens[e].setPosition(c,b),c!=this._prevPos)return!1;return d&&this.setPaused(!0),this.dispatchEvent("change"),d},b.setPaused=function(a){this._paused=!!a,createjs.Tween._register(this,!a)},b.updateDuration=function(){this.duration=0;for(var a=0,b=this._tweens.length;b>a;a++){var c=this._tweens[a];c.duration>this.duration&&(this.duration=c.duration)}},b.tick=function(a){this.setPosition(this._prevPosition+a)},b.resolve=function(a){var b=parseFloat(a);return isNaN(b)&&(b=this._labels[a]),b},b.toString=function(){return"[Timeline]"},b.clone=function(){throw"Timeline can not be cloned."},b._goto=function(a){var b=this.resolve(a);null!=b&&this.setPosition(b)},createjs.Timeline=a}(),this.createjs=this.createjs||{},function(){var a=function(){throw"Ease cannot be instantiated."};a.linear=function(a){return a},a.none=a.linear,a.get=function(a){return-1>a&&(a=-1),a>1&&(a=1),function(b){return 0==a?b:0>a?b*(b*-a+1+a):b*((2-b)*a+(1-a))}},a.getPowIn=function(a){return function(b){return Math.pow(b,a)}},a.getPowOut=function(a){return function(b){return 1-Math.pow(1-b,a)}},a.getPowInOut=function(a){return function(b){return(b*=2)<1?.5*Math.pow(b,a):1-.5*Math.abs(Math.pow(2-b,a))}},a.quadIn=a.getPowIn(2),a.quadOut=a.getPowOut(2),a.quadInOut=a.getPowInOut(2),a.cubicIn=a.getPowIn(3),a.cubicOut=a.getPowOut(3),a.cubicInOut=a.getPowInOut(3),a.quartIn=a.getPowIn(4),a.quartOut=a.getPowOut(4),a.quartInOut=a.getPowInOut(4),a.quintIn=a.getPowIn(5),a.quintOut=a.getPowOut(5),a.quintInOut=a.getPowInOut(5),a.sineIn=function(a){return 1-Math.cos(a*Math.PI/2)},a.sineOut=function(a){return Math.sin(a*Math.PI/2)},a.sineInOut=function(a){return-.5*(Math.cos(Math.PI*a)-1)},a.getBackIn=function(a){return function(b){return b*b*((a+1)*b-a)}},a.backIn=a.getBackIn(1.7),a.getBackOut=function(a){return function(b){return--b*b*((a+1)*b+a)+1}},a.backOut=a.getBackOut(1.7),a.getBackInOut=function(a){return a*=1.525,function(b){return(b*=2)<1?.5*b*b*((a+1)*b-a):.5*((b-=2)*b*((a+1)*b+a)+2)}},a.backInOut=a.getBackInOut(1.7),a.circIn=function(a){return-(Math.sqrt(1-a*a)-1)},a.circOut=function(a){return Math.sqrt(1- --a*a)},a.circInOut=function(a){return(a*=2)<1?-.5*(Math.sqrt(1-a*a)-1):.5*(Math.sqrt(1-(a-=2)*a)+1)},a.bounceIn=function(b){return 1-a.bounceOut(1-b)},a.bounceOut=function(a){return 1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375},a.bounceInOut=function(b){return.5>b?.5*a.bounceIn(2*b):.5*a.bounceOut(2*b-1)+.5},a.getElasticIn=function(a,b){var c=2*Math.PI;return function(d){if(0==d||1==d)return d;var e=b/c*Math.asin(1/a);return-(a*Math.pow(2,10*(d-=1))*Math.sin((d-e)*c/b))}},a.elasticIn=a.getElasticIn(1,.3),a.getElasticOut=function(a,b){var c=2*Math.PI;return function(d){if(0==d||1==d)return d;var e=b/c*Math.asin(1/a);return a*Math.pow(2,-10*d)*Math.sin((d-e)*c/b)+1}},a.elasticOut=a.getElasticOut(1,.3),a.getElasticInOut=function(a,b){var c=2*Math.PI;return function(d){var e=b/c*Math.asin(1/a);return(d*=2)<1?-.5*a*Math.pow(2,10*(d-=1))*Math.sin((d-e)*c/b):.5*a*Math.pow(2,-10*(d-=1))*Math.sin((d-e)*c/b)+1}},a.elasticInOut=a.getElasticInOut(1,.3*1.5),createjs.Ease=a}(),this.createjs=this.createjs||{},function(){var a=function(){throw"MotionGuidePlugin cannot be instantiated."};a.priority=0,a._rotOffS,a._rotOffE,a._rotNormS,a._rotNormE,a.install=function(){return createjs.Tween.installPlugin(a,["guide","x","y","rotation"]),createjs.Tween.IGNORE},a.init=function(a,b,c){var d=a.target;return d.hasOwnProperty("x")||(d.x=0),d.hasOwnProperty("y")||(d.y=0),d.hasOwnProperty("rotation")||(d.rotation=0),"rotation"==b&&(a.__needsRot=!0),"guide"==b?null:c},a.step=function(b,c,d,e,f){if("rotation"==c&&(b.__rotGlobalS=d,b.__rotGlobalE=e,a.testRotData(b,f)),"guide"!=c)return e;var g,h=e;h.hasOwnProperty("path")||(h.path=[]);var i=h.path;if(h.hasOwnProperty("end")||(h.end=1),h.hasOwnProperty("start")||(h.start=d&&d.hasOwnProperty("end")&&d.path===i?d.end:0),h.hasOwnProperty("_segments")&&h._length)return e;var j=i.length,k=10;if(!(j>=6&&0==(j-2)%4))throw"invalid 'path' data, please see documentation for valid paths";h._segments=[],h._length=0;for(var l=2;j>l;l+=4){for(var m,n,o=i[l-2],p=i[l-1],q=i[l+0],r=i[l+1],s=i[l+2],t=i[l+3],u=o,v=p,w=0,x=[],y=1;k>=y;y++){var z=y/k,A=1-z;m=A*A*o+2*A*z*q+z*z*s,n=A*A*p+2*A*z*r+z*z*t,w+=x[x.push(Math.sqrt((g=m-u)*g+(g=n-v)*g))-1],u=m,v=n}h._segments.push(w),h._segments.push(x),h._length+=w}g=h.orient,h.orient=!0;var B={};return a.calc(h,h.start,B),b.__rotPathS=Number(B.rotation.toFixed(5)),a.calc(h,h.end,B),b.__rotPathE=Number(B.rotation.toFixed(5)),h.orient=!1,a.calc(h,h.end,f),h.orient=g,h.orient?(b.__guideData=h,a.testRotData(b,f),e):e},a.testRotData=function(a,b){if(void 0===a.__rotGlobalS||void 0===a.__rotGlobalE){if(a.__needsRot)return;a.__rotGlobalS=a.__rotGlobalE=void 0!==a._curQueueProps.rotation?a._curQueueProps.rotation:b.rotation=a.target.rotation||0}if(void 0!==a.__guideData){var c=a.__guideData,d=a.__rotGlobalE-a.__rotGlobalS,e=a.__rotPathE-a.__rotPathS,f=d-e;if("auto"==c.orient)f>180?f-=360:-180>f&&(f+=360);else if("cw"==c.orient){for(;0>f;)f+=360;0==f&&d>0&&180!=d&&(f+=360)}else if("ccw"==c.orient){for(f=d-(e>180?360-e:e);f>0;)f-=360;0==f&&0>d&&-180!=d&&(f-=360)}c.rotDelta=f,c.rotOffS=a.__rotGlobalS-a.__rotPathS,a.__rotGlobalS=a.__rotGlobalE=a.__guideData=a.__needsRot=void 0}},a.tween=function(b,c,d,e,f,g,h){var i=f.guide;if(void 0==i||i===e.guide)return d;if(i.lastRatio!=g){var j=(i.end-i.start)*(h?i.end:g)+i.start;switch(a.calc(i,j,b.target),i.orient){case"cw":case"ccw":case"auto":b.target.rotation+=i.rotOffS+i.rotDelta*g;break;case"fixed":default:b.target.rotation+=i.rotOffS}i.lastRatio=g}return"rotation"!=c||i.orient&&"false"!=i.orient?b.target[c]:d},a.calc=function(b,c,d){void 0==b._segments&&a.validate(b),void 0==d&&(d={x:0,y:0,rotation:0});for(var e=b._segments,f=b.path,g=b._length*c,h=e.length-2,i=0;g>e[i]&&h>i;)g-=e[i],i+=2;var j=e[i+1],k=0;for(h=j.length-1;g>j[k]&&h>k;)g-=j[k],k++;var l=k/++h+g/(h*j[k]);i=2*i+2;var m=1-l;return d.x=m*m*f[i-2]+2*m*l*f[i+0]+l*l*f[i+2],d.y=m*m*f[i-1]+2*m*l*f[i+1]+l*l*f[i+3],b.orient&&(d.rotation=57.2957795*Math.atan2((f[i+1]-f[i-1])*m+(f[i+3]-f[i+1])*l,(f[i+0]-f[i-2])*m+(f[i+2]-f[i+0])*l)),d},createjs.MotionGuidePlugin=a}(),this.createjs=this.createjs||{},function(){var a=createjs.TweenJS=createjs.TweenJS||{};a.version="NEXT",a.buildDate="Wed, 25 Sep 2013 17:00:29 GMT"}();
define("createjs.tween", function(){});

/**
 * @module Skritter
 * @submodule Component
 * @author Joshua McFarland
 */
define('components/Canvas',[
    'backbone',
    'createjs.easel',
    'createjs.tween'
], function() {
    /**
     * @class Canvas
     */
    var Canvas = Backbone.View.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            Canvas.grid = false;
            Canvas.gridColor = 'grey';
            Canvas.gridLineWidth = 1;
            Canvas.points = [];
            Canvas.size = skritter.settings.get('canvasSize');
            Canvas.strokeColor = '#000000';
            Canvas.strokeSize = 12;
            Canvas.strokeCapStyle = 'round';
            Canvas.strokeJointStyle = 'round';
            Canvas.squigColor = '#000000';
            Canvas.textColor = 'orange';
            Canvas.textFont = '12px Arial';
            Canvas.element = this.initElement();
            Canvas.stage = this.initStage();
            createjs.Touch.enable(Canvas.stage);
            createjs.Ticker.addEventListener('tick', this.tick);
            this.initListeners();
        },
        /**
         * @method render
         * @returns {Canvas}
         */
        render: function() {
            this.$el.html(Canvas.element);
            this.createLayer('grid');
            this.createLayer('input');
            if (Canvas.grid)
                this.drawGrid('grid');
            //ISSUE #18: drawing a dummy sprite fixes the delayed tween problem in Chrome
            //it needs to be a clone otherwise the sprite will globally have the alpha set
            var dummySprite = skritter.assets.getStroke(0);
            dummySprite.alpha = 0.0001;
            Canvas.stage.addChildAt(dummySprite, 0);

            return this;
        },
        /**
         * @method initElement
         * @returns {DOMElement}
         */
        initElement: function() {
            var element = document.createElement('canvas');
            element.setAttribute('id', 'prompt-canvas');
            element.setAttribute('width', Canvas.size);
            element.setAttribute('height', Canvas.size);
            return element;
        },
        /**
         * @method initListeners
         */
        initListeners: function() {
            this.listenTo(skritter.settings, 'resize', this.resize);
        },
        /**
         * @method initStage
         * @returns {Stage}
         */
        initStage: function() {
            var stage = new createjs.Stage(Canvas.element);
            stage.enableDOMEvents(true);
            stage.autoClear = true;
            return stage;
        },
        /**
         * @method clear
         * @param {String} layerName
         * @returns {Container}
         */
        clear: function(layerName) {
            var layer;
            if (layerName) {
                layer = this.getLayer(layerName);
                layer.removeAllChildren();
                layer.uncache();
                return layer;
            }
            var layers = this.getLayers();
            for (var i in layers) {
                layers[i].removeAllChildren();
                layers[i].uncache();
            }
            return Canvas.stage;
        },
        /**
         * @method createLayer
         * @param {String} name
         * @returns {Container}
         */
        createLayer: function(name) {
            var layer = new createjs.Container();
            layer.name = 'layer-' + name;
            Canvas.stage.addChild(layer);
            return layer;
        },
        /**
         * @method disableGrid
         * @returns {undefined}
         */
        disableGrid: function() {
            Canvas.grid = false;
        },
        /**
         * Disables all touch input on the canvas. This is most commonly used when a user has
         * already completed a prompt and it needs grading.
         * 
         * @method disableInput
         */
        disableInput: function() {
            Canvas.stage.removeAllEventListeners();
        },
        /**
         * @method drawCharacter
         * @param {Bitmap} bitmap
         * @param {String} layerName
         * @param {Number} alpha
         * @returns {Bitmap}
         */
        drawCharacter: function(bitmap, layerName, alpha) {
            var layer = this.getLayer(layerName);
            if (layer.getChildByName('character'))
                layer.removeChild(layer.getChildByName('character'));
            if (alpha) {
                bitmap.filters = [new createjs.ColorFilter(0, 0, 0, alpha, 0, 0, 0, 0)];
                bitmap.cache(0, 0, Canvas.size, Canvas.size);
            }
            layer.addChild(bitmap);
            return bitmap;
        },
        /**
         * Draws the character to the background using the font rather than assembling
         * the character strokes.
         * 
         * @param {String} character
         * @param {String} font
         * @param {String} layerName
         * @param {Number} alpha
         * @param {String} color
         * @returns {Container}
         */
        drawCharacterFromFont: function(character, font, layerName, alpha, color) {
            var text = new createjs.Text(character, Canvas.size + 'px ' + font, 'black');
            if (alpha)
                text.alpha = alpha;
            if (color)
                text.color = color;
            return this.getLayer(layerName).addChild(text);
        },
        /**
         * @method drawGrid
         * @param {String} layerName
         * @param {String} color
         * @returns {Container}
         */
        drawGrid: function(layerName, color) {
            color = (color) ? color : Canvas.gridColor;
            var grid = new createjs.Shape();
            var layer = this.getLayer(layerName);
            if (layer.getChildByName('grid'))
                layer.removeChild(layer.getChildByName('grid'));
            grid.name = 'grid';
            grid.graphics.beginStroke(color).setStrokeStyle(Canvas.gridLineWidth, Canvas.strokeCapStyle, Canvas.strokeJointStyle);
            grid.graphics.moveTo(Canvas.size / 2, 0).lineTo(Canvas.size / 2, Canvas.size);
            grid.graphics.moveTo(0, Canvas.size / 2).lineTo(Canvas.size, Canvas.size / 2);
            grid.graphics.moveTo(0, 0).lineTo(Canvas.size, Canvas.size);
            grid.graphics.moveTo(Canvas.size, 0).lineTo(0, Canvas.size);
            layer.addChild(grid);
            grid.graphics.endStroke();
            return grid;
        },
        /**
         * @method drawParam
         * @param {StudyParam} param
         * @param {String} layerName
         * @returns {Shape}
         */
        drawParam: function(param, layerName) {
            var circle;
            var layer = this.getLayer(layerName);
            var corners = param.get('corners');
            for (var c in corners) {
                var corner = corners[c];
                circle = new createjs.Shape();
                circle.graphics.beginFill('orange').drawCircle(corner.x, corner.y, 5);
                layer.addChild(circle);
            }
            var deviations = param.get('deviations');
            for (var d in deviations) {
                var deviation = deviations[d];
                circle = new createjs.Shape();
                circle.graphics.beginFill('purple').drawCircle(deviation.x, deviation.y, 5);
                layer.addChild(circle);
            }
            return circle;
        },
        /**
         * @method drawPhantomStroke
         * @param {Bitmap} bitmap
         * @param {String} layerName
         * @param {Function} callback
         * @returns {Bitmap}
         */
        drawPhantomStroke: function(bitmap, layerName, callback) {
            bitmap.filters = [new createjs.ColorFilter(0, 0, 0, 1, 135, 206, 250, 0)];
            bitmap.cache(0, 0, Canvas.size, Canvas.size);
            var layer = this.getLayer(layerName);
            layer.addChild(bitmap);
            createjs.Tween.get(bitmap).wait(500).to({alpha: 0}, 1000).call(function() {
                layer.removeChild(bitmap);
                if (typeof callback === 'function')
                    callback();
            });
            return bitmap;
        },
        /**
         * @method drawPoints
         * @param {type} points
         * @param {type} layerName
         */
        drawPoints: function(points, layerName) {
            var layer = this.getLayer(layerName);
            for (var i in points) {
                var point = new createjs.Shape(new createjs.Graphics().beginFill('blue').drawCircle(points[i].x, points[i].y, 10));
                layer.addChild(point);
            }
        },
        /**
         * @method drawSquig
         * @param {Array} points
         * @param {String} layerName
         * @param {Number} alpha
         * @returns {Shape}
         */
        drawSquig: function(points, layerName, alpha) {
            var marker = new createjs.Shape();
            var oldPt, oldMidPt;
            oldPt = new createjs.Point(points[0].x, points[0].y);
            oldMidPt = oldPt;
            marker.graphics.beginStroke(Canvas.squigColor).setStrokeStyle(Canvas.strokeSize, Canvas.strokeCapStyle, Canvas.strokeJointStyle);
            for (var i in points) {
                var point = new createjs.Point(points[i].x, points[i].y);
                var midPt = new createjs.Point(oldPt.x + point.x >> 1, oldPt.y + point.y >> 1);
                marker.graphics
                        .moveTo(midPt.x, midPt.y)
                        .curveTo(oldPt.x, oldPt.y, oldMidPt.x, oldMidPt.y);
                oldPt.x = point.x;
                oldPt.y = point.y;
                oldMidPt.x = midPt.x;
                oldMidPt.y = midPt.y;
            }
            marker.graphics
                    .moveTo(points[points.length - 1].x, points[points.length - 1].y)
                    .curveTo(oldPt.x, oldPt.y, oldMidPt.x, oldMidPt.y);
            if (alpha)
                marker.alpha = alpha;
            marker.graphics.endStroke();
            this.getLayer(layerName).addChild(marker);

            return marker;
        },
        /**
         * @method drawStroke
         * @param {Bitmap} bitmap
         * @param {String} layerName
         * @param {Number} alpha
         * @returns {Bitmap}
         */
        drawStroke: function(bitmap, layerName, alpha) {
            bitmap = this.getLayer(layerName).addChildAt(bitmap, 0);
            if (alpha)
                bitmap.alpha = alpha;
            return bitmap;
        },
        /**
         * Draws text to the canvas on the message layer. If a position isn't specified then
         * it defaults to the bottom center of the canvas.
         * 
         * @method drawText
         * @param {String} text
         * @param {String} layerName
         * @param {String} color
         * @param {String} font
         * @param {Number} x
         * @param {Number} y
         * @returns {Text}
         */
        drawText: function(text, layerName, color, font, x, y) {
            font = (font) ? font : Canvas.textFont;
            color = (color) ? color : Canvas.textColor;
            text = new createjs.Text(text, font, color);
            var layer = this.getLayer(layerName);
            if (x) {
                text.x = x;
            } else {
                text.x = (Canvas.size / 2) - (text.getMeasuredWidth() / 2);
            }
            if (y) {
                text.y = y;
            } else {
                text.y = Canvas.size * 0.9;
            }
            layer.addChild(text);
            createjs.Tween.get(text).wait(2000).to({alpha: 0}, 500).call(function() {
                layer.removeChild(text);
            });
            return text;
        },
        /**
         * @method drawTweenedStroke
         * @param {Bitmap} fromBitmap
         * @param {Bitmap} toBitmap
         * @param {String} layerName
         * @param {Function} callback
         * @returns {Bitmap}
         */
        drawTweenedStroke: function(fromBitmap, toBitmap, layerName, callback) {
            var layer = this.getLayer(layerName);
            layer.addChildAt(fromBitmap, 0);
            createjs.Tween.get(fromBitmap).to(toBitmap, 300, createjs.Ease.sineOut).call(function() {
                if (typeof callback === 'function')
                    callback();
            });
            return toBitmap;
        },
        /**
         * @method fadeLayer
         * @param {String} layerName
         * @param {Function} callback
         * @returns {Container}
         */
        fadeLayer: function(layerName, callback) {
            var layer = this.getLayer(layerName);
            if (layer.getNumChildren() > 0) {
                createjs.Tween.get(layer).to({alpha: 0}, 750).call(function() {
                    layer.removeAllChildren();
                    layer.alpha = 1.0;
                    if (typeof callback === 'function')
                        callback(layer);
                });
            }
            return layer;
        },
        /**
         * @method filterLayerColor
         * @param {String} layerName
         * @param {ColorFilter} filter
         * @returns {Container}
         */
        filterLayerColor: function(layerName, filter) {
            var layer = this.getLayer(layerName);
            layer.filters = [filter];
            layer.cache(0, 0, Canvas.size, Canvas.size);
            return layer;
        },
        /**
         * @method getLayer
         * @param {String} name
         * @returns {Container}
         */
        getLayer: function(name) {
            return Canvas.stage.getChildByName('layer-' + name);
        },
        /**
         * @method getLayers
         * @returns {Array}
         */
        getLayers: function() {
            var layers = [];
            for (var i in Canvas.stage.children) {
                var child = Canvas.stage.children[i];
                if (child.name && child.name.indexOf('layer-') > -1)
                    layers.push(Canvas.stage.children[i]);
            }
            return layers;
        },
        /**
         * @method enableGrid
         * @returns {undefined}
         */
        enableGrid: function() {
            Canvas.grid = true;
        },
        /**
         * Enables touch input and drawing on the canvas. It also handles the immediate ink
         * traced by the finger.
         * 
         * @method enableInput
         */
        enableInput: function() {
            var self = this;
            var layer = this.getLayer('input');
            var oldPt, oldMidPt, points;
            var stage = Canvas.stage;
            var marker = new createjs.Shape();
            layer.addChild(marker);
            var down = function() {
                points = [];
                oldPt = new createjs.Point(stage.mouseX, stage.mouseY);
                self.triggerMouseDown(oldPt);
                oldMidPt = oldPt;
                Canvas.points.push(oldPt.clone());
                marker.graphics.beginStroke(Canvas.strokeColor);
                stage.addEventListener('stagemousemove', move);
                stage.addEventListener('stagemouseup', up);
            };
            var move = function() {
                var point = new createjs.Point(stage.mouseX, stage.mouseY);
                var midPt = new createjs.Point(oldPt.x + point.x >> 1, oldPt.y + point.y >> 1);
                //disable the pressurized stroke size on mobile to help speed things up
                if (skritter.fn.isMobile()) {
                    marker.graphics
                            .setStrokeStyle(Canvas.strokeSize, Canvas.strokeCapStyle, Canvas.strokeJointStyle)
                            .moveTo(midPt.x, midPt.y)
                            .curveTo(oldPt.x, oldPt.y, oldMidPt.x, oldMidPt.y);
                } else {
                    marker.graphics
                            .setStrokeStyle(skritter.fn.getPressurizedStrokeSize(point, oldPt), Canvas.strokeCapStyle, Canvas.strokeJointStyle)
                            .moveTo(midPt.x, midPt.y)
                            .curveTo(oldPt.x, oldPt.y, oldMidPt.x, oldMidPt.y);
                }
                oldPt.x = point.x;
                oldPt.y = point.y;
                oldMidPt.x = midPt.x;
                oldMidPt.y = midPt.y;
                points.push(oldPt.clone());
                stage.update();
            };
            var up = function up(event) {
                marker.graphics.endStroke();
                if (isOnCanvas(event)) {
                    self.triggerMouseUp(points);
                }
                stage.removeEventListener('stagemousemove', move);
                stage.removeEventListener('stagemouseup', up);
                marker.graphics.clear();
            };
            var isOnCanvas = function(event) {
                var x = event.rawX;
                var y = event.rawY;
                if (x >= 0 && x < Canvas.size && y >= 0 && y < Canvas.size)
                    return true;
            };
            if (!stage.hasEventListener('stagemousedown'))
                stage.addEventListener('stagemousedown', down);
        },
        /**
         * @method setLayerAlpha
         * @param {String} layerName
         * @param {Number} alpha
         * @returns {Container}
         */
        setLayerAlpha: function(layerName, alpha) {
            var layer = this.getLayer(layerName);
            layer.alpha = alpha;
            return layer;
        },
        /**
         * @method resize
         * @param {Object} event
         */
        resize: function(event) {
            Canvas.size = event.canvas;
            Canvas.element.setAttribute('width', Canvas.size);
            Canvas.element.setAttribute('height', Canvas.size);
            $('#canvas-container').width(Canvas.size);
            $('#canvas-container').height(Canvas.size);
            if (Canvas.grid)
                this.drawGrid('grid');
        },
        /**
         * @method tick
         */
        tick: function() {
            Canvas.stage.update();
        },
        /**
         * Enables the view to fire events when the canvas has been touched.
         * 
         * @method triggerMouseDown
         * @param {Object} point
         */
        triggerMouseDown: function(point) {
            this.trigger('mousedown', point);
        },
        /**
         * Enables the view to fire events when the canvas touch has been released.
         * 
         * @method triggerMouseUp
         * @param {Array} points
         */
        triggerMouseUp: function(points) {
            this.trigger('mouseup', points);
        }
    });

    return Canvas;
});
/**
 * @module Skritter
 * @submodule Prompts
 * @param Canvas
 * @author Joshua McFarland
 */
define('prompts/Canvas',[
    'components/Canvas',
    'backbone',
    'createjs.easel',
    'createjs.tween'
], function(Canvas) {
    /**
     * @class PromptCanvas
     * @extends Canvas
     */
    var PromptCanvas = Canvas.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            Canvas.prototype.initialize.call(this);
        },
        /**
         * @method render
         * @returns {PromptCanvas}
         */
        render: function() {
            Canvas.prototype.render.call(this);
            this.createLayer('background');
            this.createLayer('hint');
            this.createLayer('stroke');
            this.createLayer('overlay');
            this.createLayer('indicator');
            this.createLayer('feedback');
            return this;
        }
    });


    return PromptCanvas;
});
define('require.text!templates/prompts-rune.html',[],function () { return '<div id="rune" class="prompt">\r\n    \r\n    <div id="info-container">\r\n        <div class="prompt-row">\r\n            <span class="prompt-writing"></span>\r\n            <span class="prompt-style"></span>\r\n        </div>\r\n        <div class="prompt-row"><span class="prompt-reading"></span></div>\r\n        <div class="prompt-row"><span class="prompt-definition"></span></div>\r\n        <div class="prompt-row"><span class="prompt-sentence"></span></div>\r\n    </div>\r\n    \r\n    <div id="input-container">\r\n        <div id="canvas-container"></div>\r\n        <div id="grading-container"></div>\r\n    </div>\r\n    \r\n</div>';});

/**
 * @module Skritter
 * @submodule Prompts
 * @param PinyinConverter
 * @param Recognizer
 * @param CanvasCharacter
 * @param CanvasStroke
 * @param Canvas
 * @param Prompt
 * @param templateRune
 * @author Joshua McFarland
 */
define('prompts/Rune',[
    'PinyinConverter',
    'Recognizer',
    'collections/CanvasCharacter',
    'models/CanvasStroke',
    'prompts/Canvas',
    'prompts/Prompt',
    'require.text!templates/prompts-rune.html',
    'backbone',
    'jquery.hammer'
], function(PinyinConverter, Recognizer, CanvasCharacter, CanvasStroke, Canvas, Prompt, templateRune) {
    /**
     * @class PromptRune
     */
    var Rune = Prompt.extend({
        initialize: function() {
            Prompt.prototype.initialize.call(this);
            skritter.timer.setReviewLimit(30);
            skritter.timer.setThinkingLimit(15);
            Rune.canvas = new Canvas();
            Rune.failedAttempts = 0;
            Rune.maxFailedAttempts = 3;
            Rune.minStrokeDistance = 15;
            Rune.strokeCount = 0;
            Rune.userCharacter = null;
            this.listenTo(Rune.canvas, 'mousedown', this.handleInputDown);
            this.listenTo(Rune.canvas, 'mouseup', this.handleInputRecieved);
        },
        render: function() {
            this.$el.html(templateRune);
            Rune.canvas.enableGrid();
            Rune.canvas.setElement(this.$('#canvas-container')).render();
            this.$('#canvas-container').hammer().on('doubletap.Rune', _.bind(this.handleDoubleTap, this));
            this.$('#canvas-container').hammer().on('hold.Rune', _.bind(this.handleHold, this));
            this.$('#canvas-container').hammer().on('swipeleft.Rune', _.bind(this.handleSwipeLeft, this));
            this.$('#canvas-container').hammer().on('tap.Rune', _.bind(this.handleTap, this));
            Prompt.prototype.render.call(this);
            return this;
        },
        /**
         * @method clear
         * @return {Backbone.View}
         */
        clear: function() {
            Prompt.gradingButtons.hide();
            Prompt.finished = false;
            Rune.canvas.clear('background');
            Rune.canvas.clear('hint');
            Rune.canvas.clear('overlay');
            Rune.canvas.clear('stroke');
            Rune.canvas.setLayerAlpha('overlay', 1);
            Rune.failedAttempts = 0;
            Rune.userCharacter.reset();
            Rune.userTargets = [];
            return this;
        },
        filterCharacter: function() {
            Rune.canvas.filterLayerColor('stroke', Prompt.gradeColorFilters[Prompt.gradingButtons.grade()]);
        },
        /**
         * @method handleCharacterComplete
         */
        handleCharacterComplete: function() {
            //stop the lap timer
            skritter.timer.stop();
            //mark the prompt as finished while the answer is shown
            Prompt.finished = true;
            //checks if we should snap or just glow the result
            if (skritter.user.getSetting('squigs')) {
                for (var i in Rune.userCharacter.models) {
                    var stroke = Rune.userCharacter.models[i];
                    Rune.canvas.drawTweenedStroke(stroke.getUserSprite(), stroke.getInflatedSprite(), 'stroke');
                    Rune.canvas.setLayerAlpha('overlay', 0.3);
                }
            }
            this.showAnswer();
        },
        /**
         * @method handleDoubleTap
         */
        handleDoubleTap: function() {
            if (!Prompt.finished) {
                this.showTarget(0.3);
                Prompt.gradingButtons.select(1).collapse();
            }
        },
        /**
         * @method handleHold
         */
        handleHold: function() {
            this.clear();
            Rune.canvas.enableInput();
        },
        /**
         * @method handleInputDown
         */
        handleInputDown: function() {
            //ISSUE #60: thinking timer should stop when the first stroke is attempted
            skritter.timer.stopThinking();
            //fade hints when a new stroke is started
            Rune.canvas.fadeLayer('hint');
        },
        /**
         * @method handleInputRecieved
         * @param {Array} points
         */
        handleInputRecieved: function(points) {
            this.processInput(points, null, false);
        },
        /**
         * @method handleLeapRecieved
         * @param {Array} points
         */
        handleLeapRecieved: function(points) {
            this.processInput(points, null, true);
        },
        /**
         * @method handleStrokeRecognized
         * @param {Backbone.Model} result
         */
        handleStrokeRecognized: function(result) {
            //prevents multiple simultaneous from firing the character complete event
            result.set('isTweening', false);
            //check if the character has been completed yet or not with enforced tween checks
            if (Rune.userCharacter.getStrokeCount(true) >= Rune.userCharacter.getTargetStrokeCount()) {
                this.handleCharacterComplete();
            }
        },
        /**
         * @method handleSwipeLeft
         */
        handleSwipeLeft: function() {
            if (Prompt.finished)
                this.next();
        },
        /**
         * @method handleTap
         */
        handleTap: function() {
            if (Prompt.finished)
                this.next();
        },
        /**
         * @method next
         */
        next: function() {
            //store the results for the item or subitem
            Prompt.results.push({
                item: Prompt.contained[Prompt.position - 1],
                grade: Prompt.gradingButtons.grade(),
                reviewTime: skritter.timer.getReviewTime(),
                startTime: skritter.timer.getStartTime(),
                thinkingTime: skritter.timer.getThinkingTime()
            });
            //check to see if there are more characters in the prompt
            if (this.isLast()) {
                this.triggerPromptComplete();
            } else {
                skritter.timer.reset();
                Prompt.gradingButtons.grade(3);
                Prompt.position++;
                this.clear();
                this.show();
            }
        },
        /**
         * @method processInput
         * @param {Array} points
         * @param {Array} ignoreCheck
         * @param {Boolean} enforceOrder
         */
        processInput: function(points, ignoreCheck, enforceOrder) {
            //only strokes of an adaquate distance should be processed
            if (points.length > 0 && skritter.fn.getDistance(points[0], points[points.length - 1]) > Rune.minStrokeDistance) {
                //create the stroke from the points to analyze
                var stroke = new CanvasStroke().set('points', points);
                //recognize a stroke based on user input and targets
                var result = new Recognizer(Rune.userCharacter, stroke, Rune.userCharacter.targets).recognize(ignoreCheck, enforceOrder);
                //check if a result exists and that it's not a duplicate
                if (result && !Rune.userCharacter.containsStroke(result)) {
                    //get the expected stroke based on accepted stroke orders
                    var expected = Rune.userCharacter.getExpectedStroke(result);
                    //add the stroke to the users character
                    Rune.userCharacter.add(stroke);
                    //reset the failed attempts counter
                    Rune.failedAttempts = 0;
                    //choose whether to draw the stroke normally or using raw squigs
                    if (skritter.user.getSetting('squigs')) {
                        Rune.canvas.drawSquig(result.get('points'), 'overlay');
                        this.handleStrokeRecognized(result);
                    } else {
                        //display feedback if it exists
                        if (result.get('feedback'))
                            Rune.canvas.drawText(result.get('feedback'), 'feedback', 'orange', '24px Arial', 10, 10);
                        //mark the result as tweening and snap it
                        result.set('isTweening', true);
                        Rune.canvas.drawTweenedStroke(result.getUserSprite(), result.getInflatedSprite(), 'stroke', _.bind(this.handleStrokeRecognized, this, result));
                        //show a hint if the stroke wasn't in the expected order
                        if (expected && result.get('id') !== expected.get('id'))
                            Rune.canvas.drawPhantomStroke(Rune.userCharacter.getExpectedStroke().getInflatedSprite(), 'hint');
                    }
                    //ISSUE #63: show the grading buttons and grade color preemptively
                    if (Rune.userCharacter.getStrokeCount(false) >= Rune.userCharacter.getTargetStrokeCount()) {
                        Prompt.gradingButtons.select().collapse();
                    }
                } else {
                    Rune.failedAttempts++;
                    //if failed too many times show a hint
                    if (Rune.failedAttempts > Rune.maxFailedAttempts) {
                        //ISSUE #64: display grading buttons immediately when failed
                        Prompt.gradingButtons.select(1).collapse();
                        //ISSUE #28: if the find the next stroke then don't try to show a hint
                        var nextStroke = Rune.userCharacter.getNextStroke();
                        if (nextStroke)
                            Rune.canvas.drawPhantomStroke(nextStroke.getInflatedSprite(), 'hint');
                    }
                }
            }
        },
        /**
         * @method show
         */
        show: function() {
            skritter.timer.start();
            //displays the prompt information based on the current position
            this.$('.prompt-writing').html(Prompt.vocabs[0].getWritingDisplayAt(Prompt.position - 1));
            if (Prompt.vocabs[0].has('audio') && this.isFirst() && skritter.user.get('audio'))
                Prompt.vocabs[0].play();
            if (skritter.user.isChinese())
                this.$('.prompt-style').text(Prompt.vocabs[0].get('style'));
            this.$('.prompt-reading').text(PinyinConverter.toTone(Prompt.reading));
            this.$('.prompt-definition').text(Prompt.definition);
            this.$('#style').text(Prompt.vocabs[0].get('style'));
            if (Prompt.sentence)
                this.$('.prompt-sentence').text(skritter.fn.maskCharacters(Prompt.sentence.noWhiteSpaces(), Prompt.writing, ' _ '));
            //ISSUE #74: redraws existing character when switching between pages
            if (Rune.userCharacter) {
                Rune.canvas.drawCharacter(Rune.userCharacter.getCharacterSprite(), 'stroke');
            } else {
                Rune.userCharacter = new CanvasCharacter();
            }
            Rune.userCharacter.targets = Prompt.vocabs[0].getCanvasCharacters(Prompt.position - 1, 'rune');
            console.log(Rune.userCharacter.targets);
            Rune.canvas.enableInput();
        },
        /**
         * @method showAnswer
         */
        showAnswer: function() {
            Rune.canvas.disableInput();
            Prompt.gradingButtons.select().collapse();
            this.$('.prompt-writing').html(Prompt.vocabs[0].getWritingDisplayAt(Prompt.position));
            if (this.isLast() && Prompt.sentence)
                this.$('.prompt-sentence').text(Prompt.sentence.noWhiteSpaces());
        },
        /**
         * @method showTarget
         * @param {Number} alpha
         */
        showTarget: function(alpha) {
            if (!Prompt.finished)
                Rune.canvas.drawCharacter(Rune.userCharacter.targets[Rune.userCharacter.getVariationIndex()].getCharacterSprite(), 'hint', alpha);
        }
    });

    return Rune;
});
define('require.text!templates/prompts-tone.html',[],function () { return '<div id="tone" class="prompt">\r\n    \r\n    <div id="info-container">\r\n        <div class="prompt-row"><span class="prompt-reading"></span></div>\r\n        <div class="prompt-row">\r\n            <span class="prompt-writing"></span>\r\n            <span class="prompt-style"></span>\r\n        </div>\r\n        <div class="prompt-row"><span class="prompt-definition"></span></div>\r\n        <div class="prompt-row"><span class="prompt-sentence"></span></div>\r\n    </div>\r\n    \r\n    <div id="input-container">\r\n        <div id="canvas-container"></div>\r\n        <div id="grading-container"></div>\r\n    </div>\r\n    \r\n</div>';});

/**
 * @module Skritter
 * @submodule Prompts
 * @param Recognizer
 * @param CanvasCharacter
 * @param CanvasStroke
 * @param Canvas
 * @param Prompt
 * @param templateTone
 * @author Joshua McFarland
 */
define('prompts/Tone',[
    'Recognizer',
    'collections/CanvasCharacter',
    'models/CanvasStroke',
    'prompts/Canvas',
    'prompts/Prompt',
    'require.text!templates/prompts-tone.html',
    'backbone',
    'jquery.hammer'
], function(Recognizer, CanvasCharacter, CanvasStroke, Canvas, Prompt, templateTone) {
    /**
     * @class PromptTone
     */
    var Tone = Prompt.extend({
        initialize: function() {
            Prompt.prototype.initialize.call(this);
            skritter.timer.setReviewLimit(15);
            skritter.timer.setThinkingLimit(10);
            Tone.canvas = new Canvas();
            Tone.minStrokeDistance = 15;
            Tone.userCharacter = null;
            this.listenTo(Tone.canvas, 'mousedown', this.handleInputDown);
            this.listenTo(Tone.canvas, 'mouseup', this.handleInputRecieved);
        },
        render: function() {
            this.$el.html(templateTone);
            Tone.canvas.setElement(this.$('#canvas-container')).render();
            this.$('#canvas-container').hammer().on('hold.Tone', _.bind(this.handleHold, this));
            this.$('#canvas-container').hammer().on('swipeleft.Tone', _.bind(this.handleSwipeLeft, this));
            this.$('#canvas-container').hammer().on('tap.Tone', _.bind(this.handleTap, this));
            Prompt.prototype.render.call(this);
            return this;
        },
        /**
         * @method clear
         * @return {Backbone.View}
         */
        clear: function() {
            Prompt.gradingButtons.hide();
            Prompt.gradingButtons.grade(3);
            Prompt.finished = false;
            Tone.canvas.clear('hint');
            Tone.canvas.clear('overlay');
            Tone.canvas.clear('stroke');
            Tone.userCharacter.reset();
            Tone.userTargets = [];
            return this;
        },
        /**
         * @method handleCharacterComplete
         */
        handleCharacterComplete: function() {
            Prompt.finished = true;
            Tone.canvas.filterLayerColor('stroke', Prompt.gradeColorFilters[Prompt.gradingButtons.grade()]);
            this.showAnswer();
        },
        /**
         * @method handleHold
         */
        handleHold: function() {
            this.clear();
            Tone.canvas.enableInput();
        },
        /**
         * @method handleInputRecieved
         * @param {Array} points
         */
        handleInputRecieved: function(points) {
            this.processInput(points, null, false);
        },
        /**
         * @method handleSwipeLeft
         */
        handleSwipeLeft: function() {
            if (Prompt.finished)
                this.next();
        },
        /**
         * @method handleTap
         */
        handleTap: function() {
            if (Prompt.finished)
                this.next();
        },
        
        /**
         * @method next
         */
        next: function() {
            //store the results for the item or subitem
            Prompt.results.push({
                item: Prompt.contained[Prompt.position - 1],
                grade: Prompt.gradingButtons.grade(),
                reviewTime: skritter.timer.getReviewTime(),
                startTime: skritter.timer.getStartTime(),
                thinkingTime: skritter.timer.getThinkingTime()
            });
            //check to see if there are more characters in the prompt
            if (this.isLast()) {
                this.triggerPromptComplete();
            } else {
                skritter.timer.reset();
                Prompt.position++;
                this.clear();
                this.show();
            }
        },
        
        /**
         * @method processInput
         * @param {Array} points
         * @param {Array} ignoreCheck
         * @param {Boolean} enforceOrder
         */
        processInput: function(points, ignoreCheck, enforceOrder) {
            if (points.length > 1) {
                //check that a minimum distance is met
                if (skritter.fn.getDistance(points[0], points[points.length - 1]) > Tone.minStrokeDistance) {
                    //create the stroke from the points to analyze
                    var stroke = new CanvasStroke().set('points', points);
                    //recognize a stroke based on user input and targets
                    var result = new Recognizer(Tone.userCharacter, stroke, Tone.userCharacter.targets).recognize(ignoreCheck, enforceOrder);
                    //check if a result exists and that it's not a duplicate
                    if (result && !Tone.userCharacter.containsStroke(result)) {
                        Prompt.gradingButtons.select(3);
                        //add the stroke to the users character
                        Tone.userCharacter.add(result);
                        //draw the stroke on the canvas without tweening
                        Tone.canvas.drawStroke(result.getInflatedSprite(), 'stroke');
                    } else {
                        Prompt.gradingButtons.select(1).collapse();
                        //select the first possible tone and display it as wrong
                        Tone.canvas.drawStroke(Tone.userCharacter.targets[0].at(0).getInflatedSprite(), 'stroke');
                    }
                }
            } else {
                //ISSUE #69: count clicks as a neutral fifth tone
                var index = _.pluck(Tone.userCharacter.targets, 'name').indexOf('tone5');
                if (index >= 0) {
                    Prompt.gradingButtons.select(3).collapse();
                    Tone.canvas.drawStroke(Tone.userCharacter.targets[index].at(0).getInflatedSprite(), 'stroke');
                } else {
                    Prompt.gradingButtons.select(1).collapse();
                    Tone.canvas.drawStroke(Tone.userCharacter.targets[0].at(0).getInflatedSprite(), 'stroke');
                }
            }
            this.handleCharacterComplete();
        },
        show: function() {
            skritter.timer.start();
            //tone prompts must display the character in the background
            Tone.canvas.clear('background');
            Tone.canvas.drawCharacterFromFont(Prompt.vocabs[0].getCharacterAt(Prompt.position - 1), skritter.user.getFontName(), 'background', 0.3);
            //displays the prompt information based on the current position
            this.$('.prompt-writing').text(Prompt.writing);
            if (skritter.user.isChinese())
                this.$('.prompt-style').text(Prompt.vocabs[0].get('style'));
            this.$('.prompt-reading').html(Prompt.vocabs[0].getReadingDisplayAt(Prompt.position - 1));
            this.$('.prompt-definition').text(Prompt.definition);
            this.$('#style').text(Prompt.vocabs[0].get('style'));
            if (Prompt.sentence)
                this.$('.prompt-sentence').text(Prompt.sentence.noWhiteSpaces());
            //ISSUE #74: redraws existing character when switching between pages
            if (Tone.userCharacter) {
                Tone.canvas.drawCharacter(Tone.userCharacter.getCharacterSprite(), 'stroke');
            } else {
                Tone.userCharacter = new CanvasCharacter();
            }
            Tone.userCharacter.targets = Prompt.vocabs[0].getCanvasCharacters(Prompt.position - 1, 'tone');
            Tone.canvas.enableInput();
        },
        showAnswer: function() {
            skritter.timer.stop();
            Tone.canvas.disableInput();
            if (Prompt.vocabs[0].has('audio') && this.isLast() && skritter.user.get('audio'))
                Prompt.vocabs[0].play();
            Prompt.gradingButtons.select().collapse();
            this.$('.prompt-reading').html(Prompt.vocabs[0].getReadingDisplayAt(Prompt.position));
        }
    });

    return Tone;
});
define('require.text!templates/study.html',[],function () { return '<div id="study-view" class="view">\r\n    <div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n        <div class="container">\r\n            <a class="navbar-brand hidden-xs" href="#">Skritter</a>\r\n            <div class="navbar-text">   \r\n                <ul class="navbar-nav list-inline">\r\n                    <li><a class="link-button" data-fragment="/"><span class="fa fa-navbar fa-arrow-left"></span></a></li>\r\n                    <li><a class="cursor"><span id="timer" class="fa fa-navbar fa-clock-o"></span></a></li>\r\n                    <li><a class="cursor"><span id="items-due" class="fa fa-navbar fa-pencil"></span></a></li>\r\n                    <li><a class="cursor"><span id="add-button" class="fa fa-navbar fa-plus"></span></a></li>\r\n                    <li><a class="cursor"><span id="audio-button" class="fa fa-navbar fa-volume-off"></span></a></li>\r\n                    <li><a class="cursor"><span id="info-button" class="fa fa-navbar fa-info-circle"></span></a></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id="prompt-container"></div>\r\n</div>';});

/**
 * @module Skritter
 * @param Defn
 * @param Rdng
 * @param Rune
 * @param Tone
 * @param templateStudy
 * @author Joshua McFarland
 */
define('views/Study',[
    'prompts/Defn',
    'prompts/Rdng',
    'prompts/Rune',
    'prompts/Tone',
    'require.text!templates/study.html',
    'backbone'
], function(Defn, Rdng, Rune, Tone, templateStudy) {
    var Study = Backbone.View.extend({
        initialize: function() {
            Study.current = {prompt: null, item: null, vocabs: null};
            skritter.timer.sync(true);
        },
        render: function() {
            this.$el.html(templateStudy);
            this.$('#avatar').html(skritter.user.getAvatar('avatar'));
            this.$('#username').text(skritter.user.getSetting('name'));
            skritter.timer.setElement(this.$('#timer')).render();
            if (Study.current.prompt) {
                this.loadPrompt();
            } else {
                this.nextItem();
            }
            this.updateDueCount();
            return this;
        },
        /**
         * @property {Object} events
         */
        events: {
            'click.Study #add-button': 'addItems',
            'click.Study #audio-button': 'playAudio',
            'click.Study #info-button': 'navigateInfo'
        },
        /**
         * @method addItem
         */
        addItems: function() {
            var self = this;
            skritter.modal.show('progress').setTitle('Adding Items').setProgress(100);
            skritter.user.addItems(5, function() {
                self.loadItems();
                self.updateDueCount();
                skritter.modal.hide();
            });
        },
        /**
         * @method handlePromptComplete
         * @param {Object} results
         */
        handlePromptComplete: function(results) {
            var finalGrade = 3;
            var totalGrade = 0;
            var totalWrong = 0;
            var totalReviewTime = 0;
            var totalThinkingTime = 0;
            //create a unique word group for all of the prompt items to share
            var wordGroup = Study.current.item.get('id') + '_' + results[0].startTime;
            //update and calculate subitems
            if (results.length > 1) {
                for (var i in results) {
                    var result = results[i];
                    if (result.grade < 2)
                        totalWrong++;
                    totalGrade += result.grade;
                    totalReviewTime += result.reviewTime;
                    totalThinkingTime += result.thinkingTime;
                    result.item.update(result.grade, result.reviewTime, result.startTime, result.thinkingTime, wordGroup, false);
                }
                //adjust the grade for multiple character items or get rounded down average
                if (Study.current.vocabs[0].getCharacterCount() === 2 && totalWrong === 1) {
                    finalGrade = 1;
                } else if (totalWrong >= 2) {
                    finalGrade = 1;
                } else {
                    finalGrade = Math.floor(totalGrade / results.length);
                }
                Study.current.item.update(finalGrade, totalReviewTime, results[0].startTime, totalThinkingTime, wordGroup, true);
            } else {
                Study.current.item.update(results[0].grade, results[0].reviewTime, results[0].startTime, results[0].thinkingTime, wordGroup, true);
            }
            console.log('PROMPT COMPLETE', results);
            Study.current.prompt.undelegateEvents();
            //keep an updated display of items due
            this.updateDueCount();
            //get the next item
            this.nextItem();
        },
        /**
         * @method loadItems
         * @param {String} attribute
         * @param {Array} values
         * @param {Boolean} autoLoad
         * @returns {Backbone.Collection}
         */
        loadItems: function(attribute, values, autoLoad) {
            if (attribute && values) {
                Study.items = skritter.data.items.filterBy(attribute, values).filterBy('lang', skritter.user.getSetting('targetLang'));
                if (Study.items.length < 1)
                    return false;
                if (autoLoad)
                    this.nextItem();
            } else {
                Study.items = skritter.data.items.getActive();

            }
            return Study.items;
        },
        /**
         * @method loadPrompt
         */
        loadPrompt: function() {
            console.log('Resuming', Study.current.vocabs[0].get('writing'));
            switch (Study.current.item.get('part')) {
                case 'rune':
                    Study.current.prompt.setElement(this.$('#prompt-container')).render();
                    break;
                case 'tone':
                    Study.current.prompt.setElement(this.$('#prompt-container')).render();
                    break;
                case 'defn':
                    Study.current.prompt.setElement(this.$('#prompt-container')).render();
                    break;
                case 'rdng':
                    Study.current.prompt.setElement(this.$('#prompt-container')).render();
                    break;
            }
            //toggle the audio button display
            this.toggleAudioButton();
            //show the in-progess prompt
            Study.current.prompt.show();
            //show the answer if it was marked as finished
            if (Study.current.prompt.isFinished())
                Study.current.prompt.showAnswer();
        },
        /**
         * @method loadPrompt
         * @returns {Boolean}
         */
        navigateInfo: function() {
            skritter.router.navigate('info/' + Study.current.vocabs[0].get('id'), {trigger: true});
            return false;
        },
        /**
         * @method nextItem
         * @returns {Object}
         */
        nextItem: function() {
            //sort the items collection to put a new item on top
            skritter.data.items.sort();
            //gets the next item that should be studied and loads it
            Study.current.item = skritter.data.items.getActive()[0];
            //Study.current.item = skritter.data.items.findWhere({id: 'mcfarljwtest1-zh-的-0-tone'});
            Study.current.vocabs = Study.current.item.getVocabs();    
            //runs an integrity check on the item to catch errors that might prevent completion
            if (!Study.current.item.integrityCheck()) {
                console.log(Study.current.item.get('id'), 'failed an integrity check');
                this.nextItem();
                return false;
            }
            //load the basd on the items part
            switch (Study.current.item.get('part')) {
                case 'rune':
                    Study.current.prompt = new Rune();
                    Study.current.prompt.setElement(this.$('#prompt-container')).render();
                    break;
                case 'tone':
                    Study.current.prompt = new Tone();
                    Study.current.prompt.setElement(this.$('#prompt-container')).render();
                    break;
                case 'defn':
                    Study.current.prompt = new Defn();
                    Study.current.prompt.setElement(this.$('#prompt-container')).render();
                    break;
                case 'rdng':
                    Study.current.prompt = new Rdng();
                    Study.current.prompt.setElement(this.$('#prompt-container')).render();
                    break;
            }
            //toggle the audio button display
            this.toggleAudioButton();
            //set the prompt values and start listening for completion
            Study.current.prompt.set(Study.current.vocabs, Study.current.item).show();
            this.listenToOnce(Study.current.prompt, 'complete', this.handlePromptComplete);
            return Study.current;
        },
        /**
         * @method playAudio
         */
        playAudio: function() {
            Study.current.vocabs[0].play();
            return false;
        },
        /**
         * @method toggleAudioButton
         */
        toggleAudioButton: function() {
            if (Study.current.vocabs[0].has('audio')) {
                this.$('#audio-button').removeClass('fa fa-volume-off');
                this.$('#audio-button').addClass('fa fa-volume-up');
            } else {
                this.$('#audio-button').removeClass('fa fa-volume-up');
                this.$('#audio-button').addClass('fa fa-volume-off');
            }
        },
        /**
         * @method updateDueCount
         */
        updateDueCount: function() {
            this.$('#items-due').text(skritter.data.items.getDue().length);
        }
    });

    return Study;
});
define('require.text!templates/vocabs.html',[],function () { return '<div class="navbar navbar-default navbar-fixed-top" role="navigation">\r\n    <div class="container">\r\n        <div class="navbar-header">\r\n            <a class="navbar-brand" href="#">Skritter</a>\r\n            <div class="navbar-text">   \r\n                <ul class="navbar-nav list-inline">\r\n                    <li><a class="link-button" data-fragment="/"><span class="fa fa-arrow-left"></span></a></li>\r\n                    <li><a class="link-button" data-fragment="lists">Lists</a></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class="container">\r\n\r\n    <table id="vocabs-table" class="table table-hover">\r\n        <thead>\r\n            <tr>\r\n                <th>Writing</th>\r\n                <th>Reading</th>\r\n                <th>Definition</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody></tbody>\r\n    </table>\r\n\r\n</div><!--/container-->';});

/**
 * @module Skritter
 * @submodule Views
 * @param PinyinConverter
 * @param templateVocabs
 * @author Joshua McFarland
 */
define('views/Vocabs',[
    'PinyinConverter',
    'require.text!templates/vocabs.html',
    'backbone'
], function(PinyinConverter, templateVocabs) {
    /**
     * @class Vocabs
     */
    var Vocabs = Backbone.View.extend({
        /**
         * @method initialize
         */
        initialize: function() {

        },
        /**
         * @method render
         * @returns {Backbone.View}
         */
        render: function() {
            this.$el.html(templateVocabs);
            this.load();
            return this;
        },
        events: {
            'click.Vocabs #vocabs-table tr': 'navigateInfo'
        },
        /**
         * @method load
         */
        load: function() {
            var vocabs = skritter.data.vocabs;
            for (var i in vocabs.models) {
                var vocab = vocabs.at(i);
                var div = '';
                div += "<tr id='" + vocab.get('id') + "'>";
                div += "<td>" + vocab.get('writing') + "</td>";
                div += "<td>" + PinyinConverter.toTone(vocab.get('reading')) + "</td>";
                div += "<td>" + vocab.get('definitions')[skritter.user.getSetting('sourceLang')] + "</td>";
                div += "</tr>";
                this.$('#vocabs-table tbody').append(div);
            }
        },
        /**
         * @method navigateInfo
         * @param {Object} event
         */
        navigateInfo: function(event) {
            skritter.router.navigate('info/' + event.currentTarget.id, {trigger: true});
        }
    });

    return Vocabs;
});
/**
 * @module Skritter
 * @param HomeView
 * @param InfoView
 * @param ListsView
 * @param OptionsView
 * @param ReviewsView
 * @param StudyView
 * @param VocabsView
 * @author Joshua McFarland
 */
define('Router',[
    'views/Home',
    'views/Info',
    'views/Lists',
    'views/Options',
    'views/Reviews',
    'views/Study',
    'views/Vocabs',
    'backbone'
], function(HomeView, InfoView, ListsView, OptionsView, ReviewsView, StudyView, VocabsView) {
    /**
     * @class Router
     */
    var Router = Backbone.Router.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            //load up the home since it contains a global click event
            Router.homeView = new HomeView({el: $(skritter.settings.get('container'))});
            //stop the timer when the view has moved from study
            this.on('route', function(route) {
                if (route !== 'studyView')
                    skritter.timer.stop();
            });
        },
        /**
         * @property {Object} routes
         */
        routes: {
            '': 'homeView',
            'info/:vocabId': 'infoView',
            'lists': 'listsView',
            'lists/:listId': 'listsView',
            'lists/:listId/:sectionId': 'listsView',
            'login': 'handleLogin',
            'logout': 'handleLogout',
            'options': 'optionsView',
            'reviews': 'reviewsView',
            'study': 'studyView',
            'vocabs': 'vocabsView',
            'vocabs/:filterBy': 'vocabsView',
            '*default': 'defaultRoute'
        },
        /**
         * @method back
         */
        back: function() {
            if (Backbone.history.history.length > 1) {
                Backbone.history.history.back();
            } else {
                this.navigate('/', {trigger: true, replace: true});
            }
        },
        /**
         * @method defaultRoute
         */
        defaultRoute: function() {
            this.navigate('/', {trigger: true});
        },
        /**
         * @method homeView
         */
        homeView: function() {
            if (!Router.homeView) {
                Router.homeView = new HomeView({el: $(skritter.settings.get('container'))}).render();
            } else {
                Router.homeView.setElement($(skritter.settings.get('container'))).render();
            }
        },
        /**
         * @method infoView
         * @param {String} vocabId
         */
        infoView: function(vocabId) {
            if (!Router.infoView) {
                Router.infoView = new InfoView({el: $(skritter.settings.get('container'))});
            } else {
                Router.infoView.setElement($(skritter.settings.get('container')));
            }
            Router.infoView.set(vocabId);
            Router.infoView.render();
        },
        /**
         * @method listsView
         * @param {String} listId
         * @param {String} sectionId
         */
        listsView: function(listId, sectionId) {
            if (!Router.listsView) {
                Router.listsView = new ListsView({el: $(skritter.settings.get('container'))});
            } else {
                Router.listsView.setElement($(skritter.settings.get('container')));
            }
            Router.listsView.set(listId, sectionId);
            Router.listsView.render();
        },
        /**
         * @method handleLogin
         */
        handleLogin: function() {
            skritter.modal.show('login');
        },
        /**
         * @method handleLogout
         */
        handleLogout: function() {
            skritter.user.logout();
            return false;
        },
        /**
         * @method optionsView
         */
        optionsView: function() {
            if (!Router.optionsView) {
                Router.optionsView = new OptionsView({el: $(skritter.settings.get('container'))}).render();
            } else {
                Router.optionsView.setElement($(skritter.settings.get('container'))).render();
            }
        },
        /**
         * @method reviewsView
         */
        reviewsView: function() {
            if (!Router.reviewsView) {
                Router.reviewsView = new ReviewsView({el: $(skritter.settings.get('container'))}).render();
            } else {
                Router.reviewsView.setElement($(skritter.settings.get('container'))).render();
            }
        },
        /**
         * @method studyView
         */
        studyView: function() {
            if (!Router.studyView) {
                Router.studyView = new StudyView({el: $(skritter.settings.get('container'))}).render();
            } else {
                Router.studyView.setElement($(skritter.settings.get('container'))).render();
            }
        },
        /**
         * @method vocabsView
         * @param {String} sort
         */
        vocabsView: function(sort) {
            if (!Router.vocabsView) {
                Router.vocabsView = new VocabsView({el: $(skritter.settings.get('container'))});
            } else {
                Router.vocabsView.setElement($(skritter.settings.get('container')));
            }
            Router.vocabsView.render();
        }
    });

    /**
     * @method initialize
     * @return {Router} Returns the application hashtag routing instance
     */
    var initialize = function() {
        var router = new Router();
        Backbone.history.start(skritter.fn.isLocal() ? {} : {pushState: true});
        return router;
    };

    return {
        initialize: initialize
    };
});
define('require.text!templates/modals.html',[],function () { return '<!-- /MODAL: default -->\r\n<div class="modal fade modal-vertical-centered" id="default" tabindex="-1" role="dialog" aria-labelledby="default" aria-hidden="true">\r\n    <div class="modal-dialog">\r\n        <div class="modal-content">\r\n            <div class="modal-header">\r\n                <h4 class="modal-title" id="label-default"></h4>\r\n            </div>\r\n            <div class="modal-body text-center"></div>\r\n        </div><!-- /.modal-content -->\r\n    </div><!-- /.modal-dialog -->\r\n</div><!-- /.modal -->\r\n\r\n<!-- /MODAL: confirm -->\r\n<div class="modal fade modal-vertical-centered" id="confirm" tabindex="-1" role="dialog" aria-labelledby="confirm" aria-hidden="true">\r\n    <div class="modal-dialog">\r\n        <div class="modal-content">\r\n            <div class="modal-header">\r\n                <h4 class="modal-title" id="label-confirm"></h4>\r\n            </div>\r\n            <div class="modal-body text-center"></div>\r\n            <div class="modal-footer">\r\n                <button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>\r\n            </div>\r\n        </div><!-- /.modal-content -->\r\n    </div><!-- /.modal-dialog -->\r\n</div><!-- /.modal -->\r\n\r\n<!-- /MODAL: default -->\r\n<div class="modal fade modal-vertical-centered" id="input-range" tabindex="-1" role="dialog" aria-labelledby="input-range" aria-hidden="true">\r\n    <div class="modal-dialog">\r\n        <div class="modal-content">\r\n            <div class="modal-header">\r\n                <h4 class="modal-title" id="label-input-range"></h4>\r\n            </div>\r\n            <div class="modal-body text-center"></div>\r\n        </div><!-- /.modal-content -->\r\n    </div><!-- /.modal-dialog -->\r\n</div><!-- /.modal -->\r\n\r\n<!-- /MODAL: progress -->\r\n<div class="modal fade modal-vertical-centered" id="progress" tabindex="-1" role="dialog" aria-labelledby="progress" aria-hidden="true">\r\n    <div class="modal-dialog">\r\n        <div class="modal-content">\r\n            <div class="modal-header">\r\n                <div class="pull-right"><span class="modal-progress-text" style="display:inline-block; vertical-align:middle"></span></div>\r\n                <h4 class="modal-title" id="label-progress"></h4>\r\n            </div>\r\n            <div class="modal-body">\r\n                <div class="progress progress-striped active">\r\n                    <div class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">\r\n                        <span class="sr-only">100% Complete</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div><!-- /.modal-content -->\r\n    </div><!-- /.modal-dialog -->\r\n</div><!-- /.modal -->\r\n\r\n<!-- /MODAL: login -->\r\n<div class="modal fade modal-vertical-centered" id="login" tabindex="-1" role="dialog" aria-labelledby="login" aria-hidden="true">\r\n    <div class="modal-dialog">\r\n        <div class="modal-content">\r\n            <div class="modal-body text-center">\r\n                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>\r\n                <form class="form-signin">\r\n                    <h2 class="form-signin-heading">Please log in</h2>\r\n                    <input id="login-username" type="text" class="form-control" placeholder="Username" required autofocus>\r\n                    <input id="login-password" type="password" class="form-control" placeholder="Password" required>\r\n                    <button id="login-button" class="btn btn-primary">Log In</button>\r\n                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\r\n                    <div id="error-message"></div>\r\n                </form>\r\n            </div>\r\n        </div><!-- /.modal-content -->\r\n    </div><!-- /.modal-dialog -->\r\n</div><!-- /.modal -->';});

/**
 * @module Skritter
 * @submodule Component
 * @param templateModals
 * @author Joshua McFarland
 */
define('components/Modal',[
    'require.text!templates/modals.html',
    'backbone'
], function(templateModals) {
    /**
     * @class Modal
     */
    var Modal = Backbone.View.extend({
        /**
         * @method initialze
         */
        initialize: function() {
            var self = this;
            Modal.element = null;
            Modal.id = null;
            Modal.options = null;
            this.$el.on('show.bs.modal', function() {
                if (self.$el.children().hasClass('in')) {
                    self.$el.children('.in').modal('hide').one('hidden.bs.modal', function() {
                        self.$(Modal.element).modal(Modal.options);
                    });
                    return false;
                }
            });
        },
        el: this.$('#modal-container'),
        /**
         * @method render
         * @returns {Backbone.View}
         */
        render: function() {
            this.$el.html(templateModals);
            return this;
        },
        /**
         * @property {Object} events
         */
        events: {
            'click.Modal #login #login-button': 'handleLogin'
        },
        /**
         * @method handleLogin
         * @param {Object} event
         */
        handleLogin: function(event) {
            var self = this;
            var username = this.$(event.target.parentNode).children('#login-username').val();
            var password = this.$(event.target.parentNode).children('#login-password').val();
            this.show('default', function() {
                skritter.user.login(username, password, function(result) {
                    if (result.statusCode === 200) {
                        document.location.href = '';
                    } else {
                        self.$('#login #error-message').html(skritter.fn.twbsAlertHTML('warning', result.message));
                        self.show('login');
                    }
                });
            }).setBody('Logging In').noHeader();
            return false;
        },
        /**
         * @method hide
         * @param {Function} callback
         * @returns {Backbone.View}
         */
        hide: function(callback) {
            this.$(Modal.element).modal('hide').one('hidden.bs.modal', callback);
            return this;
        },
        /**
         * @method noBody
         * @returns {Backbone.View}
         */
        noBody: function() {
            this.$('.modal-body').hide();
            return this;
        },
        /**
         * @method noHeader
         * @returns {Backbone.View}
         */
        noHeader: function() {
            this.$('.modal-header').hide();
            return this;
        },
        /**
         * @method reset
         * @returns {Backbone.View}
         */
        reset: function() {
            this.$('#' + Modal.id + '.modal-body').html('');
            this.$('#' + Modal.id + '.modal-header').html('');
            this.$('#' + Modal.id + '.modal-progress-text').html('');
            this.$('#' + Modal.id + '.modal-title').html('');
            return this;
        },
        /**
         * @method setBody
         * @param {String} text
         * @returns {Backbone.View}
         */
        setBody: function(text) {
            this.$('#' + Modal.id + ' .modal-body').html(text);
            return this;
        },
        /**
         * @method setProgress
         * @param {Number} percent
         * @param {String} text
         * @returns {Backbone.View}
         */
        setProgress: function(percent, text) {
            if (percent)
                this.$('#' + Modal.id + ' .progress-bar').width(percent + '%');
            if (text)
                this.$('#' + Modal.id + ' .progress-bar .sr-only').text(percent + '% Complete');
            this.$('#' + Modal.id + ' .modal-progress-text').text(text);
            return this;
        },
        /**
         * @method setTitle
         * @param {String} text
         * @returns {Backbone.View}
         */
        setTitle: function(text) {
            this.$('#' + Modal.id + ' .modal-title').html(text);
            return this;
        },
        /**
         * @method show
         * @param {String} id
         * @param {Function} callback
         * @param {Object} options
         * @returns {Backbone.View}
         */
        show: function(id, callback, options) {
            id = (id) ? id : 'default';
            options = (options) ? options : {};
            options.backdrop = (options.backdrop) ? options.backdrop : 'static';
            options.keyboard = (options.keyboard) ? options.keyboard : false;
            options.show = (options.show) ? options.show : true;
            options.remote = (options.remote) ? options.remote : false;
            Modal.id = id;
            Modal.options = options;
            Modal.element = this.$('#' + id).modal(options).one('shown.bs.modal', callback);
            this.$(Modal.element).children('.modal-content').show();
            this.reset();
            return this;
        }
    });

    return Modal;
});
/**
 * @module Skritter
 * @submodule Component
 * @author Joshua McFarland
 */
define('components/Timer',[
    'backbone'
], function() {
    /**
     * Used to start, stop and calculate accurate durations of time.     .
     * @class Stopwatch
     * @param {Number} offset
     */
    var Stopwatch = function(offset) {
        offset = (offset) ? offset : 0;
        var startAt = 0;
        var lapTime = 0 + offset;
        var now = function() {
            var date = new Date();
            return date.getTime();
        };
        this.start = function() {
            startAt = startAt ? startAt : now();
        };
        this.stop = function() {
            lapTime = startAt ? lapTime + now() - startAt : lapTime;
            startAt = 0;
        };
        this.reset = function() {
            lapTime = startAt = 0;
        };
        this.time = function() {
            return lapTime + (startAt ? now() - startAt : 0);
        };
    };
    /**
     * @class Timer
     */
    var Timer = Backbone.View.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            Timer.interval = null;
            Timer.getLapTime = function() {
                return Timer.lapStartAt ? Timer.lapTime + skritter.fn.getUnixTime(true) - Timer.lapStartAt : Timer.lapTime;
            };
            Timer.lapStartAt = 0;
            Timer.lapTime = 0;
            Timer.reviewLimit = 30;
            Timer.reviewStart = null;
            Timer.reviewStop = null;
            Timer.offset = 0;
            Timer.stopwatch = new Stopwatch();
            Timer.thinkingLimit = 15;
            Timer.thinkingStop = null;
            Timer.time = 0;
        },
        /**
         * @method render
         * @returns {Backbone.View}
         */
        render: function() {
            var time = (time) ? time : Timer.time;
            //adjusts the rendered time for the offset
            time += Timer.offset;
            //switched to bitwise operations for better performance across browsers
            var hours = (time / (3600 * 1000)) >> 0;
            time = time % (3600 * 1000);
            var minutes = (time / (60 * 1000)) >> 0;
            time = time % (60 * 1000);
            var seconds = (time / 1000) >> 0;
            //var milliseconds = time % 1000;
            if (hours > 0) {
                this.$el.html(hours + ':' + skritter.fn.pad(minutes, 0, 2) + ':' + skritter.fn.pad(seconds, 0, 2));
            } else {
                this.$el.html(minutes + ':' + skritter.fn.pad(seconds, 0, 2));
            }
            return this;
        },
        /**
         * @method getReviewTime
         * @returns {Number}
         */
        getReviewTime: function() {
            var lapTime = Timer.getLapTime() / 1000;
            if (lapTime >= Timer.reviewLimit)
                return Timer.reviewLimit;
            return lapTime;
        },
        /**
         * @method getStartTime
         * @returns {Number}
         */
        getStartTime: function() {
            return parseInt(Timer.reviewStart / 1000, 10);
        },
        /**
         * @method getThinkingTime
         * @returns {Number}
         */
        getThinkingTime: function() {
            var lapTime = Timer.getLapTime() / 1000;
            if (Timer.thinkingStop) {
                var thinkingTime = (Timer.thinkingStop - Timer.reviewStart) / 1000;
                if (thinkingTime >= Timer.thinkingLimit)
                    return Timer.thinkingLimit;
                return thinkingTime;
            }
            if (lapTime >= Timer.thinkingLimit)
                return Timer.thinkingLimit;
            return lapTime;
        },
        /**
         * @method isReviewLimitReached
         * @returns {Boolean}
         */
        isReviewLimitReached: function() {
            if (Timer.getLapTime() >= Timer.reviewLimit * 1000)
                return true;
            return false;
        },
        /**
         * @method isRunning
         * @returns {Boolean}
         */
        isRunning: function() {
            if (Timer.interval)
                return true;
            return false;
        },
        /**
         * @method isThinkingLimitReached
         * @returns {Boolean}
         */
        isThinkingLimitReached: function() {

        },
        /**
         * @method reset
         * @returns {Backbone.View}
         */
        reset: function() {
            if (!this.isRunning()) {
                Timer.lapStartAt = 0;
                Timer.lapTime = 0;
                Timer.reviewStart = null;
                Timer.reviewStop = null;
                Timer.thinkingStop = null;
            }
            return this;
        },
        /**
         * @method setReviewLimit
         * @param {Number} value
         * @returns {Backbone.View}
         */
        setReviewLimit: function(value) {
            Timer.reviewLimit = value;
            return this;
        },
        /**
         * @method setOffset
         * @param {Number} value
         * @returns {Backbone.View}
         */
        setOffset: function(value) {
            Timer.offset = value;
            return this;
        },
        /**
         * @method setThinkingLimit
         * @param {Number} value
         * @returns {Backbone.View}
         */
        setThinkingLimit: function(value) {
            Timer.thinkingLimit = value;
            return this;
        },
        /**
         * @method start
         */
        start: function() {
            if (!Timer.reviewStart)
                Timer.reviewStart = skritter.fn.getUnixTime(true);
            if (!this.isRunning() && !this.isReviewLimitReached()) {
                Timer.interval = setInterval(this.update, 10, this);
                Timer.lapStartAt = Timer.lapStartAt ? Timer.lapStartAt : skritter.fn.getUnixTime(true);
                Timer.stopwatch.start();
            }
        },
        /**
         * @method stop
         */
        stop: function() {
            if (this.isRunning()) {
                Timer.lapTime = Timer.lapStartAt ? Timer.lapTime + skritter.fn.getUnixTime(true) - Timer.lapStartAt : Timer.lapTime;
                Timer.lapStartAt = 0;
                Timer.reviewStop = skritter.fn.getUnixTime(true);
                Timer.stopwatch.stop();
                clearInterval(Timer.interval);
                Timer.interval = null;
            }
        },
        /**
         * @method stopThinking
         * @returns {Backbone.View}
         */
        stopThinking: function() {
            if (!Timer.thinkingStop)
                Timer.thinkingStop = skritter.fn.getUnixTime(true);
            return this;
        },
        /**
         * Updates the offset based on the gathered total study time for the day.
         * 
         * @method sync
         * @param {Boolean} includeServer
         */
        sync: function(includeServer) {
            Timer.offset = skritter.data.reviews.getTotalTime();
            if (includeServer) {
                skritter.api.getProgressStats({
                    start: skritter.settings.get('date')
                }, function(data) {
                    Timer.offset += data[0].timeStudied.day * 1000;
                });
            }
        },
        /**
         * @method update
         * @param {Backbone.View} self
         */
        update: function(self) {
            //get the new time to check in milliseconds and seconds
            var time = Timer.stopwatch.time();
            var seconds = (time / 1000) >> 0;
            //only check and update things when a full second has elapsed
            if ((Timer.time / 1000) >> 0 !== seconds) {
                Timer.time = time;
                self.render();
                //stop the review timer if exceeds the set limit
                if (self.isReviewLimitReached())
                    self.stop();
            }
        }
    });

    return Timer;
});
/**
 * @module Skritter
 * @author Joshua McFarland
 */
define('Strokes',[
    'createjs.easel'
], function() {
    /**
     * @property {String} defaultColor
     */
    var defaultColor = '#000000';
    
    /**
     * @property {Object} strokes
     */
    var shapes = {
        0: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EA1IAAKYg8AKloA8iqAeYhkAKi+AUjmAUYgeAAhuAKhuAKYhkAKjmAUi+AUYi+AUjSAUhGAKYkYAeiWAKkYAKIksAAIgUAeYgUAUAAAKAAAeYAKBGBQBQCgBGYCCA8AoAKBageYBkgeAoAAC0geYBagUCggUBagUYEigyFKgoF8gUYBaAAC0gUB4gKYFUgUGGAAE2AeYCMAKCWAUAyAAYBGAAAKgKAUgUYAegoAAgogegoYgeg8igh4iqhaYhGgogUAAg8AAYgoAAg8AAgeAK").cp().ef());
            stroke.setBounds(0, 0, 407, 71);
            return stroke;
        }(),
        1: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAkQAAyYiMAejIAohkAUYhuAKh4AegoAKYiqAengAynWAoYjIAKi0AKgUAKYgyAAgoAUAAAUYAAAoC0CMAyAKYAeAABQgKB4gUYEEgyCqgUG4g8YBugUDIgUB4gUYDwgeDcgUGugoYD6gUAKAAAegeYAegUAAgKgUgUYgehGiqhahuAAYg8AAg8AAjIAy").cp().ef());
            stroke.setBounds(0, 0, 297, 58);
            return stroke;
        }(),
        2: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AdiAAYgKAAhaAUhQAeYkEBGmaBkiqAeYigAelyAoigAKYiqAKgdAUAdAyYA8A8CMAoCCAAYAoAACCgKBugUYBugUFAgyEOgyYKohuCggeAygyYAegeAAgUgogoYgUgUgegUgogUYg8gUiCAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 224, 53);
            return stroke;
        }(),
        3: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AWgAeYo6CWloBGl8A8YhuAKgUAKAAAyYAAAeA8A8BQAoYBGAeAUAKBQAAYBQAAAUgKDchGYFyiCCqgyHWhQYDcgoAogUAAgeYAAg8hkg8iCAAYg8AAgoAAiCAe").cp().ef());
            stroke.setBounds(0, 0, 190, 56);
            return stroke;
        }(),
        4: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUyAeYlyBakiAomaAKYh4AAhkAKgUAAYgxAeAnA8B4A8YBuAyBaAKCqgUYBGAABkgKAygKYCggKDSgeCqgUYBQgKBugKAoAAYC0gUCWgeAegeYAygyg8hGhugyYhkgdhkAJjIAe").cp().ef());
            stroke.setBounds(0, 0, 188, 39);
            return stroke;
        }(),
        5: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AWCAAYgKAAgyAUgyAKYiqA8j6A8kiBGYiWAojIAyhQAUYhkAUg8AUAAAKYgJAoBtBQBkAAYAyAAAeAABQgeYFAhuGkhGHMgoYBkgKBagKAUgKYA8gegeg8hag8Yh4g8hkgThQAJ").cp().ef());
            stroke.setBounds(0, 0, 181, 51);
            return stroke;
        }(),
        6: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANSAyYjwBGjwA8iqAeYjbAogKAKBFA8YBaBGAyAKBageYBageIIiCCqgeYCMgUAogKAUgUYAKgKAKgKAAgKYAAgoiMg8hQAAYgUAAhQAUhkAe").cp().ef());
            stroke.setBounds(0, 0, 128, 39);
            return stroke;
        }(),
        7: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AK8AKYgeAAhGAeg8AUYiCA8hGAUigAoYigAogdAUAJAoYAKAoC+AoBkgKYAogKCggoCqgyYDwhQA8gUAUgUYAegogKgegogUYg8gohkgJhuAT").cp().ef());
            stroke.setBounds(0, 0, 102, 36);
            return stroke;
        }(),
        8: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJYAAYhkAKhGAUi+A8YiCAohaAogKAKYgTAeAJAoAeAKYAeAKBkgKDSgeYBQgUCCgUBQgKYCqgUAegKAKgeYAKgeg8g8g8gKYgygUhGAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 88, 28);
            return stroke;
        }(),
        9: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAKYgeAUAAAAAAAoYAAAoAKAeAoA8YAyBaAeBGAeBuYAUBGAAA8AKFKYAADcAKDSAAAoYAAAyAAD6gKD6YAAD6gKFeAAC0YAAH0geEOhkFKYgoCWAABkAyCCYBQDSAoA8AyAAYAyAABaigAKhaYAKgoAAqoAAsqYAKsgAAraAAhaYAKkYAyk2Ayh4YAKgeAKgoAAgUYAAgegKgKgygoYhQg8i+h4gogKYgygKgoAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 54, 449);
            return stroke;
        }(),
        10: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAKYgdAUAJA8AoBQYBaCMAKAoAKD6YAKDmAAMCgUG4YgKEOgKBGg8DmYgoC0AAAeAyCgYAyCMAeBGAoAUYAeAUAAAAAegUYAKgKAegoAUgeYA8hkAAgUAKlAYAKxgAUsCAeigYAKhuAehkAUgyYAehQAAgegygoYgegUgygogygeYgygUgogegKgKYgegUiCg8gUAAYgKAAgeAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 53, 323);
            return stroke;
        }(),
        11: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAoAAYgeAUgKA8AAAoYAAAUAoBkAyBkIBaC0IAAFeYAKF8AADSgUDmYgUCqgoDmgeCMYgoCqAUCWBQCqYAyB4BGAyAygeYAygUA8jSAUi+YAAg8AAiMAAiMYgUmGAAyIAUhaYAKhQAAAAgUgyYgehGjcjcg8geYgogKAAAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 46, 288);
            return stroke;
        }(),
        12: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAAYgKAKgKAUgKAUYAAAeAAAABGC+YBkDmA8DSAUDwYAeC+AeJOAUJYYAABkAKCCAABGYAKA8AABGAAAUYAAAyBkAeBGgeYAKAAAUgUAKgKYAUgeAAgKgKiqYgopOgUjcgKjcYAAiMgKi+gKhaYgKi0AKnqAKhkYAKhGgKhGgegoYgog8jch4hkgKYgUAAgeAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 58, 285);
            return stroke;
        }(),
        13: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAoAAYgoAUgJAyAdBuYBGC0AKBaAKEOYAKF8gUEihGG4YgUCCAKAoAoB4YAyCWBGBGAygyYAUgeAohaAehuIAehkIAAr4YAAmkAAloAKgUYAei0AAgogogoYgUgUhQg8hQgoYg8gUgeAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 39, 231);
            return stroke;
        }(),
        14: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAUYgTAeAJAyAoBuYAUAyAoBaAKAyIAeBkIAAFUYAADwgKCMgKB4YgoFeAKAeBGBkYAyBGBQBGAeAAYAoAAAehGAUhaYAUhkAAiggeloYAAhagKj6AAjSYAAmkAAAAgygyYhGg8huhGgygUYhQgKAAAAgUAU").cp().ef());
            stroke.setBounds(0, 0, 43, 197);
            return stroke;
        }(),
        15: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADcAKYgeAeAAAeAUBQYBGDSAKCCgKEOYgUHMhaGkh4D6YgyBkAAAKAABGYAAAyAAA8AKAeYAUBGA8BuAeAKYAoAKBGhGAyh4YBGiqAojmAUkiYAKi0AeloAUi0YAAgyAUh4AAhkYAUi+AUiMAUgeYAKgUAKgKAAgKYAAgohkgyiggoYhGgKgKAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 58, 241);
            return stroke;
        }(),
        16: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAKIgUAUIAUBGYAyBkAKBGAKCWYAACqgUDcgoBuYgeB4AAAKAKBQYAUBuBGCMAoAAYAeAAAyhGAUhGYAyh4AKhQAKl8YAKmGAAgeAehGYAKgoAAgKgUgKYgegojIhGg8AAYAAAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 37, 138);
            return stroke;
        }(),
        17: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAKYgUAUAAAUAKAeYAKAUAUAoAKAeYAUAyAAAyAAH+YAAEsAAEsgKAyYgKCMgUDwgUBkYgKBGAAAUAKA8YAeCMBGCWBGBQYAyAyA8goAehuYAUhQAAgegKnqYgUnqAAs+AKiCYAKgyAAgyAAgKYgKgUhuhahQgyYgegKgoAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 35, 246);
            return stroke;
        }(),
        18: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AA8AKYgoAKgUAeAAAUYAAAKAUA8AeAyYA8BuAeBQAUB4YAKBagKSwgUIcYgKIIgKMMAKDSYAKDSAUBQAyBGYAUAoAoAKAegUYAygoAeh4AekYYAekiAAiWAA08YAA2gAABGA8kiYAUhuAAAAgUgoYgKgegegUg8goYighuhagJhaAT").cp().ef());
            stroke.setBounds(0, 0, 52, 425);
            return stroke;
        }(),
        19: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAoAKYgoAUAAAoAAAeYAAAUAeA8AoAyYA8BuAoBaAUBaYAoB4AAcSgeJsYgUF8gKgUBuAAYBQAAAogUAKgoYAKgUAAhQAAhaYAAhQAKjIAAiWYAKj6AKmuAUsCYAKmGAUkYAoiWYAKgoAUhGAKgoYAKhQAAgKgKgUYgUgygygohugyYi0hQh4gTg8Ad").cp().ef());
            stroke.setBounds(0, 0, 60, 344);
            return stroke;
        }(),
        20: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAKYgnAKAAAoAnBaYAUAoAUAyAKAKYAAAKAKHMAAIcYAKOEAABkAUA8YAeB4AyAoAog8YAog8AAgUAoksYAAgeAKlUAAmGYAAqyAKjIAeiCYAKgoAAgoAAAAYAAgeg8gyhGgoYhag8hGgJg8AT").cp().ef());
            stroke.setBounds(0, 0, 39, 245);
            return stroke;
        }(),
        21: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AA8AAYgKAAgUAUgKAUYgdAoAJAeAoBQYBQB4AAAUAKD6YAKCCAAE2AAEEYAAKAAAAAAUAUYAoAoBkgUAegyYAKgKAKhQAKh4YAKhuAUigAKhkYAKhkAKh4AKgyYAUlyAei+AoiMYAUhGAKgogKgUYgKgohQg8hagyYhagoiMgogeAAYgKAAgKAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 56, 197);
            return stroke;
        }(),
        22: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAAYgUAUAAAeAUBaYBGCCAAAoAKD6YAAE2gUJOgUCMYgKBGAABaAAAoYAABGAAAUAeAyYAoBQAeAUAeAAYAUAAAogUAUgoYAKgeAKgoAAmQYAAmQAAg8AUjSYAymQAAgKA8h4YAUgyAKgeAAgUYgKgeg8g8hagyYh4hGhQgJg8AJ").cp().ef());
            stroke.setBounds(0, 0, 45, 205);
            return stroke;
        }(),
        23: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAUAAAKAUBGYBQCMAyDmAUDcYAAAyAKDmAADmYAAHMAAAKBGCMYAoBGAyA8AeAAYA8AAAeiggei+YgKg8AAgUgUkiYAAhQgKkOAAj6YAAjwgKjIAAgKYgKgUiqhkg8geYhGgegoAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 45, 196);
            return stroke;
        }(),
        24: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAKYgnAKAAAeAnBGYAUAeAUAeAAAUYAUA8AUD6AKFeYAAG4AUBGAyAAYAyAAAoiWAejwYAynMAUiqAKhGYAUgoAAgyAAgKYgKgogygyhkgyYhQgohQgJg8AT").cp().ef());
            stroke.setBounds(0, 0, 42, 138);
            return stroke;
        }(),
        25: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAKYgKAAgKAUgKAUYAAAUAAAKAUA8IAeBGIAKG4YAKDwAADSAKAUYAAAeAKAKAUAAYAyAeBugoAUgeYAAgKAKhkAAhkYAKj6Aej6AUhaYAKg8AAgKgKgeYgUgeigiggygUYgUgKgyAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 38, 118);
            return stroke;
        }(),
        26: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAUAAAeAUBGYBQDIBQEsAyFKYAKBaAUBkAAAeYAUB4BuCgAyAAYAeAAAKgUAUhaYAKhQgUi0gylKYgUiMgUi0gUhQYgKiWgehagegoYgUgUgogUhugeYhugKAAAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 51, 147);
            return stroke;
        }(),
        27: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAKYgdAeAJAeA8BaYBGBQAeBGBQEOYAUBQAoBGAoAKYAyAKAKg8gUi+YgKhQgKh4AAhGYgKigAAgKhugeYhkgehaAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 40, 75);
            return stroke;
        }(),
        28: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAKYAAAKAAAeAABaYAeDwAKAyAUAyYAeA8BGBGAUgKYAUAAAUhGAAgyYAAg8geiggohQYgUhGhahugUAAYAAAAgKAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 23, 61);
            return stroke;
        }(),
        29: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHWAKYgeAeAKAoAeB4YAoCWgKBaiMJ2YgoCWgyDcgUBkYhuHWiWJsAAAoYAAAoAAAKAUAUYAeAeA8AKA8geYAygUAKgKBGlAYAoiMAyjwAoiWYEYxqBGkYAohGYAehQgKgoiMiMYiCiCgogTg8Ad").cp().ef());
            stroke.setBounds(0, 0, 84, 277);
            return stroke;
        }(),
        30: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AD6AUYgUAUgKAKAKAoYAAAUAKAoAKAeYAoB4geDSiqK8YhaGGgJA8AJAUYAeAeBkAAAogeYAKgKAKgoAUgyYAKgyAyigAyiWYAyiMA8i+AUhaYAyiWBGigA8huYAUgoAKgeAAgKYAAg8hGhGiqh4YhkgygegJgoAd").cp().ef());
            stroke.setBounds(0, 0, 67, 171);
            return stroke;
        }(),
        31: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AIcAAYgeAKgUAeAAAeYAAAAAeAyAeAyYAeAyAeA8AAAUYAKAUAKCgAKC0YAUMqhaJ2jcImYgyB4jIGuhGB4YgnB4AAAoA7geYAogKAyg8BuiMYEOloB4kYCCnqYBumuAekEAUqAYAKm4AKgoAegoYAogygKgKiChaYiChaiWgdg8AJ").cp().ef());
            stroke.setBounds(0, 0, 101, 347);
            return stroke;
        }(),
        32: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMMAKYgeAeAAAUAyBaYBaCgAKBaAUFeYAUG4gUKogoH+YgUDSg8DShQCMYhaCWjICgkYCCYiWBQgTAUAdAUYBGAUDcgyCqhQYEYiCDcjwBQkYYAoigAKhuAKmaYAUtIAUomAKhGYAKgyAehkAehQYAyigAAAAgUgeYgUgyiChGiWgoYhkgUg8AAgUAK").cp().ef());
            stroke.setBounds(0, 0, 129, 351);
            return stroke;
        }(),
        33: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AScAKYgUAUAeAyBQBaYBuB4AKAUAUDSYAeGQgKJOgeHWYgeEEgeCChkDIYgoBageAohGBQYhuB4iCB4iMBQYh4BQkOCMi0BQYiMA8gKAKAAAUYAUAeBkgKDcg8YDIg8BageC0haYDchuCghuBahkYAygyBkiWAohQYA8iCAoh4AUjIYAylUAKjcAAqoIAKowIAUhuYAehkAAgKgKgUYgogyh4g8i+gyYhugUgoAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 172, 352);
            return stroke;
        }(),
        34: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AZyAAYgoAUgeAUAAAeYAAAUAUAoAUAyYBQCWAKAygKFKYAAFAgKCggeDmYgeDIhaFog8CgYiCFejIFojSEEYiMC0kiEOjSCWYjICWhtBkAJAUYAKAUA8gKBQgUYD6haE2jIEikiYC+i+Bkh4BkiWYBGhkBaigAUg8YAAgKAohaAohaYCCksBQkiAokYYAKhaAei+AUiWYAeigAUiqAKg8YAUiWAKhGAyigYAohaAAgeAAgeYgeg8kEiMhuAAYgoAAgoAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 215, 400);
            return stroke;
        }(),
        35: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AVuAKYgoAKgeAoAKAeYAAAKAeAoAoAoYAeAoAyBGAUAeIAeBGIAAGuYAAHggUC0gyGQYg8GahuEsjIEsYhkCqjIDIjICgYhuBak2DShkAyYhZA8AAAoBZAAYA8AABGgUC+hQYCgg8BQgyC0huYE2jSCqi0Cqk2YBaiMBkkYAojcYBamQAokYAKlKYAUkiAUkYAUhQYAKgoAUhQAKg8YAohuAAAAgUgeYgeg8jSh4iMgoYg8gKhGAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 197, 388);
            return stroke;
        }(),
        36: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUAAAYgoAKAAAeAeBaYBGCgAUBagUD6YgUFohQIShQEiYhQD6iqF8iMDSYh4C+jIDIi+CWYiWBuhuBkAAAKYAAAeAKAKAyAAYBGAABQgoCChQYEsi+DmjcC+kYYEEmGCqpiCCw4YAAhGAUhGAAgKYAKgKAKgyAKgoYAKhaAAgogogUYhGg8jchkgoAAYAAAAgKAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 169, 346);
            return stroke;
        }(),
        37: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANcAAYgyAUAAAUAoBaYA8BuAKBGAKCgYAUDmgoHqgoD6YgoDchaEEhkDIYhuDciqDIjmDSYg8AygyAygKAUYgKAUAAAAAKAUYAyAoB4g8DciqYCgh4CMiWBuigYCWjmBakYBGmkYAoksAKhaAUkOYAKiMAUi0AKhGYAeiMAAAAgUgUYgKgKg8gegygeYiMhGhQgTgoAJ").cp().ef());
            stroke.setBounds(0, 0, 126, 293);
            return stroke;
        }(),
        38: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ALuAKYgoAeAAAeAyBkIAyBaIAACgYgKFegyH+hGEiYh4HqiWFUl8JYYgeBGgJAeAdAKYAyAKBQhGCqi+YDSj6CMjwCWmGYB4lKBGlABQowYAoksAUhuAUgyYAAgKAKgeAAgUYAAgyhahQiChGYh4gygygJgoAT").cp().ef());
            stroke.setBounds(0, 0, 119, 312);
            return stroke;
        }(),
        39: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AeKAKYgeAUAAAyAeA8YA8CCAeCWAAC0YAAFyigH+ksJEYiqFKjIEskYFUYiWC+lAEsksDwYh4BagUAyAAAKYAKAUAKAACCg8YCWhQC0huC+h4YBuhQA8gyCMiWYE2ksCgjmEEngYCgkYB4kOBuksYBuksAyiqAykEYAoi+AKgUAyhuYAehGAeg8AAgKYAAhknCizhaA7").cp().ef());
            stroke.setBounds(0, 0, 248, 393);
            return stroke;
        }(),
        40: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAh6AAKYgUAUAAAyAUBGYAeBuAUCCAAC0YAKDcgUDIgeCqYgeCWhuFAg8CMYh4D6jIDcloEEYigBuhGAyiqBQYjIBknMCqiqAoYgUAKgeAKgKAKYgKAUAAAKAKAKYAUAUAoAAB4gUYJYhkISjSFokiYBahGC+jSBaiCYB4iWBujcBQjIYBGjIBamaAolAYAKhQAUhkAKgyYAKgyAKg8AAgKYAAhQj6iqiCgKYgoAAgKAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 263, 314);
            return stroke;
        }(),
        41: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AfaAKYgKAAgUAKAAAKYgKAKAABkAACCYAAC0gKA8gUBaYg8FKiWFejmFyYk2HqmGGarGI6YhaBQgJAeAJAUYAoAUBGgUCChGYEsiWDSiMEsj6YE2j6CgjIDcloYC+lKAeg8C+nWYA8iCBajSA8h4YCCkEAAAAhGhGYgygyiChQhageYg8gUgyAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 248, 326);
            return stroke;
        }(),
        42: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAlMAAAYgeAUgUAogeBQYgyCqjSFojwFAYiMDIgUAUoIJiYkEE2loFemGFKYg8A8gyAyAAAAYAAAeAegKBugyYD6huCgh4FeleYFUlALQtSHMpiYC0jcAAAABahGYB4hQAAgehugyYiChGiMgTgyAJ").cp().ef());
            stroke.setBounds(0, 0, 279, 295);
            return stroke;
        }(),
        43: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAisAAAYgUAAgKAKAKAeYAUBaAABGgUBaYgKBagUAehGCMYiCD6hGBui+DwYkYFUjSDclUEEYiqCWleD6jSCMYhQA8hGAyAAAKYAAAAAKAKAKAAYAeAUBkgoDIhQYIcj6F8kOGanMYBQhaBGhQAKAAYBGg8CqjcFynqYAyhGBGhQAogoYAygyAKgKAAgoYgKhQhGhQh4hQYiWhagoAAg8AA").cp().ef());
            stroke.setBounds(0, 0, 268, 266);
            return stroke;
        }(),
        44: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AccAKYgUAUAAAKAKBGYAUBugyDwhQDSYgoBkhkC+g8BaYhkCqj6EsiCCCYjIC+ksDwlKDcYi0B4gKAUAAAUYAeA8Gai0EYi+YFKjcDIiqC+j6YC0jwBQh4DSmkYCgksBGh4AogeYAUgeAAgogogoYgogyh4hagygUYgygKg8AAgUAK").cp().ef());
            stroke.setBounds(0, 0, 220, 248);
            return stroke;
        }(),
        45: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ATOAKYgUAUAAA8AyBuYAyB4AKA8gUC0YgUDcgoCMhGCgYiqFyjwC+o6D6Yi+BQgJAKAJAUYAUAUBGAKBQgKYBkgUDSgyBageYBugoDchaBGgyYDSiMDclABkkYYAUhGAyiqAeiMYAeiWAoiCAUgeYAohaAAAAjwh4Yhug8hkgogKAAYgKAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 172, 203);
            return stroke;
        }(),
        46: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AOYAKYgyAUAAAUAoBaIAeBQIAACqYAADIgUCCgoCqYh4HMjIEYmkEiYh4BagdAeAJAUYAUAUA8gKBugoYCqg8B4hGCqiWYCgiMBGhQBkjSYBai+AyiMAoigYAUh4AyjmAUg8YAAgeAUgyAUgyYAegyAKgogKgKYgKgyjmiMhaAAYgUAAgeAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 134, 208);
            return stroke;
        }(),
        47: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AB4AUYgeAoAKAUAoAyYAoAyAAAKAUCMYAeDSAKC0gKCqYgUE2gUBaiWF8YgoBkAAAeAAAKYAeAUBGhGBaiWYBkigAyiCAyjcYAoi+AKiMAAkOYAKiCAAiCAAgeYAKgoAAgegKgUYgUgUi+hkg8AAYgeAAgKAAgUAU").cp().ef());
            stroke.setBounds(0, 0, 47, 182);
            return stroke;
        }(),
        48: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGQAKYgyAUAAAUAoA8YBkC+AKGahaEEYg8C+hQCCi0C+YhQBQgKAeAAAKYAeAeC0hkB4hkYBQhGB4igAohGYAohaA8iqAUh4YAKgoAKhuAAhQYAKhQAAh4AKhQYAKhuAAgegKgKYgUgeg8gUhQgeYhagKgyAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 75, 161);
            return stroke;
        }(),
        49: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABuAKYgUAKAAAeAeAoYAUAoAKB4AAC0YAADcgKBGiMFKYgTBGA7geBGhQYCgi+A8jIAel8IAUiCIgogeYgegeiCgygoAAYgKAAgUAAAAAK").cp().ef());
            stroke.setBounds(0, 0, 38, 109);
            return stroke;
        }(),
        50: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AP8AAYgUAKAAAeAUAyYAeBQAACqgoCWYg8EOhuEOiqEiYiMDwiWDckYFeYhQBagUAyAAAKYAKAKAygeB4haYFyksEOleDmn0YBajSAehGB4kiYAohkAyhkAKgUYAKgUAUgeAAgKYAAgegygygygeYg8gojIgdgoAJ").cp().ef());
            stroke.setBounds(0, 0, 143, 229);
            return stroke;
        }(),
        51: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ATOAAYgoAKgKAyAeBGYAUBGAKBQgKA8YgUBuigFeigD6Yi0E2lKG4kOEsYgoA8gyA8gKAUYgKAeAAAAAKAUYAoAoBQgyC0igYCMh4CCiMC0jmYEsloCWjIEEmuYAogyAyhQAogyYAogoAogyAAgKYAKg8gUgyhahQYg8hGgogUhGgoYhQgog8AAgoAA").cp().ef());
            stroke.setBounds(0, 0, 169, 231);
            return stroke;
        }(),
        52: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AcmAKYgKAAAAAogKAyYgKBugUBQg8BuYiCDwjIEOjwD6YjwDwkiDcnqFKYhGAyg8AoAAAKYAAAeBGgUC0hGYFUiCEOigEEjcYDci0F8maE2l8YAyhGBGhGAUgUYAogeAKgKAAgeYAAhah4h4iMgyYhGgUgyAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 222, 207);
            return stroke;
        }(),
        53: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("Ac6CMYiWEsiWDmi0DSYk2FelUE2muFKYkrDwgKAKAdAUYBGAyEYiCFyjwYBag8CChaA8gyYDwjIEYlAFengYC+j6Aeg8AKgyYAUh4g8hkhageYgUgKgUAAAAAAYgKAAgoA8goBQ").cp().ef());
            stroke.setBounds(0, 0, 212, 216);
            return stroke;
        }(),
        54: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AW0AUYgKAKgKAeAAAeYgeEOigEikOEYYjcDci0CCl8DSYhkA8hkA8AAAAYgJAUATAUAeAAYAyAADcgyBkgoYBkgoEYiCBGgyYBag8BQg8B4h4YCMiWA8hGCgjmYB4iqBuiCAogyYAogogKgohuhuYh4huhGgTgyAn").cp().ef());
            stroke.setBounds(0, 0, 181, 166);
            return stroke;
        }(),
        55: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AOsAKYgKAKAKAKAKAoYAKAyAAAUgKBaYgKCCgoBuhQCqYh4EEjwEEleEOYg8AygyAoAAAKYAAAKAAAKAUAAYAyAKEEiCCqiCYDwi0CgjSC+mGYAyhaAyhuAUgoYAegeAKgoAAgKYAAgeg8gyiChQYhagogKAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 126, 156);
            return stroke;
        }(),
        56: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUeAKYgKAKgKAegKAUYg8DIksFelKD6YhaBGkYDIiCBaYgyAegoAeAAAKYAAAUBQAABQgUYBageCMg8B4g8YBkg8E2jmCgiCYBkhQGumkAUgeYAohQg8g8i0gyYhGgKgeAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 165, 132);
            return stroke;
        }(),
        57: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APKAKYgUAKAAAUgKAoYAAA8gyBGh4CWYiWC+i0CMloDSYgyAegeAeAAAAYAAAyFAhQC0haYBkgyCqhuBkhQYCgiCAogeBGg8YAogoAygoAKgKYAogeAKgegUg8YgUg8g8gyhGgeYhQgegeAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 129, 99);
            return stroke;
        }(),
        58: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AIcAKYgyAUAAAeAyBkYAoBQAAAegeCWYgoCWg8C+hQC+YhGC0igFKhQCCYhFCMgKAoBFgUYAogKCCiCBkiMYDIj6CgkOCql8YAohGAohQAegoYAohGAAgKAAgoYAAgygKgKg8gyYh4hujIg7hGAd").cp().ef());
            stroke.setBounds(0, 0, 101, 176);
            return stroke;
        }(),
        59: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHgAUYgKAKAAAUAAAKYAAAUAKAyAAAoYAUC+iMFUjIDwYh4CWgoA8AAAUYAAAUAAAAAegKYBagKB4haCMiMYB4h4A8haBujIYAyhaBGhuAegoYAUgoAegyAAgKYAAgog8gyhugyYhugyhGgJgoAd").cp().ef());
            stroke.setBounds(0, 0, 87, 119);
            return stroke;
        }(),
        60: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADIAAYgeAUAAAoAUAeYAoAoAUB4AACgYAAB4AAAUgeA8YgeBkgyBGhQBaYhjB4AeAKCLhQYCChQBahkAyiMYAohkAKhQAKi0YAKigAAgKhQgoYg8gehagJgoAJ").cp().ef());
            stroke.setBounds(0, 0, 48, 98);
            return stroke;
        }(),
        61: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AO2AKYgKAAgKAeAAAoYgKBagKAehaBkYh4CMiWCWjmC+YksEEgdAoAJAKYAeAoDwh4GkjwYBuhGCMhaAygeYB4hQBkgyBGgUYCMgoAAhGhuiCYh4iCi+hZgyAn").cp().ef());
            stroke.setBounds(0, 0, 140, 111);
            return stroke;
        }(),
        62: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJOAAYgeAUgKAUAUAyYAUBGgKAohQCgYgyBkhGB4iWDcYhuCqhkCWgKAUYgKAoAAAoAAAAYAKAAAegUAegUYAegeAygyAogeYAogeC0i0CqiqYC0i0C0igAegeYBkg8AKgohGhGYhkhkjwhFhQAT").cp().ef());
            stroke.setBounds(0, 0, 106, 123);
            return stroke;
        }(),
        63: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGQAKYAAAAgKAyAAA8YAABGAAA8gKAoYgeBQhkDSiCDmYg8Bug8BkAAAUYAAAeAKAUAeAAYBGAAAegeE2mGYBQhaBahuAygyYAogoAegoAAgKYAAgogyhQhahaYhuhugygdgoAd").cp().ef());
            stroke.setBounds(0, 0, 75, 110);
            return stroke;
        }(),
        64: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGkAAIgeAKIAKA8YAAAoAAAogKAUYgUBGhkCqiCC+YhGBug8BagKAUYAAAeAAAKAoAAYAogKDSiWCqiMYCqiCBQg8BQgyYAygeAUgogUgeYgKgyhkhGhkgyYhugygoAAg8AA").cp().ef());
            stroke.setBounds(0, 0, 86, 87);
            return stroke;
        }(),
        65: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHCAKYgKAAgKAUAAAKYAABGhQBajcCgYipCMAAAUCVgeYBagUDSg8CCgoYAygKAygUAUAAYBagUAKgyhGhkYhaiChug7goAd").cp().ef());
            stroke.setBounds(0, 0, 74, 51);
            return stroke;
        }(),
        66: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AWMAKYgKAUgKAUAAAUYgKAUgKAeAAAKYg8BaomEEowC0YigA8gyAUAAAUYAAAKAAAKAAAAYAKAUEOgeCqgoYHChaCggoDchQYCWgoDwg8B4gKYCMgKAUgKAAgyYAAgegUgygegeYhahGkEiWg8gKYgoAAgKAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 196, 80);
            return stroke;
        }(),
        67: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AY2AKYgKAKgKAKAAAeYAABQgyBQi+DIYh4CCh4B4h4BaYjcCgoSFKiMAyYgyAUgeAUAAAAYAAAKBQAUAyAAYAoAADIg8C0hGYGGiWHgkiGulUYA8gyBQgyAogUYBQgyAygoAAgeYAAhQkOiCi+gKYhGAAgUAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 217, 138);
            return stroke;
        }(),
        68: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAKAAAKAKAUYAAAUAoAeAoAeYBuBaA8AyCWCqYDSDmCgC+DIEEYF8HqCWC0FeFoYEOEOgUAAHMAUYDSAKBuAAC0gKYE2gUBQgKAegyYAKgKAAgKgUgKYgogeh4gyi+gyYhagejchGiggyYkihkgegKiMhQYlyjIjIigl8mGYjmjci0jSjwkiYiqjShGhGhQgyYhag8iMgJgoAT").cp().ef());
            stroke.setBounds(0, 0, 350, 245);
            return stroke;
        }(),
        69: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAUAAAKAAAKYAAAKBGAoBGAoYC+BaBQAyBGBQYBkBuE2IcDcHMYCWE2BQCWCMDwYCMDwDIE2AeAeYAoAoBaAyBGAUYBaAUHMA8C0AKYAoAABQAKA8AKYBkAKAKAAAogUYAUgKAUgKAAgKYAKgUgygehQgoYiWhGomkYhQgyYjwiCi0i+j6lKYi+kEigkEjSl8Yk2pYhkh4jShuYiCg8jSgTgyAd").cp().ef());
            stroke.setBounds(0, 0, 316, 298);
            return stroke;
        }(),
        70: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ACgAKYiMAegnAoATAeYAKAABGAUBQAKYC0AUBQAUBkAyYCMBGGuF8GGF8YDIC+DwDSFUEOYD6C+AUAKFAhGYEYgyGahkAygeYAygeAogogKgUYgKgUgygUhGAAYhaAAqohQh4gUYjwg8jIhalKjcYkEiqi+iglolAYkikEiChaiWgyYhugeiMgJhaAT").cp().ef());
            stroke.setBounds(0, 0, 368, 191);
            return stroke;
        }(),
        71: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAoAKYgeAAgKAKAAAUYAAAeAAAUBQAoYBaA8B4BkBGBGYAUAoA8BQAyBQYBGBuBkCgDwF8YC0EOFoGaBkAoYBuAyBQAAE2geYEEgeC+gUA8gKYBGgKAegUgegUYgKgKiCgyiMgyYo6jIgogKiWhkYkOi+k2lKl8omYiCjIgogohGgoYhag8iggThaAT").cp().ef());
            stroke.setBounds(0, 0, 264, 198);
            return stroke;
        }(),
        72: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAAYgeAKAAAUAAAUYAAAUBQA8A8AoYA8AeC+DmDmEsYCqDwB4CCDwDmYE2FAAAAAGQgoYGkgyAoAAAAgyYAAgKgUgKgUgUYgKgKi+hGjShGYkshkhagehGgoYi+huh4hajwjwYigiWgyhGjwkYYg8hGg8g8gegUYhGgyhugTgyAJ").cp().ef());
            stroke.setBounds(0, 0, 233, 164);
            return stroke;
        }(),
        73: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAKYgnAeAAAKBFCMYFeI6NSRMDwC0YBaBGAoAKCqgUYBGAABugKAyAAYHqgeBagKAegKYAUgKAUgKAAgKYAAgUg8gohGgeYg8gUnCighageYiqg8i0hQhuhaYkijcrar4kYlyYhuiCAAgJgyAT").cp().ef());
            stroke.setBounds(0, 0, 269, 212);
            return stroke;
        }(),
        74: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAKYgeAKAAAoAAAeYAAAKAyAoBQAyYAUAUA8AyAyAoYEsD6H+FyEYCgYBGAoCMBQBuBGYDmCCAeAKBkAKYBQAKCMgeFehaYD6g8BQgeAygyYAegegKgegygKYhQgKjwgeiqgKYmGgUhagUjwhGYjIhGighGiWhaYhGgohagygogUYhagymQkEjSiWYjSiMgegJg8AT").cp().ef());
            stroke.setBounds(0, 0, 301, 143);
            return stroke;
        }(),
        75: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAAYgdAUAJAeAyBaYCWDSG4HqGGGaYCMCWAyAeBkAKYBaAKI6hQCCgoYAegKAegUAKgKYAUgUAAAAgegeYgUgKg8gehugeYnMiMksiMj6iqYkOjIm4leiCh4Yg8gygKAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 221, 145);
            return stroke;
        }(),
        76: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMWAAYgUAAgoAKgoAAYgoAKhaAUhGAUYiMAogyAKiWAKYh4AKgeAKAAAoYAAAyBGBaBkA8YBaAyAegKBug8YBkg8B4g8BugUYBageDIAABkAeYDmA8FUCCGaC+YGkC+JsC+DIAAYBkAAC0g8DShkYCChGC+iCgKgKYAAgKgoAAhagKYkiAAn+gUhugKYlegelKhGnWigYiqg8j6haiCgyYiqhGhugei0AAYhGAAhGAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 415, 99);
            return stroke;
        }(),
        77: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAKYAAAoAAAoAoAoYBGBGAoAKCggeYB4gKCMAABaAUYBaAUKUDwKoEOYEOBuAKAABQAAYBkAAAKAAEEhuYEih4DIhaAUgUYAogegKgegogUYgogKlKAKlAAKYleAUi+gKjwg8YhQgUkYhQkOhQYq8i+AoAAjmAAYhuAKhugKgeAAYg8AAgKAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 336, 84);
            return stroke;
        }(),
        78: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAKYgnAyATBQBkB4YA8A8CqDSCMC0YAoAyA8AeAyAAYAeAAAKgKAegUYAogoAKhGgKh4YgUi+hkhkmGi0Yh4g8hGgJgKAT").cp().ef());
            stroke.setBounds(0, 0, 74, 80);
            return stroke;
        }(),
        79: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAAYAAAAAAAUAAAUYAAAUAKAUBQBQYBaBkAyAUA8gKYA8gKgKhug8g8YgogyjSgxgeAJ").cp().ef());
            stroke.setBounds(0, 0, 34, 28);
            return stroke;
        }(),
        80: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAKYAAAKAAAKAAAeYAKAeAeAoBkBaYDmDSDwDwEOEiYEEEOAyAyAoAAYAAAAAUgUAUgUYAegeAAgKAAgoYAAhGgeiMgegyYgogyiCiChQhGYjci0q8nWgoAAYgKAAgKAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 131, 128);
            return stroke;
        }(),
        81: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgdAoATAeBkA8YBkAyHCEiDICWYD6C0AoAUAygeYAUgKAUgeAKgeYAKgeAAgKgUg8Ygyi+hah4iWhGYiqhQkihakig8YiMgUgUAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 125, 82);
            return stroke;
        }(),
        82: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAUYgTAyAJAoBuCqYCCDIBuC0CCDmYCgEYAyAyBQgyYAygeAUgyAAiCYAKjIgehaiWigYh4h4ngmGgeAAYgKAAgKAKgKAK").cp().ef());
            stroke.setBounds(0, 0, 85, 119);
            return stroke;
        }(),
        83: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AFeAKYgUAUgUAegUBaYg8CghQDShQCqYhGCMAAAKAABQYAABkAKBaAoA8YAoBGAoAKA8goYBugyBujIA8kOYAehQAAgoAAi+YAAjwgKhGgygyYgogUgKAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 51, 124);
            return stroke;
        }(),
        84: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJiAAYgKAKhGA8hGBQYhQBQhuBkg8AyYiCBugoAogUBaYgUBkAAA8AUAeYAUAUAKAKAygKYBQgKBGgoBuhuYA8g8BGhQAegyYBGhkBQi0AUhaYAKg8AAgKgUgUYgUgUgeAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 70, 84);
            return stroke;
        }(),
        85: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABuAUYgeAUAAAyAeA8YAUAeAAAeAKCCYAADIAAAUhuE2YgeBkAABaAKCCYAeCMAoAyAoAAYAeAABahaAegyYAohGAeiCAeiqYAeiWBQjSA8hQYAegyAAgKAAgoYgKg8AAAAhGg8YhQhQiChkgygUYgogKgoAAgoAU").cp().ef());
            stroke.setBounds(0, 0, 58, 139);
            return stroke;
        }(),
        86: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AE2AKYAAAKgKAygKA8YAAA8gKA8AAAKYgUAygyA8hkBuYhuB4gJAKAJCCYAeCgAyBuA8AAYA8AABQhkBGiqYBQjSBajwAAgUYAAhQg8iCg8goYgygUgUAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 53, 102);
            return stroke;
        }(),
        87: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AZ8BGYleBklABQh4AUYgyAUiWAeiCAeYjIAygoAKh4AAYiMAKgKAAgUAUYgKAeAAAyAKAoYAKAUCgCCBuA8YBGAyAUgKCghaYC0huBugyFyiMYC+hGDShQA8gUYCMg8CqhkAUgeYAUgeAAAAgUgUYgUgKgUAAgKAAYgUAAh4AeiMAo").cp().ef());
            stroke.setBounds(0, 0, 201, 81);
            return stroke;
        }(),
        88: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AYiAUYgeAUg8Ayg8AeYgyAoi0B4igBuYiqBuj6CqiMBkYiMBkiWBkgyAeYiCBGgTAeAnA8YAoAyBQAoBQAeYBuAogeAUFUleYEYkYBQhGC0iWYC+i0EEjwAUgUYAegygegJhQAd").cp().ef());
            stroke.setBounds(0, 0, 167, 131);
            return stroke;
        }(),
        89: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AVQA8YlACgsMFohGAUYgUAAgoAKgeAAYhGAUgeAUAAAyYAAA8AeAeCqBGYC0BGAAAAB4huYCCiCAygoGGj6YDmiWCChQAogoYBGhGAUgegKgUYgKgTg8AJh4A8").cp().ef());
            stroke.setBounds(0, 0, 156, 92);
            return stroke;
        }(),
        90: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ALaB4Yh4BGigBahGAyYiMBQgeAUhkAAYg8AAgKAAgUAUYgUAeAAAoAKAoYAeAeCCBkBGAUYAoAUAKAAAUgUYAKgKAUgUAKgUYAUgeCCiMC0i0YCqigCMiMAAgKYAAgJg8ATjIBu").cp().ef());
            stroke.setBounds(0, 0, 100, 73);
            return stroke;
        }(),
        91: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ARMAKYgKAAhGBGg8BGYkOEsiMCgiCCgYhQBahQBQgKAAYgoAUgUAAhQgeYhQgegUAKgKAoYAAAoAUBaAyBuYAeBGAUAeAyAyYBaBQAyAUA8geYAUgKAegoA8h4YAohaA8iCAohGYBaigFAocBQhuYAegoAUgyAAgKYAAgogUgJgoAT").cp().ef());
            stroke.setBounds(0, 0, 117, 143);
            return stroke;
        }(),
        92: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AOsAKYgyAegoA8lAHMYigDwigDcgUAeYgeAUgyAogoAeYgoAegeAUAAAUYgJA8AxDmA8BuYAeBGBkBkAyAKYA8AKAUgeAUigYAUiWAehGGGuEYC0maAUhQgoAAYAAAAgUAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 101, 180);
            return stroke;
        }(),
        93: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHCAUYgeAUhGA8hQA8YhQBGhQA8goAUYgoAUgUAKgKAUYAAAeAACqAeA8YAKAyBGBGAUAAYAeAAAKgKAUhQYAUg8CqlKBaiqYA8hagKgThGAn").cp().ef());
            stroke.setBounds(0, 0, 52, 75);
            return stroke;
        }(),
        94: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAnsAAKYg8AKmQBGjSAoYgyAKh4AKhaAUYjcAemaBGleA8YiMAUjIAehaAUYi+AUgKAKAAA8YAABGBaAyCCAKYA8AAAUAAB4goYC0gyEOhGDSgoYCWgeH+haB4gKYAKAABagUBkgKYC0geC0gKAoAKYAKAAAeAUAUAKYAeAeAKAKAAAeYAAAUgoBkgoBuYgoBugeBaAAAKYAUAoAogKB4haYCChkCMhGCMg8YCCgyBGgoAAgUYAAgomGkihageYg8gKgeAAhaAK").cp().ef());
            stroke.setBounds(0, 0, 320, 80);
            return stroke;
        }(),
        95: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("Af4AKYkEAel8Ayi0AeYjwAenMA8hQAKYgeAKhuAKhaAKYi0AKgeAUAAAyYAAA8BkBGBuAKYA8AAAeAABGgUYDmhGC+geG4g8YJEhQCqgKBGAeYBGAoAAAAiWD6YhkCggKAUAKAoYAAAeAogKCqhQYCghQBagoD6hGYBugeAegUgKgoYgKgUi+i+huhaYh4hkgygJi+AT").cp().ef());
            stroke.setBounds(0, 0, 272, 77);
            return stroke;
        }(),
        96: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AS6AeYh4AojwBGjmA8IiqAyIjSAAYiCAAhaAKgKAKYgdAUAdBQBGA8YA8AyAoAUBQAAYBGAKAAAACghGYAygKCqg8C0g8YEYhaAogKAeAKYAUAKAUAKAKAKYAoAogKAUjSEEYjmE2gyBGAAAUYAAAUAKAADSiWYHClKA8goCWgyYAegKAogUAKgUYAygegUhGhQhGYhGg8i+iCgogKYg8AAg8AAhuAe").cp().ef());
            stroke.setBounds(0, 0, 182, 99);
            return stroke;
        }(),
        97: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AWMAUYmkCgqoCqjcAAYhkAAgJAAATA8YAyBGAyAyA8AUYAeAKAeAKAKAAYAKAABkgeBugoYFeh4E2hGCMgKYBQgKAAAAAyAeYA8AyAAAUiCDwYgyB4gyBaAAAKYAAAKAKAKAAAKYAUAKAAAAAUgUYAKAAA8gyA8gyYC+iMDIiCB4g8YAygeA8geAKgKYAUgogegyhag8YjwigiMg8g8AAYgKAAgeAKgeAK").cp().ef());
            stroke.setBounds(0, 0, 205, 89);
            return stroke;
        }(),
        98: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUoAeYhGAUh4AohaAUYiqA8iqAoleBGYkYA8gyAUgUAeYAAAUAABGAeAoYAUAUAKAKAogKYAeAABageBageYCqgyGQhuDmg8YC+goBkAAAKAyYAKAegeB4geBaYgUBQAeAUA8goYCqh4DmiCA8gKYAogKAogeAAgUYAAgohuhQi+hQYiCg7g8AAigAn").cp().ef());
            stroke.setBounds(0, 0, 198, 60);
            return stroke;
        }(),
        99: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ATiAyYleCCjIAomaA8YkiAoAAAAAABkYAAAeAAAeAKAKYAUAeBGgKBkgeYC+gyH0huD6gyYC0geBGAAAeAeYAoAoAAAyAAF8YAAHCgKNcgUKKYgKEOAADwAAAKYAKAoAyAKBaAAYBQgKAegeAKhGYAKgeAAi+AAjSYAAmkAKoSAen+YAUp2AKgoB4jSYAegoAAgogegyYgUgog8gyi0huYiMhPAAAAjwBF").cp().ef());
            stroke.setBounds(0, 0, 192, 328);
            return stroke;
        }(),
        100: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APUAAYgKAKg8AUgyAeYjIBajIA8jwAyYigAegoAKgKAoYgKAyAAAeAUAeYAoAoA8AABQgeYBQgeFehuC+goYCqgyAUAKAUA8YAeA8AAHWgUPKYgUR0AAg8AeAeYAeAKAKAKA8gKYBagKAegKAUgoYAAgUAKjmAKnWYAKuOAUoSAeh4YAUg8AehGAohQYA8hkg8hQk2igYhGgegoAAg8AA").cp().ef());
            stroke.setBounds(0, 0, 149, 293);
            return stroke;
        }(),
        101: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJsAKYigA8leBkgyAAYgUAAgoAoAAAeYAAAeAKAKBGAUYAyAKAUgKCWgeYBagKBkgeAogKYBGgUAeAKAUAyYAAAKAKBaAKBQYAKCCAAA8gUCqYgKDSgoDwgoCqYgeCMAKBGA8BuYA8BuA8BGAeAAYAoAAAog8AKhGYAUhGAKk2AUo6YAKloAKhGA8huYBQiWAKgKgegeYgegUiCg8hGgUYhQgKgyAAg8AK").cp().ef());
            stroke.setBounds(0, 0, 106, 193);
            return stroke;
        }(),
        102: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AaaAUYjwBQmkBui+AeYigAUj6AUjIAAYjmAAgTAKAdBGYAUAeBaBQAyAUYAoAUCCAAAygUYAygKGuhaDcgoYC+geDmgeB4gKYCWgKAoAegKB4YAABaiqPKiWLuYgeCqgoDmgUBaYgoDIAKAUA8AUYAyAUBQgKAygUYAKgKAUgUAKgeYAUgUAei0AojIYBQnMBQmaBGk2YCCpEAehkBkiCYAegeAegoAAgKYAKgygUgygygyYgyg8jciqgygeYgygKg8AAhuAU").cp().ef());
            stroke.setBounds(0, 0, 230, 298);
            return stroke;
        }(),
        103: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ARWAoYjcAylUBGk2A8Yj5AogKAKAnAyYAoAoA8AeBQAUYA8AKAUAAA8gUYD6hQH0huBuAAYA8AAAKAKAeAUYAyA8AKBkgUCgYg8HMhQHqhaH+YgeCCgUB4AAAUYgKA8BGAoBugeYBagKAKgKAKiCYAymQA8l8AojwYBQloBul8BQiCYAog8gKgegygyYhGhGkEhuhQAAYgUAAhkAUhkAU").cp().ef());
            stroke.setBounds(0, 0, 179, 238);
            return stroke;
        }(),
        104: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJYAKYjSA8i+Aeh4AAYhtAAAKBQB3BGYAyAeAeAAC+gUYB4gKAKAAAeAUYAoAUAUAygKBGYAAAUgKAyAAAeYAAAegKBGgKAoYgKAogKBkgKBGYgeDIhQHqg8EEYgeCWgKBuAAAKYAKAoAeAeAeAKYAoAKBQgUAUgeYAKgKAUhkAUhuYBamkBGkOB4mQYBQkEAUg8BQhQYA8g8AKgegUgyYgUgyhahQhkhGYh4hGgygJhkAT").cp().ef());
            stroke.setBounds(0, 0, 110, 217);
            return stroke;
        }(),
        105: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJEAAYAAAKmaA8haAKYgyAKgUAKgKAKYgTAoCVBkBQAAYAUAABQgUBagUYCqgeAAAAAUBGYAKAeAAAegKAyYgKBQiWJOg8DmYgeBagUBQgKAUYAAAoAUAKBaAAYBQAAAogKAegyYAAgKAohuAehuYBkmQB4k2BaiWYBGhaAAgehGgyYgyg8iWhag8gUYgegKhGAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 101, 151);
            return stroke;
        }(),
        106: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AWWAKYgUAKgoAKgUAKYgoAUjwBQh4AeYjIA8jwAeksAUYg8AAg8AKgKAKYgoAKgoAeAAAoYAAAeAAAKAUAKYAyAyCCgUI6huYHMhaCWgUBQAeYAeAKAKAAAUA8YAoCMAKBuAKGkYAAG4gKFegUB4YgeBkAKBQAyBaYAyBaAoAyAogKYAogKAyg8AyhkYBGiWAKgegUi0YgUjIgUkiAAlKYAAleAKgeBQigYA8iCAAgegegoYgygoiWhahug8YhugogogJhkAT").cp().ef());
            stroke.setBounds(0, 0, 202, 233);
            return stroke;
        }(),
        107: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AVGAUYgoAKiMAeiCAeYleBGqKCggUAUYgdAoAJBkAyAUYAUAKB4gUB4geYDmhQJih4CMAAYBuAAAUAUAUBQYAKBaiMNmg8CqYgoBuAKBaA8BGYAoAoAeAAAogeYBkhGA8iqBkngYA8kiA8h4CWigYBahkAUgUgKgoYgKg8iChajmhuYiMg8gogJh4Ad").cp().ef());
            stroke.setBounds(0, 0, 203, 180);
            return stroke;
        }(),
        108: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ASIAAYgUAAgUAKgKAKYgUAAhkAehuAeYhuAejIAyh4AeYjwBGhuAegoAAYgUAAgUAKgKAKYgTAUAJAeA8AeYCCBGBaAACMgoYCgg8GuhaBaAAYBuAAAUBagoGGYgoGkgoEigyDcYgeBkAUBaAyAeYAUAKA8gKAegKYAegUAohGAUhQYAoiCAyloAoleYAKgyAKhGAKgoYAUhaBGiMBGhQYCCiWgKgejchuYh4g8iMg8goAAYgUAAgeAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 172, 192);
            return stroke;
        }(),
        109: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQQAKYgUAAg8AUgoAUYjSBajcA8kYAeYigAKgoAKgKAeYAAAeAABGAeAeIAUAeIEEg8YCMgeC+goBQgKYC0goCCgUAoAKYAyAKAKAUAUCMYAKBkAABQAAEOYAAC0gKCgAAAUYAAAKgKAogKAoYgKAyAAAUAUAoYAUBGAyBkAoAUYAUAUAAAAAogKYAogeBQiCAehQYAeg8AAAKgKmGYgKlyAKhGA8h4YAUgyAUg8AAgKYAAgoh4hki0hQYhkgyg8gJhQAT").cp().ef());
            stroke.setBounds(0, 0, 159, 165);
            return stroke;
        }(),
        110: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AE2AeYgoAKhQAegyAUYh4AogUAUAAAoYAAAUAKAKAoAKYBGAUAUAABkgoYAygUAygUAKAAYA8gKAAAAAAFyYAKEsAAAoAUAKYAUAKB4gUAUgUYAKgKAAgyAKgyYAKjSAyjwAohQYAegyAAgUgegUYgogojIhQg8AAYgUAAgyAKgoAU").cp().ef());
            stroke.setBounds(0, 0, 75, 89);
            return stroke;
        }(),
        111: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ARMAKYgeAKg8Aeg8AUYiqBQkiBalUBGYiWAeAAAKAAAoYAAAyAeAUAyAUYBGAUAeAACCgoYBGgUBkgUAygUYA8gKCMgeB4geYB4gUBkgeAUAAYAyAAAyBaAABQYAABGhGGkgyDSYgUB4AAAyAeAUYAyAoB4AAAegoYAUgUAUg8AyjSYBGksBQjIBuiCYBQhaAKg8gyhGYgegeighQiWg8YhkgegygJhQAT").cp().ef());
            stroke.setBounds(0, 0, 171, 138);
            return stroke;
        }(),
        112: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AM+AAYgUAKgyAegoAUYhuBGi+BGkOBGYiMAegdAoAdA8YAUAUAKAAA8AAYAeAAA8gKAogKYFehkBugUAygKYAyAAAKAAAUAUYAeAeAAAAgKBQYAAAogUBugUBaYgoCqAAAyAUAUYAeAoCWAAAogoYAKgKAUg8AUhQYAyjIAohQBQhkYAUgUAUgeAKgUYAUg8gUgehagyYgogehGgogogUYhagygygJg8AJ").cp().ef());
            stroke.setBounds(0, 0, 128, 93);
            return stroke;
        }(),
        113: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AFKAoYgoAUhQAehGAeYhGAUg8AUgKAAYAAAAAAAKAKAUYAoAoAoAKCCgeYBGgKBGgKAKAKYAeAAAKAAgKAoYAAAUgUBagoBaYgeBQgeBQAAAKYAKAoBuAUAogeYAKgKAUgoAUgoYAyh4AyhaAyg8YBQhkAAgUh4hQYiWhZgUgKhkA7").cp().ef());
            stroke.setBounds(0, 0, 71, 66);
            return stroke;
        }(),
        114: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAgWAAKYmGBujwA8jwAyYiMAUleAoigAUYgyAAg8AAgUAKYgeAAhaAKhaAAYi0AKgeAKAAAoYAAAeAoAoBQAeYBaAoBkAKB4gUYAogKC+geC+geYC+geDcgeBagKYI6haAKAAAyAKYBkAKBQBuAACCYAAB4iMKKh4G4YgoB4AKBGAyAeYA8AUBugKAogoYAegeAUhGAyjmYBQmGA8jcBujIYA8iCAegyCCigYAogyAAgKAAgoYAAgogKgegKgUYgegohuhGi0haYiMhGgegKgyAAYgoAAgyAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 275, 200);
            return stroke;
        }(),
        115: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAg0AAAYg8AUkYAoh4AKYjIAUlyAykEAoYjwAok2AoiWAUYgoAAgoAKgKAAYgdAUAJCCAoAyYAeAeAoAACCgeYFohaCCgUGQg8YHqg8FAgeBuAeYBGAUAKAeAABkYgKBki0KKg8CMYhQC+AoCgCCgoYAogKAyg8A8hkYAehQBajcAoiMYBGjcBQiCCWiMYAygyAygyAAgKYAKgogUgyhGg8Ygygyiqhuhkg8YgygehQAAgyAA").cp().ef());
            stroke.setBounds(0, 0, 270, 163);
            return stroke;
        }(),
        116: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAnOAAAYgUAKgyAKgyAUYiCAoi0AekiAoYiWAUiqAUgyAKYg8AAhQAUgyAAYgyAKiCAUh4AUYhuAUiCAUgyAAYigAUkiAohQAKYg8AKgKAKgUAeYgUAeAAAoAUAyYAeAyCWgKDwg8YFUhQDIgeGGgoYCCgUCCgKAogKYBkgKImgyA8AAYBaAAAoAyAABkYAABQgyDIhaFUYhGDcAAAeAoAeYAyAoCWAAAogyYAKgKAoh4AyiCYBuleAohGCMiWYBQhaAKgegUg8YgegyksjchageYgogKgUAAgyAA").cp().ef());
            stroke.setBounds(0, 0, 306, 137);
            return stroke;
        }(),
        117: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AWMAKYgeAUhQAUhGAeYkOBklKBQm4AyYi+AUgKAKAAAoYAAAKAeAeAoAUYBQAoBaAKCMgeYAygKCWgeBugUYB4geDIgoB4gUYEOgyAKAAAyAoYAyAoAKA8gUCMYgUCMgoDSgeBkYgUBkAAA8AeAUYAoAeBkgUAygoYAUgKAUg8AoiWYBQkEA8h4BahkYAegoAogyAAgUYAUgygKgygegeYgegUh4hGiWhGYhugog8gJhQAT").cp().ef());
            stroke.setBounds(0, 0, 201, 119);
            return stroke;
        }(),
        118: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ARgAeYkEBalKBQlyAoYgyAKgyAKgUAKYgoAKgJBQATAeYAUAKAUAKAygKYAoAAA8gKAegKYAegKCggeCqgeYCggeDIgoBGgKYCggeAyAAAUAyYAKAegKAUg8DcYgUBuAAAUAyAeYAoAUAoAAAygUYAegKAKgUAeg8YAyhkAyg8BGgyYCWhugohQkYiMYiCg7geAAiMAn").cp().ef());
            stroke.setBounds(0, 0, 168, 70);
            return stroke;
        }(),
        119: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AXwAoYl8B4n+Bkm4AeYhaAKhQAKgKAAYgKAKAAAKAAAUYAAAUAKAKA8AeYA8AeAKAABQAAYAoAABGAAAogKYAogKCggeCMgUYCWgeDmgoCMgUYEOg8BaAAAyAUYA8AoAAAohQDwYgeBkgeBaAAAUYAAAeAeAUBaAAYBaAAAKgKAohQYBGiWA8hGCMiCYAygoAKgogUgyYgKgegKgUhQgyYiMhahug8gyAAYgoAAgoAAiCAo").cp().ef());
            stroke.setBounds(0, 0, 215, 83);
            return stroke;
        }(),
        120: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANIAUYkiBajcAojIAKYhGAAg8AKAAAAYAAAKAAAKAAAUYAeBGBkA8BQAAYA8AAFAg8AygUYAogKB4AAAoAUYAyAUAKAygUCCYgoDwjSLkiMHCYhuFAAAAKCCAKYAoAAAUAAAogKYAygUAAgKAyiqYAoiqBulKBQjwYBuksCWl8Aeg8YAKgUAyg8AogoYA8gyAUgeAAgUYAAgegyhGgyg8Yg8gyiChagygUYgygKhGAAhuAU").cp().ef());
            stroke.setBounds(0, 0, 142, 225);
            return stroke;
        }(),
        121: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAwIAAAYgUAAgeAUgUAKYhGAoiMAoh4AeYiMAUkYAyh4AKYhaAAgUAKAAAeYAAAUAoAoAyAeYA8AeC0gKEYgoYD6gyAeAKAKAoYAAAyjIFAjSEYYocLQpsI6xCMCYkOC+gJAUAJAUYAUAUAogKCCgyYF8iWHglAH+muYIInCIIomIcqyYBah4B4h4BkhGYCMhkgUgokEiCYh4g8g8gJgyAJ").cp().ef());
            stroke.setBounds(0, 0, 355, 329);
            return stroke;
        }(),
        122: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAl+AAeYiCA8iCAyi0AeYi+Aoi0AohaAKYgeAAgeAKAAAKYgKAKAoAoA8AeYAyAUAUAKBGAAYBaAKAUAAEihGYCqgeAUgKAUAUYAKAKAKAKAAAKYAAAojcE2jSD6YhuB4lUFKiWCCYkEDSmaEimQEEYjvCgAAAAAJAUYAUAUAUAACMgyYCWgoCMhGDShuYJYlUJYn+LQsqYAogyBQhGA8gyYC0iMAAAAhGg8YgygykEiCgoAAYgUAAgyAKgoAU").cp().ef());
            stroke.setBounds(0, 0, 294, 248);
            return stroke;
        }(),
        123: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAlMAAKYhuAykiBGmQBQIlAA8IgKAeYAAAoAeAUBkAUYCqAeDIgeFKhkYCCgoBGAAAAAyYAABki+FejSEYYhkCCmQGQiWB4YlKD6lyDImaCWYh4AogJAKAJAeYAUAUBaAACWgeYDwgoDchGD6iMYGGjIEijwFemaYBahaCWjSC0kEYCWjIBGhQBQgyYBkhGAKgUgyg8YgegoiChahQgyYhGgUgoAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 282, 237);
            return stroke;
        }(),
        124: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAiiAAUYhkAohuAei0AeYjIAegeAKgKAoYgUBGAoAUCCAAYBkAAAAAACWg8YEYh4AeAoi0EOYkYGanCFeowDmYiqBGhGAek2BaYiWAyh4AoAAAKYAAAUA8AUBGAAYDSAAG4hQDwhaYDmhaEEigDwi0YB4huDIjICqjcYCqjSBGhGBkhQYAegUAKgeAAgKYAAgeg8g8hugyYh4gygegJhaAd").cp().ef());
            stroke.setBounds(0, 0, 263, 175);
            return stroke;
        }(),
        125: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAjoAAUYlACMiqA8kEA8YigAejwAyhuAKYhQAKhkAUgoAUYgyAUAAAeAoAeYBGAoB4AUBkgeYBQgUQ4j6AUAAYAeAAAeAoAKAoYAKBagyEsg8EYYhaFeh4EYi+EsYjmFojSC0nqDwYjwB4iqBGksBkYigA8geAUAAAKYAAAUAeAUAoAAYBQAAGQhGC0goYGQhkDmh4D6jcYEYj6Eim4C+nWYBkjmB4mGAyj6YAehaAehGA8hGYAegoAUgoAAgKYAAg8hQg8iqhQYh4gohQgJhQAd").cp().ef());
            stroke.setBounds(0, 0, 282, 315);
            return stroke;
        }(),
        126: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAjoAAUYi0BGmaB4iCAeYiqAomQAyjwAeYhGAAhGAKgKAKYg8AeBuCCCMAeYBuAeAygKH+iWYFUhaDwg8BugKYBugKAUAegoC0YhQFehaEYiCD6YigFAiqDmkOEYYjmDcnCEioSEYYhGAeg8AeAAAKYAAAeAUAUAygKYBagKGaiMDwhuYI6j6EOjwGapYYC0kECMksCMmGYBQjwBGh4BkhaYBahQAKgyg8gyYhGhGj6hahuAAYgUAAgyAKgeAK").cp().ef());
            stroke.setBounds(0, 0, 285, 310);
            return stroke;
        }(),
        127: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AakAUYh4BGiqAykYAoYhaAKhGAUgKAAYgUAUBkBGBQAUYBQAUCCAABagoYBQgeBQAAAeAUYAoAUgKAyhQCWYh4D6iqEshaCCYgoAyg8Bag8BQYi0DwkEEsloFKYiCB4haBkAAAKYAAAUAogKBagoYCCg8Cqh4CgiMYGQlKFemkHCrGYCCjIA8hQCMh4YBkhkAAgeh4g8Yhagoi+hGgoAAYgKAAgoAKgeAK").cp().ef());
            stroke.setBounds(0, 0, 220, 253);
            return stroke;
        }(),
        128: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAkGAAAYgKAKgeAKgKAKYg8AojSBQjwBGYiqAogoAKhkAKYhGAAg8AKAAAAYgKAUBGBGA8AeYAyAeBkAUA8AAYA8AABkgeCMhGYCqhQBkAAAABQYAABGh4FohQCqYiWFKksG4kYE2YkYE2m4FKmGDSYiCBGgoAeAAAUYAAAeAUAKBQgUYC+geFyiWDmiWYJsmGGuoIHgvAYCMkYAyhGCMhkYCChkgohGkiiMYiChGg8gJgyAJ").cp().ef());
            stroke.setBounds(0, 0, 283, 305);
            return stroke;
        }(),
        129: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AeyAUYiCA8kEAomGAUYgoAAgeAAAAAKYgeAUBuBkBQAUYBGAUBkAACggeYC+geA8AUgUBGYgKAeiMDIh4CCYhaBuj6D6h4BuYjICqmaEiloDcYiMBQgJAUAJAUYA8AeF8iMEEiWYGkjwFAj6HMnMYEikiBkhaBagyYAegKAUgUAKgKYAegygogyi0hkYiqhagegJhQAd").cp().ef());
            stroke.setBounds(0, 0, 246, 198);
            return stroke;
        }(),
        130: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AbgAAYgeAKgyAUgoAUYh4AyjSBGiMAeYiCAoksAyigAUYgoAAgoAKgKAKYgUAUAUAoA8AeYA8AeAAAACWAAICgAAIC+g8YEOhQCWgoAoAAYAyAKAeAeAKAoYAKA8haFehQDSYhGC0h4DchQBkYh4CWi0CqiCBQYi+CCjcBuj6BaYg8AUhGAegKAAYAAAUAAAAAKAUYAeAeBQAKCWgKYDmgUDmhQEEiqYGQkED6loEYrkYBQjmAog8BahkYAogoAegoAAgUYAKgyg8g8iMg8YhkgehGAAhQAA").cp().ef());
            stroke.setBounds(0, 0, 221, 234);
            return stroke;
        }(),
        131: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AbqAKYgyAekiA8iCAKYiqAUiWAKhaAAYiCgUgeAUBGBGYAoAoBaAyBQAUYBQAUB4gKDSg8YCqgoAUAAAyAUYAoAKAAAegoBuYhGDwh4DciMDIYk2G4lKEOngD6YhuAyhkAyAAAAYAAAKAAAKAAAKYAUAUBkgKCggoYD6g8CMhGDmiWYFejmEilKE2ocYBQiMAegoBGhGYAogyA8gyAogUYA8geAUgeAAgeYAAgehkhahkhGYiMhag8gJhQAT").cp().ef());
            stroke.setBounds(0, 0, 226, 217);
            return stroke;
        }(),
        132: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUeAeYgyAUhGAeg8AKYhQAegyAKjSAeYhQAUgUAKAKAeYAAAKAeAUAeAKYBGAoBGgKDcgyYBugeBkgUAKAAYA8AAgKBQgyCqYgoB4gyBQhaB4YigDckOCCo6CCYhQAUhGAUgKAAYgJAUATAUA8AUYBGAKCWgKDmgoYFAgyCqhGC+i0YCgiCBaiCB4jwYA8iCAUgeAygyYAogeAKgeAAgKYAAgohuhuhagoYhagngyAAhkAn").cp().ef());
            stroke.setBounds(0, 0, 176, 135);
            return stroke;
        }(),
        133: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ASmAeYhaAoiqAyhuAUYhaAUkiAeigAKYhQAKgUAAgKAUYgKAUAAAAAKAUYAeAyDIBaBaAAYAeAACMgeCggoYCggoCMgeAUAAYBGAAAAAyhQDIYkYKyj6FynWGaYhaBGgoAyAAAKYAKBGEEiCD6jIYBuhQC+i+BahuYCgi+C0ksDSmuYBai+AohGAogoYAUgeAUgeAAgKYAAgUgogygygeYhQgoiWgygoAAYgUAAg8AKgoAU").cp().ef());
            stroke.setBounds(0, 0, 168, 215);
            return stroke;
        }(),
        134: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ASwAAYgKAAg8Aog8AoYiMBahQAoi0AyYiWAoiCAUi0AKYi+AUAAAAgKAeYgKAyAyAyCMBGYB4A8AeAADmhaYDwhaDShQAeAAYAoAAAKAeAAAyYgUBaiMEEiMDSYi0EOloHMjcDmYgoAoAAAUAAAAYAoAyFAjcC+jIYDcjwCCigDwl8YDSlUAog8CCiCYCMiMAKgUiChQYh4hGiggdg8AJ").cp().ef());
            stroke.setBounds(0, 0, 164, 203);
            return stroke;
        }(),
        135: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AVQAKYgUAAgyAegyAUYiqBaj6BGm4BGYiCAUhkAegKAAYgUAUAeAoAyAeYAeAUAoAKAyAAYBQAKCWgeF8haYDIgoAygKAUAKYAeAUAAAeg8BkYjcF8k2FKoIGQYhGAygyAyAAAKYAAAUA8gKBugoYDchaCghaCqiMYDwi0DmjmDwkiYCMiqB4h4BGgyYAygoAUgegKgeYgKgohugyiWhGYhugegeAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 183, 170);
            return stroke;
        }(),
        136: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ARqAKYgeAKg8Aeg8AUYjIBQjwA8j6AoYigAUgoAKAAAUYAAAyBkAoB4AKYBuAKBkgUCggyYBQgeBageAegKYBGgKAAAAAoAKYAUAKAUAKAKAKYAyBGhkGkiCEOYhaC0iqC+i0B4YhQA8iWBQhaAyYhkAoAAAKAAAUYAKAoA8AKBugKYCWgUCCgyCMhaYCghuCgiWBkiMYBaiMBkjcBuk2YBGjIAegyBahuYBGhQAAgohagyYg8goiWgyg8AAYgUAAgoAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 157, 186);
            return stroke;
        }(),
        137: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQaAAYgKAKgoAKgoAUYhQAejwBGhuAUYgyAKhaAKhGAKYhuAKgeAKgKAKIgUAUIAeAeYAoAoBkAUBkgKYBQAAAygUBugeYBQgeBagUAeAAYA8gKAAAAAeAeYAeAeAAAAgyCqYg8DmhQCWhuCCYiCCMjSCCjwBQYhaAegKAKAAAeYAKAUAeAKB4gKYC0gKC+hGCqhuYBkhGCWiMAyhQYA8hQBQiWAyh4YBGiWAog8BQhQYBGhGAKgegogyYgUgKgygog8gUYhGgogegKgyAAYgoAAgeAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 145, 140);
            return stroke;
        }(),
        138: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AaGAUYhkAynCCCjmAoYiWAekYAyhuAKYgeAAhQAKhQAAYh4AKgUAAgKAUYgKAeAAAoAUAeYAoAyCWBkA8AUYBGAUBQgKCghGYDchaHCiMDcgyYB4gUAeAKAoAoYAyAygKAUi0FyYjIGGhGCMhkBuYhaBageBGAAB4YAAC0A8BkBGgUYAogKBuhaAohGYBQiCBujSC+nCYCqmGAyhQB4hQYBGgyAog8gKgoYgUhQlAjShkAAYgKAAgeAAgUAU").cp().ef());
            stroke.setBounds(0, 0, 218, 196);
            return stroke;
        }(),
        139: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AR0AKYgUAKgoAKgeAUYgoAKhQAeg8AUYhkAegoAAhGAAYhGAAgKAKAAAKYAAAUA8A8AoAUYAeAUBGAACCgoYB4geA8AAAAAUYAUAehGDIhaCgYgyBkhQBkiqDIYiqDSjSC+jICMYgoAegeAeAAAKYAAAKBkAAA8gUYBkgeC+hkBkhGYBuhaEYkYBuiWYBkh4BkiWBuiqYAeg8AyhGAogeYBkhugKgejIhkYiMg8gegJg8AT").cp().ef());
            stroke.setBounds(0, 0, 155, 165);
            return stroke;
        }(),
        140: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAj8AAUYiCBQhaAeiCAoYpOCqruCCmaAUYiWAKgKAAgUAUYgnAoATA8BkBaYBaBQAyAeBaAAYA8AAAUgKAygUYCghaFyhkKKiWYCWgeCMgeAUAAYAKAKAUAKAKAAYAKAegUAUiqCCYmkE2oIFemQDwYiCBQh4BQgUAKYgeAeAAAKAUAKYAKAKAKAABugUYCggoBugyDmhuYG4jmIIk2GQkiYB4hQCCg8C+hQYBageBGgoAKAAYAyg8iCiWi+h4Yhkg7goAAhQAd").cp().ef());
            stroke.setBounds(0, 0, 281, 173);
            return stroke;
        }(),
        141: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("Aa4AUYh4AyjmAymkBQYnWBQjSAeiCgeYg8AAgKAAgeAKYgoAUgJAeATAoYAUAyCgCMBaAyYAyAUBGAABGgyYCqhuCqgyISiMYE2hGBGgKAUAeYAUAegUAygyBGYgUAehGBQgyA8YgyBGhaB4hGBQYjmEiAAAAAKAKYAKAKAUgKA8geYCChGCMhkEOjSYCgiMAogUBQgeYAogKAogUAUAAYAogeAygyAAgUYAAhGkOkshageYgyAAAAAAhaAU").cp().ef());
            stroke.setBounds(0, 0, 223, 115);
            return stroke;
        }(),
        142: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AWCAUYhkAoiMAok2BQYleBah4AUjSAKYhkAKg8AAgKAKYgnAoBFBkBuAeYB4AoA8gKDchGYFyh4E2hGA8AKYAoAKAKAKgKAeYgUBGi+EYhGBGYg8A8goCMAKBuYAKBQAoAUBQgoYBagoB4iWDSksYBuiqBQhaBQgoYBug8AKgehGhQYgegegygehGgoYh4gyg8gJhaAd").cp().ef());
            stroke.setBounds(0, 0, 188, 114);
            return stroke;
        }(),
        143: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APeAUYgyAUiWAyiWAyYkiBkg8AKiqAKYhuAAgKAKAAAoYAAAoBGA8BGAeYAyAUAKAKA8gKYAoAAAogKAUgKYBGgyHqi+AeAAYAyAAAyAeAAAoYAAAUgUAyhGB4YjIE2g8B4AeAAYAKAAA8g8A8g8YBuhaB4huCMh4YAygoBGgyBGgeYBQgyAKgegyg8Yg8hGjmh4hGAAYgUAAgyAKgoAK").cp().ef());
            stroke.setBounds(0, 0, 150, 90);
            return stroke;
        }(),
        144: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AM+AAYgKAAgeAKgKAKYgUAKhuAohuAyYjcBGiWAyhuAKYgeAAgeAKAAAAYAAAKBGA8AoAKYA8AUBugKDIgyYBkgeBagUAKAAYAKAAAAAKAKAKYAKAUhkDmhaC0YhGCggUAyAeAKYAeAABuhkCgi+YCgi+BQhQBkhaYAogeAegeAKAAYAKgygegeiqhaYhGgogyAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 119, 93);
            return stroke;
        }(),
        145: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ALQAAYgKAAgUAKgKAKYgoAUleBkiMAeYhQAUhGAKAAAKYgJAUAnAoAyAUYAyAeAyAAC+goYCqgeAeAAAAAeYAAAei+GahaCWYgyBQg8CCAAAKYAAAKAKAAAAAKYAUAKDIjSC0jIYCqi+CWiWBkhGYBuhagKgUjSiCYhag8gyAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 109, 112);
            return stroke;
        }(),
        146: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMgAKYgUAAgeAUgeAeYhQA8g8AUj6BaYkYBkgeAUgUAeYAAAUAABGAUAUYAUAeCWgoCgg8YBGgeBkgoA8gUYBageAKAAAoAKYAyAUAKAeAAAyYgKAyiqHMgyB4YgUAygUAoAAAUYAAAKAUAUAKAUYAeAUAKAKAegKYA8gKAogeAUg8YAUhaEOmkBkhaYAUgeAygoAegUYBkg8Aegygyg8YgegojSiWhQgoYhGgeg8AAgyAK").cp().ef());
            stroke.setBounds(0, 0, 133, 123);
            return stroke;
        }(),
        147: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ALkAAYgKAKgeAUgUAKYgyAygoAKkiBaYksBkAAAKAAA8YAAAyAoAUAoAAYAKAAAygKAygeYB4gyEihkAyAAYAyAAAoAogKAyYgKAohuE2geBQYgeA8AAAoAoAKYAoAUAUgKAogoYAegeAUgUAAgeYAKhQEilUA8AAYAUAAAyg8AAgUYAAgegygyhuhQYiChkhGgJhGAJ").cp().ef());
            stroke.setBounds(0, 0, 118, 89);
            return stroke;
        }(),
        148: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANwAUYgKAKgyAogoAeYiCBQhQAoiWAoYhGAUhuAUg8AKYigAUgUAUAAA8YAAAyAUAeAyAAYCggKFAhGCqhQYAegUAygKAKAAYAeAAAoAeAAAUYAAAKgeA8gUA8YgeBGgoBugeA8YgoCWAAAoAoAUYAoAeAegeAyhQYBQiqDSkYBag8YAegeAegeAKgKYAUgygog8iMhaYiChGg8gJhGAd").cp().ef());
            stroke.setBounds(0, 0, 131, 95);
            return stroke;
        }(),
        149: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJiAKYg8AeAAAoBQBuYA8BaAUBQAKCqcAAUADcAAAAmwgAUAAyYAAAUgUAegUAUYgeAegKAAgyAAYgeAAiCgUiCgeYkOgygeAAAAAUYAAAUAoAyCCBQYDwCWB4BkBkCCYB4CMBQAoA8gyYBGg8AyiMAUi+YAUhugKjcgUmuYgenWgKoSAKm4YAAoSAej6AyjIYAeiCAKgUgUgoYgegohGgyh4g8YiCgyhQgJgyAT").cp().ef());
            stroke.setBounds(0, 0, 111, 399);
            return stroke;
        }(),
        150: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AImAKYgUAKgKAKAAAKYAAAKAeA8AeA8YAoBGAUA8AKAyYAUBkAKMWgKFoYgUFKAAA8gUAoYgUAogyAegeAAYgUAAhkgehugeYkshkAUAKgUAKYgJAUATAoCCB4YCqCgC+C0BGBkYBGBaAoAUAogKYA8gUBuigAoh4YAUhQAAgKAAmuYAAjwgKl8AAjSYgKmuAKhuAohuYAohkAAgygogeYgogyhkhGhagoYhkgohGgJgeAT").cp().ef());
            stroke.setBounds(0, 0, 102, 269);
            return stroke;
        }(),
        151: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGuAAYgUAKgKAeAUA8YAoBkAKB4AKEEYAKEEgUC+gUAyYgKAUgoAUgeAAYgUAAg8gKg8gKYiWgog8AAgUAUYgJAUAJAeBuBkYB4BkB4CCBGBQYAoAoA8AoAeAAYAeAAAogoAohaYBQi0AKgyAAngYAAjcAAjSAKgoYAAhagegyhGhGYhahQhQgdg8AJ").cp().ef());
            stroke.setBounds(0, 0, 77, 163);
            return stroke;
        }(),
        152: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AFAAKYAAAKAKAoAKAoYAeA8AAAeAADIIAADmIgeAKYgeAKgKAAhkgUYiWgygyAAAAAUYAAAUAKAUB4BuYA8AyBQBQAeAoYBkB4AoAKA8iCYBGiMAAgeAKkYYAAlAAAAAiMhkYhGgogygJAAAT").cp().ef());
            stroke.setBounds(0, 0, 59, 101);
            return stroke;
        }(),
        153: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABaAAYgoAKgeAeAAAUYAAAeAAAUAoAyYBQBQAUBGAeDSYAeD6AAEsAAKUYgKKogKDSgeFKYgoFegUBkg8BkYg7BaAAAyAnBaYAeAyAyAoA8AeYAoAUAAAAAUgKYAUgKAyg8Aog8YB4iWDmkOCgigYCCiCAUgogUgUYgegoAKAAlKDmYh4BahkBGgKAAYgKAAgKgKAAgUYgKgKAAiMAKigYAKigAKk2AKjcYAAjcAUksAAiWYAKiWAKkiAAjSYAKmuAKiMAehkYAUhGgKgegegoYhGhajmhPhaAT").cp().ef());
            stroke.setBounds(0, 0, 100, 388);
            return stroke;
        }(),
        154: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AC+AKYgKAKgUAUgKAKYgKAoAKAoAoAoYAoAeAeBGAUBaYAeCWgKMggoIIYgyI6gyEihQCCYgKAUgeAegKAeYgUAUgKAoAAAeYAABGAoBkBaA8YBQAyAAAAC+jcYBkhuE2ksDwjSYCgiWAUgegegeYgegUgyAeleDmYi0B4iWBkgKAAYgKAAgKgKAAgKYgKgUAUi0AUjSYA8qUA8qyAUjIYAKjIAUiCAeg8YAehGgUgyhGg8YiChui0gnhQAd").cp().ef());
            stroke.setBounds(0, 0, 122, 325);
            return stroke;
        }(),
        155: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADwAKYgUAUAAAeAeBGYA8BuAeAyAKBGYAyCMAAAUAAG4YAAGGAABkgeDmYgUCqhQFAgyBkYgoBGhkCMgeAeYgoAegKAoAAAoYAAA8AoCCAoA8YAyA8AeAUAogKYAKAABkhaBuhuYDcjcH0muDwi0YAegUAogyAAgeYAAgoh4A8m4D6YiCBQiCA8AAAAYgeAAgUgKAAgeYgKgoAKjSAUmQYAKiMAKigAAg8YAKiMAoocAAg8YAAgeAKg8AKgyYAKhGAAgKgUgeYgeg8hQgyiggyYhagUgyAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 145, 295);
            return stroke;
        }(),
        156: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ACMAAYgoAUAAAeAeA8YCMEEAKAoAUEOYAKFKgKDShGEEYgoCqgoBahkCMYgyBaAAAAAAAyYAAAyAyB4AyBGYAUAUAeAeAUAKYAeAKAKAAAegKYAUgKAegeAegoYC+kiFUmQImpOYCqi0AegogUgeYgegUi0CWn0HWYiMCCiCBugKAKYgUAKgUAAgKAAYgUAAAAgKAAgyYgKgoAUlAAUn+YAAg8AKhuAKhQYAKjIAAgKgogyYgogogogUh4goYhagehQAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 159, 234);
            return stroke;
        }(),
        157: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADSAAYgoAUAAAoAeBQYAUAeAUBQAUAyYAUBaAAAoAKDIYAADcgKCCgeD6YgUDIgyBaiWDcYgeAoAAAKAAAyYAABkBQCgA8AKYAUAKAogUAegoYA8hQFKksEijmYA8gyBGg8AUgKYAygoAUgogUgUYgUgegyAUl8C+YhaAohQAogKAAYgUAAAAgUAUhuYAUigAel8AKjcYAKhuAKh4AAgoYAehkgKgKgogyYh4h4iWhFg8AT").cp().ef());
            stroke.setBounds(0, 0, 113, 213);
            return stroke;
        }(),
        158: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ACWAAYgUAKgKAKAKAoYAAAUAUAyAUAoYA8BaAoBuAUBaYAAAoAKBagKCMYAAC0gKAogUBaYgeCCgyBkhGBaYh3C+AAgKAdB4YAeBaAoA8AoAoYAyAoAUgKBQhQYC0jSGGloEOjmYCMhuAUgeAKgeYAKgeAAAAgoAKYgeAAiqBakYCqYhkA8haAogKAAYgeAAgKgeAKleYAAi+AKjcAKhQYAAh4AAgegKgKYgUgeiMhGhagUYhagUgoAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 130, 188);
            return stroke;
        }(),
        159: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ACgAUYgKAKgUAKAAAKYAAAKAUAoAUAyYBaDSAoDwgeEOYAABagKBkgKAeYgeBag8B4hQBkYhQBugJAeAJBQYAUA8AoBQAeAeYAoAoAegKA8gyYBkhkC+huHCjwYFUi0AUgKgKgeYAAgKgKgKgUAAYgogKjcBGk2BkYhaAUhQAegUAAYgyAAAAgUAKjSYAKhuAKi+AAiCYAAiCAKiMAAgyYAKgyAAgyAAgKYgKgyjmiWhGAAYgKAAgeAAgKAU").cp().ef());
            stroke.setBounds(0, 0, 132, 182);
            return stroke;
        }(),
        160: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAoAKYgeAUAAAoAUAKYAUAUAyCCAKBGYAKAyAKCCAADIYAAGkgUB4hQCgYgeBagJAoAdBaYAoBuBGBQAogKYAKAAAogoAegoYAegoCgigCWigYEikiBuhugKgKYgKAAgKgKAAAAYgUAAj6CMigBkYhkA8hGAegegUYgUgKgKg8AKlKYAKi0AKi+AAgyYAekEAAAKhkhQYhahQhagJgoAT").cp().ef());
            stroke.setBounds(0, 0, 99, 179);
            return stroke;
        }(),
        161: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADcAAYgKAKgUAKgKAKYgUAeAAAeAoAyYBGBkAKBkAeImYAUKUgUKUhGH+Yg8HCgeBahaBkYgyA8gKAUAAAeYAAAoAyBkAoAyYBQBQA8AABag8YAygoDchaBQgUYBagUEigoDIgUYHCgoBQAAJEAAYIIAABaAACWAUYC+AUAyAAAogyYAegeAAgegegyYgogyiChahagoYhkgygyAAjwAUYkiAeAKAAjIAUYhkAUhkAKgUAAYgeAAhkAKhaAKYn+A8i0AeiCAKYhQAUh4AKhQAAYjmAKgKAAAAi+YAAg8AKh4AAhaYAKhaAKjSAKiqYAAiqAUlKAKjcYAKjmAUlKAKi0YAUmkAKiMAehuYAUhGAAgUgKgKYgUgUjIhkhGgeYhGgKgyAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 343, 373);
            return stroke;
        }(),
        162: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAyAAYgKAKgUAKgKAKYgKAUAAAKAAAUYAKAUAKAUAKAKYBGA8AoCgAyHWYA8JOAKF8gUGkYgKEsgoCMhGBGYgKAKgUAegKAUYgKAeAAAKAUAoYAeA8BGBQAoAUYAyAUAeAAA8gyYAegUBagyBGgeYCghQBugUHCg8YAogKEsgUCWgKYDSgUHMAACgAKYBkAABkAAAUAAYAygKAygoAAgoYAAgyiMhkiMg8YhkgogyAAmaBGYg8AKi+Aei0AUYi0AekOAoiWAeYkYAyiWAKgygKYgygKgKgogKleYAAiqgKjcgKhuYgKkEgUvKAKiWYAAhGAAhGAKgUYAAgeAAgKgUgUYgegeh4g8hkgUYhGgKgyAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 293, 304);
            return stroke;
        }(),
        163: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AB4AAYgUAUAAAyAoBkYA8CWAKBGAAGaYAKFygKHWgeGuYgUEigeGGgUA8YgKA8goBkgeBGYgUAegKAoAAAUYAAAoA8CCAoAoYAyAyAegKB4haYEEjIGQhuLQhQYBQgKBGgKAKgKYBGgeg8hkiMg8Yg8gegeAAhaAUYjcA8lyBah4AeYhQAUh4AehGAUYh4AogKAAgUgUIgegKIAKjIYAAhuAKkYAUj6YAKjwAKloAKi+YAUsMAAhuAeiMYAUhGAAAAgegUYgUgehuhQhQgoYhGgegyAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 188, 338);
            return stroke;
        }(),
        164: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABQAKYgKAUAAAUAeBQYAoBkAKBQAAEEYgKDwgKCggUEOYgUCMgUBQgyBGYgUAoAAAyAUA8YAeBGAeAoAeAAYAKAAAygeAygeYDwiMEOg8JYgUYCqgKAogKAAgeYAAgegegegygoYgogegKAAgyAAYgoAAhGAAg8AUYhuAKkiAyhuAKYgeAAhQAUhGAKYhGAUhGAKgKAAYgyAKgKgKAAh4YAAi0AotmAKhuIAAhGIgygoYhkhQhkgdgKAd").cp().ef());
            stroke.setBounds(0, 0, 155, 179);
            return stroke;
        }(),
        165: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAeAAAUAeBGYAUAoAUBGAUAyYAyC0AeGaAAJsYAAH0AAAKhGCWYgoBagKAyAoBGYAoBGAUAeAeAKYAoAUAegKBGgyYBGgyB4g8BkgeYBageD6gyC0gUYBQgKBQgKAKgKYAegUAAgegygyYhQhahGgUh4AeYgoAKiMAeiMAeYjcAogeAAgKgKYgKgUgKiCgKleYgKhugKk2gKkOYgKkigKjmAKhQYAAiCAAAAgUgeYgUgUgogehQgoYh4gygogJgeAT").cp().ef());
            stroke.setBounds(0, 0, 133, 250);
            return stroke;
        }(),
        166: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJsAUYgeAoAAAyAeBGYAoBuAUBkgKCWYgUFehQGuiMHMYiCG4haC0igC0YgyA8AAAKAAAeYAAA8AyBuA8A8YA8BGAUAABugyYC0hGEEgyG4geYDIgKHgAKD6AUYEEAUGQBaFABuYCgA8AyAAAegeYAogegehahQhQYg8hGi0iWgygeYg8gehaAAiqAKYhaAKkiAKqKAAYocAAmkAKhQAAYiMAKgUAAAAgoYAAgKAeiCAyigYAyiWA8jSAehkYCCmaBum4BGlKYAUhkAeiCAKgoYAUg8AAgoAAgKYgUgoi+ighagoYg8gUgeAAgUAU").cp().ef());
            stroke.setBounds(0, 0, 335, 308);
            return stroke;
        }(),
        167: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AKeAKYgoAoAAAKAeBGYBQCWAKBkgoDSYgoDIhaF8gyCCYgUAygeBagUA8Yg8CqiCC0igCMYhuB4gTA8AnBaYAUAeAoAoAeAeYAyAyAKAAAoAAYAoAAAUAAAogeYBQgyA8geBkgUYB4geDwgeD6gUYHMgeL4BaHWCMYBkAeAyAAAygUYBagogyh4iWiCYgogegygegUgKYgogKiMgKksgUYlegUiMAAleAKYloAAmaAUiCAUYgyAKgegUgKgeYgKgeAAAAB4lAYCWlyCqowBamaIAUg8IgygyYiMiMiqhZgeAn").cp().ef());
            stroke.setBounds(0, 0, 310, 243);
            return stroke;
        }(),
        168: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABkAKYgoAUAKAeAyB4YBuEEAUC+geEiYgUDIgyCChaBkYhPBuAAAoBjBkYA8A8A8AeAoAAYAKAAAogUAogeYBQhGCCgyDchGYHWiWHChuG4hQYHqhaEOgUB4AeYAeAKA8AKAeAAYAyAKAKAAAegeYAegeAAgKgKg8YAAgygKgegKgUIgUgeIiCAKYk2AUoSBGpiBuYnMBQiMAokEA8YjSA8goAAgegUYgUgUAAgUAUjwYAKiMAKi0AAhQYAekigKgyhkhQYgegUgygogegUYhkgyg8gJgoAT").cp().ef());
            stroke.setBounds(0, 0, 324, 170);
            return stroke;
        }(),
        169: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ACCAKYgUAUAAAUAyCCYAyCgAKBugKCMYgKA8gKBQgKAeYgUBQgyBugoAeYgoAygeA8AAAeYAAAyCWCMBGAKYAeAKAKgKAogoYBGgyBagyCggyYH0igJsiWHCg8YCCgUEOgKBuAUYA8AKAAAAAegeYAegeAKgKAAgyYAAgogKgUgUgUIgUgeIh4AKYjwAKmGAynCBQYoSBahkAUkYBQYhkAUg8AKgUAAYgygKAAgeAojmYAokOAAhageg8YgegyhQhQhQgyYhGgehGgJgeAT").cp().ef());
            stroke.setBounds(0, 0, 283, 133);
            return stroke;
        }(),
        170: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADIAUIgeAUIAUBGYAeBQAABagUCCYgeB4gKAUhGBQYhQBQgKAUAAAyYAAAeAAAKAyAyYA8BGAeAABQgyYCMhGCqg8EOgyYDSgoG4g8D6gUYC0gKHMAAEiAAYCCAKAeAAAUgUYAogUAKgegUgeYgUgeiWhkhQgeYhagogyAAiWAeYi0AojwAokEAeYmaA8kYAojmAyYiCAeh4AUgeAAIgyAAIAAgoYgKgyBkjmAyg8YAUgeAAgogKgeYgKgKgogegogUYiMhagygTgoAn").cp().ef());
            stroke.setBounds(0, 0, 286, 93);
            return stroke;
        }(),
        171: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABQAUYgUAeAAAUAoBGYAUAeAUAeAKAUYAoBaAKDIgeDSYgUCMgUAohQBkYgeAegUAoAAAUYAAAyAKA8AyAoYBGA8AyAKAygoYBuhaFohkHChGYEigoBQgKF8AAYFegKAUAAAegUYAUgKAUgUAKgUYAUgUAAgKgUgUYgegoiChQh4gyYiCg8goAAjmA8YhaAeigAehuAeYkEAyjSAyjSAyYi+AygeAAgKgoYgKgeAylAAeh4YAKgyAUhGAKgUYAegyAAgogegeYgogyksiCgyAAYgKAAgUAKgKAK").cp().ef());
            stroke.setBounds(0, 0, 237, 130);
            return stroke;
        }(),
        172: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADmAKYgKAKgKAUAKAeYAAAeAKAyAKAoYAKBagKBkgoBkYgeBugeAyhGBGYhZBaAAAeBPBkYA8A8AyAUAogeYBQgoAygeBkgeYE2hkGuhkE2gyYBugUBQAAC0AAIDmAAIAUgeYAUgeAAhGgogeYgUgUgKAAhuAKYlUAKsgB4kiBQYhaAUgeAAAAgeYAAgKAUhQAehQYAehaAehaAAgUYgKgygeg8g8hGYhQhQhQgdgUAd").cp().ef());
            stroke.setBounds(0, 0, 213, 100);
            return stroke;
        }(),
        173: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABaAKYAAAKAKAyAKAyYAeBuAABGgUB4YgUBagKAeg8BGYgUAegKAeAAAKYAAAUAyA8AoAUYAoAUAUAAAogeYBahQGaigD6gyYCggeAegUAAgeYAAgogegUgeAAYg8AAowCMhkAoYgUAKgUAKgUAAYgUAAAAgKAKgyYAAgeAKg8AKg8YAUigAAgegogoYhGhQhugngKAd").cp().ef());
            stroke.setBounds(0, 0, 113, 80);
            return stroke;
        }(),
        174: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABuAUYgeAeAAAeAoBaYBGCgAoC0AAC0YAACWgKBugeB4YgeB4goBGhGBaYgyBQgJAoATAoYAUAoBGBGBGAeYAyAeAKAAAegKYAUgKAUgKAAAAYAAgUB4hQA8goYCghQGaiCCggeYA8gKBkgUA8gKYA8gKA8gKAKgKYAygUAUh4gygoYgegUgeAAiMAUYjmAekOA8jwBQYiWAogoAKgKgoYAAgKgKgUAKgKYAAgeAypEAKiWYAKiMgKgog8g8Yg8hGighag8AAYgUAAgUAKgKAK").cp().ef());
            stroke.setBounds(0, 0, 162, 168);
            return stroke;
        }(),
        175: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABkAUYgKAoAAAKAeA8YA8BaAKBGAAC0YAAE2g8DchkCWYgeA8AAAeAKAyYAeAyBGA8AeAAYAKAAAogKAegUYDShuGagoEiAyYC0AeAUAAgKgyYgUg8jSighkgUYgogKi0AoleBQYiMAegeAAAAgUYAAgKAeiCAUiMYAykEAKg8AUkEYAUiMAAAKhkhGYh4hGg8gTgUAn").cp().ef());
            stroke.setBounds(0, 0, 133, 141);
            return stroke;
        }(),
        176: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAAYgnAeAAAeBFBaYAeAeAoAyAKAeYAeA8AAAKAADIYAABuAAD6gKCqYgUIIAKBuA8CMYBaC+CCAoF8goYCqgUA8gUAygoYAygyAKgogUgeYgegeg8gKjcAKYjwAKgUAAgygUYh4g8goh4AAmQYAAkOAokEBQlAYAoiqAAgKiWhGYiWg8hugogeAAYgKAAgUAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 115, 204);
            return stroke;
        }(),
        177: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAAYgnAUAJAyA8BGYA8BQAeA8AKBuYAKAoAKDIAAC+YAKFKAAAeAUAyYAUBGAyAyA8AeYA8AeBQAKCqAKYC+AKCWgUAygUYAygeAyg8gKgeYgKgygogKkYgKYj6gKgKAAgygeYgygUgUgUgKgeYg8huAUlKBQk2YAehuAAg8gegUYgKgKhGgohGgoYiWhGhQgJgoAJ").cp().ef());
            stroke.setBounds(0, 0, 114, 144);
            return stroke;
        }(),
        178: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAAYgKAUAAAoAUCCYAUBQAeCCAKBQYAKBaAKBQAKAKYAKAeBQBQAyAeYB4AyD6AeEigeYIIgoEigyBuhGYBQgogKhGhQgoYgygeiWgehagKYg8AAgKAKhkAoYhuA8hGAUkYAoYjcAUjSAKhQgeYgegKgegUgKgKYgUgUAAgKAAhQYAKgoAKhaAUg8YAUhaAAgUgKgUYgUgeigh4gygKYgygKgoAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 190, 87);
            return stroke;
        }(),
        179: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AISAKYgUAKgKAUAAAUYgKAeAKAKAeAoYA8BGAeBaAAA8YAACqh4JihuF8YgyCqigH0geBGYgeBQgeAogyA8YgoAygJBQATA8YAUAyAUAKB4AAYCgAAB4AyDcCCYHMEOGuFKFyFUYDcDSAoAeAoAKYAoAKAogUAKgoYAyh4h4k2iqiWYgogogogehQgoYg8gUhug8hQgyYkEigjmiCqAlKYjIhugUgKAKgyYAAgUA8i0BQi+YCgmGCWmkB4lyYAoiMA8iMAeg8YA8iCAAgUgyhQYhGhujwiMh4gKYgyAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 234, 407);
            return stroke;
        }(),
        180: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AG4AeYgUAUgKAKAKAeYAAAKAKAeAUAUYAyBaAKCWgoEEYgyGuhGFeh4HgYhGEigeBGhkCqYgeBQAAAoAKAyYAKAyAeAUBaAyYEOCMFoEYF8FeYCMCCAyAAAohQYAUgoAKgUgKhGYgKiWgyhQh4hQYhuhGjwiMksiMYiWhQiChQgUgKYgogyAAgUA8i+YCMmGCqocCMoSYA8i+Ayh4AyhaYAog8AKgeAAgyYAAgyAAAAg8g8YhGg8iWhuhGgeYg8gUg8AAgoAe").cp().ef());
            stroke.setBounds(0, 0, 141, 361);
            return stroke;
        }(),
        181: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGuAUYgeAeAAAKAeBGYAeBaAAB4gUB4Yg8DwigHChGCCYgeAegeAygeAeYgoA8gUAyAAAoYAAAoAyAyBGAeYCMBGC0DSEOGQYBuCgAUAKA8geYAogUAeg8AAhkYAKhkgKgyhGhQYhGhkksjwi+h4YgogUgegegKgUYgegyAKgeCCj6YBGh4BujcBGiMYBGiMBGiMAUgeYAyhaAAgog8hGYhQhkigh4gyAAYgKAAgeAKgKAK").cp().ef());
            stroke.setBounds(0, 0, 98, 250);
            return stroke;
        }(),
        182: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AEiAAYgoAUAAAKAUAyYAeBGAABageBkYg8C0huDmg8BQYg7BQAKAKBtCCYA8A8BaBuAyA8YCCC0AeAUAoAAYBGAABGh4gKhkYgUhahGg8jShuYiMg8gUgUAKg8YAUhGFAmQBGgoYAygeAKgogUgyYgKgegUgegygyYhuhuhQgThGAJ").cp().ef());
            stroke.setBounds(0, 0, 65, 149);
            return stroke;
        }(),
        183: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADSAKYgUAUAAAKAUA8YAeBaAAAegyC0YgyC+geBkg8BuYgyBagJBGATAeYAKAKAyAeAyAKYCqA8EOCWCWB4YDmC0CqCMC+CqYAyAyBGA8AeAKYBkAyBQgeAAhaYAAhQhuj6g8g8Ygygoh4hGkYiWYjShklyighkgeYhQgegegUAAgeYAAgUEYpEAUgeYAKAAAAgUAAgUYAAgohQhQhag8YhQgogogJgeAT").cp().ef());
            stroke.setBounds(0, 0, 164, 201);
            return stroke;
        }(),
        184: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APKAKYgKAKAAAUAKAeYAKCgAABQgKBkYgoDIhGEEiMFoYiCFegyBuhQCqYiCEEhkCWiMCMYhaBkgJAeAJBaYAeCMAoBQAyAAYAKAAAogKAogKYCqg8G4hkEOgoYGag8GGgoEigUYBugKBagUAegeYAUgegKgehGhGYhQhQgygUh4gKYhuAAhaAKj6A8YhuAUigAohaAKYj6Ayn+BGgeAAYgeAAAAgKAAgUYAAgKAohuAyh4YCMk2CCkiCClKYEEp2AohaCMiMYBQhaAAgUhahQYhQhGiChkg8geYgygUhQAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 243, 286);
            return stroke;
        }(),
        185: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AfuAAYgUAKgeAyAAAoYAAA8gUBQhGCCYiqFKjIEilAFUYjSDcqUKehGA8YgeAUg8AogyAUYh4BGgTA8AnBuYAUAoBuB4AeAUYAeAUAeAACWg8YH+jIHMhuPKiMYDcgeAogKAegoYAAgKAAgKAAgKYAAgKgKgKgyAKYgeAAhQAKhQAAYmuAUqABGo6BaYhaAUhQAAgKAAYgKAAgKgKAAgKYAAgyHCnWKAqUYHMnWCMiCCWh4YAogeAegeAKgUYAUg8hkiMiWhuYhahGg8gJgoAJ").cp().ef());
            stroke.setBounds(0, 0, 263, 280);
            return stroke;
        }(),
        186: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AWqAKYgUAUAAAUAUA8YAUAeAKAeAAA8YAABQAAAAgyBQYiWEEtwPei0BaYiWBagKAKgeAyYgnBQAACWAxBaYAoAoAUAACWhGYDShkGuiCHMhuYH0iCIShQHCgoYBkgKBkgKAUAAYBGgeAUgogogoYgUgUgKAAigAKYn+AUw4CgrQCgYgeAAgeAKAAgKYgUgUAygyD6kEYG4m4HCmkCghuYBuhQAKgUgUg8YgUg8h4h4hag8Yh4hQhugTg8Ad").cp().ef());
            stroke.setBounds(0, 0, 313, 224);
            return stroke;
        }(),
        187: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AOsAAYgoAUgUAeAKA8YAUC+AAAegeBkYhGC0h4DwigDwYhaCMiqCqiMBuYiCBagTAyAdBQYAoBQCMB4AyAAYAUAAAegKAUgUYDciWG4iCMgigYEYgyDShGAegyYAAgUAAAAgKgKYgegUAAAAjcAUYmkAyk2AolyBQYlKBGAAAAgUgKYgegKAUgyA8haYD6leFUnMBuiMYBQhkAKgegog8YgogohuhGh4gyYhkgogeAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 230, 194);
            return stroke;
        }(),
        188: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQGAKYgKAKAAAUAKBGYAKAoAAA8AAAUYAACqj6Guj6D6YhuBuiMBkiWBQYgyAeg8AegKAUYgUAeAAAKAAAyYAKCWBkCWBaAAYAUAAA8geA8geYCghQCghGDShGYDchGH0iWC0goYHgh4AKAAAUgUYAegeAAgUgegUYgKgKoIBGtcCCYh4AUhuAKgKAAYgKAAgKgKAAgKYAAgeFUmuDIjwYAygyBahkA8hGYBkhkAUgUAAgeYAAgegygyhGgUYgUgKhQgehGgeYhQgeg8gUAAAAYgKAAgKAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 231, 184);
            return stroke;
        }(),
        189: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AOiAAYgUAUAAAUAUBGYAUBGgUA8goBkYhkDSj6EiiqBuYhGAoiCBGhGAUYgeAUgoAUgKAUYgUAeAAAAAAA8YAKCgBQBuBaAAYAUAAAygKAogeYB4gyCCgyCCgoYEOhQLaigEigoYCWgUC+goBGgUYAogUAKgegKgUYgUgUAKAAsgBQYiMAKjIAUhuAKYomA8gKAAAAgUYAAgoIwpOCChkYB4hageg8kEhuYh4gogeAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 242, 151);
            return stroke;
        }(),
        190: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ATYAAYgUAUAAAeAKBGYAeB4geB4iCD6YgoBGg8BugoA8YhkCqkOGahQBaYhQBkh4B4huBaYiMBkg8A8AAAeYAABQBGCWAyAyYAoAeAKAABkgoYC0g8E2gyIIgoYBkgKCCgKBGgKYBGAAA8gKAKgKYAegKAUgogKgUYgKgogoAApYgKYpiAAgUAAAAgoYAAgUAyhQCCiqYE2maE2l8EEkYYBGhGA8hQAKgKYAUgygKgogyhGYgyhQiCiCgygeYgygehagJgeAJ").cp().ef());
            stroke.setBounds(0, 0, 177, 233);
            return stroke;
        }(),
        191: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AKyAKYgKAKAAAoAKAeYAAAoAKBGAAAoYgKE2j6MWjcF8YgyBkgeAohuCMYgUAUgKAoAAAUYgJBGBjCWAyAAYAUAAAygUAygUYDwh4IIiWEigoYCWgKAegeg8hGYgegehagygeAAYgKAAgeAKgeAKYleBkm4BkgegKYgKAAgKgUAAgKYAAgoC0ngCWlUYDInWBQiWBGhaYA8hGgUgyhuhkYhkhahag8gyAAYgoAAgKAAAAAK").cp().ef());
            stroke.setBounds(0, 0, 147, 231);
            return stroke;
        }(),
        192: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AKKAKYgUAUAAAKAUAoYAUBQAAAegKBGYgUCMhaDci0EsYhuDIgyA8huBuYhkBagJAeAJA8YAUBaBaBkAoAAYAKAAAygKAogeYCqhQEYhaC0gUYBGgKA8gKAKgKYAygUAKhGgogKYgUgKhaAKlAAUYjIAUgegKAAgeYAAgoFeoIC+j6YBGhQA8hQAKgKYAKgogog8hkhkYhkhagogehGAAYgoAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 107, 167);
            return stroke;
        }(),
        193: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGuAKYgKAKAKAUAoBaYBGCMAKAogyC0Yg8EOh4EihaCCYgeAog8BQgyAyYgyAygoAyAAAKYgJAyAnA8BkBGYA8AoAoAAAegeYAegeB4hQBQgoYBagoCqhQDchQYFAh4B4hQhQgUYgygKmkBakYBQYiMAogUAAAAgeYAAgyFKqoB4jIYAegyAUgyAAgKYAAgogygoiCgoYgygUhGgUg8gUYhkgegKAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 136, 168);
            return stroke;
        }(),
        194: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AIcAKYgUAUAAAKAKAoYAeBugUBuhaC+YiMEihkCqh4BkYg8A8geAoAAAeYAAAeA8BuAeAeYAeAeAAAACCgyYBageEOgyC0geYDcgeBGgUAUgUYAUgUAKgKgKgKYgKAAhugKj6AAYi+AAi0AAgKAAYgygKAKgeBuiqYCMjSBkiMBkh4YBuiCAKgUgUgoYgKgoigiWgygeYgygKgyAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 113, 138);
            return stroke;
        }(),
        195: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJ2AKYgKAKAAAUAUBGYAKAoAKA8AAAeYAABuhuEYiCDIYhQBuh4B4hkA8YgeAUgyAegKAUYgeAeAAAAAAAyYAABGAyBkAyAoYAyAyAUgKCMhGYCqhaCCg8EYhaYEYhaC+g8DwhGYDSgyAUgKAKgUYAUgUAAAAgUgKYgKgUgeAAkEAoYx0CqBugUAAgUYAAgoFAocB4iqYAog8AogyAAgKYAKgyg8gojcg8YhagKgUAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 186, 152);
            return stroke;
        }(),
        196: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AZoAKYgKAKgKAegKAUYgKBQgoAyhaB4YjSEEiCCCmaEsYmuFAi+CCgoAAYgKAAgUAUgKAKYgdA8AJA8BGBuYAeAoAeAeAKAAYAUAAAeAAAygeYCqhGDIhGCWgoYEEhGImh4DcgUYC0gUBGgUAegUYAUgUAAgKgKgUYgKgKgeAAhkAKYleAUnWA8nCBGYi0AogUAAAAgUYAAgUHClKHglUYEOjIDIiCAUAAYAeAAAogyAAgeYAAg8iCi+hQg8Yg8gUgeAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 209, 180);
            return stroke;
        }(),
        197: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AVGAKYAAAAgKAUAAAUYgUBQhuCMigCqYiCCChaBQocF8YhQA8hQAogeAUYhGAUgeAUAAAoYAAAoAUA8AyBGYAyA8AKAKBQgoYCWg8E2hkDcgoYDcgyGGg8D6geYBkgKAUgUgegeYgKgUh4AAigAUYhGAAhaAKgoAAYh4AKlyAojmAoYhuAKhkAKAAAAYgUgKDcigHWlAYC+h4DIiCAygeYBkgyAKgKgKg8YgUhQigi0g8AAYgKAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 186, 146);
            return stroke;
        }(),
        198: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APyAKYgUAKAAAUgKA8YgKBagKAog8CWYg8CMhaCWhaB4YjmE2kiFogoAeYgUAKgoAegKAUYgeAeAAAKAAAeYAAAeAKAeAKAKYAeAoBuBaAeAAYAKAAA8geBGgyYCqhuDmhuEihuYAygUAygUAKgKYAegUAAgogUAAYgegUkiBGkEBGYiWAygUAAAAgUYAAgeE2mQDmkOYAygyA8hQAogyYBGhaBGhQBahQYAegeAUgeAAgKYAAgegyhGhGg8YhkhQhagTgoAT").cp().ef());
            stroke.setBounds(0, 0, 137, 183);
            return stroke;
        }(),
        199: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMqAAYgeAUAAAeAeA8YAoBGAABGgoBaYg8CMiqDwjIEOYhuCMhkBuhaA8YhGAygKAyAABaYAABkAyBGAyAAYAAAAAygUAogeYC+huF8igEYhaYCMgyBagUDcgyYBugUAogeAAgeYAAgyhGAAkOAyYiWAUnqB4iCAoYg8AUhGAKAAgUYAAgoHqowDmjmYB4iCAKgKAAgeYgKgogogohGgyYiChaiCgng8AT").cp().ef());
            stroke.setBounds(0, 0, 165, 167);
            return stroke;
        }(),
        200: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AKAAKYgUAKAAAoAeBGYA8Cgg8DIjIEYYhkCChkBkhuBQYiCBkgTAeAJA8YAUBGCCCCAyAAYAUAAAogUAygeYCMhaCqhGEOhaYCMgyCqgyBQgUYBGgUBageAogKYBugyBQhahQAAYiCAKn0BklKBkYg8AUg8AKgKAAYgeAAAKgUAyg8YBahuEileBkhuYBkhuAKgKgKgeYgKgygogoiChQYjSh4gogJgoAT").cp().ef());
            stroke.setBounds(0, 0, 163, 148);
            return stroke;
        }(),
        201: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANmAUYgUAKgKAoAAAoYAAAegUAygKAeYgyBuiWCgiWBkYgoAeg8AogeAUYgoAegeAKhGAKYgoAKgyAKgKAKYgoAegyBaAAA8YAAAoAAAUAKAKYAUAeAeAAA8geYAygUAKAAEEAAYCWAADcAAB4AAYDmAKAegKAUgeYAKgogUgKjcgeYkOgejSgogUAAYgygUAogUEEigYCWhQCMhQAUgKYBGgeAegogKgyYgKhQhGh4g8hGYg8gygegJgeAd").cp().ef());
            stroke.setBounds(0, 0, 122, 104);
            return stroke;
        }(),
        202: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAKYgUAUAAAUAUAoYAoAyAoBkAUBGYAKAyAKBGAACWYAADmgKAUg8BuYgoA8gKBQAeBQYAoBkBGBaAyAAYAKAAAygyBGg8YB4h4DIiqEsjwYDmi+B4hkAAgUYAAgUgoAAhGAyYhGAoigBQmuDcYhaAygoAAgegeYgegegKg8AKkOYAKkYAAAAhQg8YhuhahkgTgyAd").cp().ef());
            stroke.setBounds(0, 0, 132, 136);
            return stroke;
        }(),
        203: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAAYgKAUAKAeAUAoYA8BGAUA8AKCWYAKBuAAAegUBaYgUBkgUAygyBQYgUAUgKAeAAAKYAAAeAoBaAUAeYAyAoAegKAyhQYAyhQCqjIBuiCYBahkAKgUgUgKYgKAAg8AohQA8YhQA8g8AogKAAYgUAAAAhkgKjwYAAkEAAAAhkgeYhQgUgyAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 62, 107);
            return stroke;
        }(),
        204: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABQAUYgeAeAAAAAKA8YAKAeAUBGAKAoYAKAoAUBGAAAoYAKBugoDSgyA8YgeAogUBGAAAoYAABuBkC+A8AAYAKAABGg8BGhQYCWiMDSi0DIigYA8gyA8g8AKgKYAUgegKgUgUAAYgKAAlyCgh4A8YhaAogygKgKhGYgKgeAAgoAUiCYAejmAAAKhQhQYhQhGhQgygUAAYgKAAgUAKgKAK").cp().ef());
            stroke.setBounds(0, 0, 102, 123);
            return stroke;
        }(),
        205: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAAYgeAKAAAyAAAoYAAAUAUAyAUAeYBGCMAUBkAeD6YAKCgAyFoAeCMYBuJYBkFyCWF8YDcIcDSFUFUFUYCgCgAKAKBuA8YDcB4B4AUBGgyYBGgyAKhQgei0YgUh4gUjwgKi+YAAhagKhQAAgKYgKhQgeAegoBuYhaEihaC0gyAAYgKAAgogKgegUYiqhQk2lAi0kYYj6l8jmrGhaqKYgKhugKhkAAigYAAjwAKhaAoiqYAUhGAAgyAAgUYgUh4lUizhkAd").cp().ef());
            stroke.setBounds(0, 0, 215, 428);
            return stroke;
        }(),
        206: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAAYgTAUAJAeAoBuYBGCCAoB4AKBaYAoEEAKAyBQFAYAoCqBaEOAyB4YBkEYC0EsCgC0YB4CMCWCMBuAyYB4A8B4AoAyAAYAyAAAygUAUgeYAUgoAAhGgUiqYAAhagKiMAAkEYAKlKAAgegUAAYgKgKgKAUgKAoYhaE2huEig8AoYgeAegegKhQgyYhQgojIjIhQh4Yi+kOi0nWg8mGYgeiWAAj6AUiCYAKgyAAgyAAgKYgUhGiqhuiMgoYhagKgKAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 173, 289);
            return stroke;
        }(),
        207: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AA8AKYgoAKgKAUgKAUYAAAoAAAeBGAoYB4BQCMCWB4DIYB4DSDmEsCqC+YFUFoFeD6FUB4YDmBQDIAUAUgoYAUgUgKhGgyhaYgehGgehQhQkOYgUhGgyhGgeAAYgUAAAAAUgKCWYgKCMgUBQgeAUYhkA8lyigj6jmYi0igi0jcigkEYigjwhGiqgUi0YgKhQgegohGgeYhkgyjcgJhkAT").cp().ef());
            stroke.setBounds(0, 0, 247, 212);
            return stroke;
        }(),
        208: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAUYAAAeAABkAeAyYAUAeA8A8AUAAYA8AACMB4BQB4YBQB4AUAoAyEEYBGFeAKCWAAGGYAAFeAABkgoDcYgUCMgyDSgUAoYgoA8g8AAi+gyYhQgUhGgKAAAAYgKAKgKAKAAAUYAAAUAUAeBQBQYAyAyBaBuAyBGYCCC0AeAKBahaYB4huBajmAylAYAeigAUleAAi+YAAlygynChGksYhQlUhQi0iCh4YhkhakiiqhGAAYgKAAgKAAgKAU").cp().ef());
            stroke.setBounds(0, 0, 91, 344);
            return stroke;
        }(),
        209: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHCAAYgUAUAKAUAyAyYBkCMAyCWA8GaYA8HMAeGugKIIYgKFUAABGgUBuYgeDIgoBug8B4Yg8B4goAAkihQYjSg8gKAAgKAKYAAAUAKAeB4BuYBGA8BkBaAyA8YA8A8BGBGAeAeYA8A8AUAKA8goYA8geCWiWAohGYB4jIA8kEAAkiYAAkshaxCg8l8YAAgegKgyAAgUYgKgegKhGgKg8YgUiMgejSAAhGYAAhQgUgehQgoYhGgoi0g8gUAAYgKAAgKAAAAAA").cp().ef());
            stroke.setBounds(0, 0, 109, 373);
            return stroke;
        }(),
        210: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAUAAAKAAAKYAKAKBGA8BaA8YBaA8BuBQAyAoYCWCMB4C0A8CqYBaD6gKFehaFoYgyC0goBQhQAUYgyAUgoAAi+goYhagUhkgUgUAAYhQAAAeA8CCBuYCWBuCMB4BQBaYBaBkAeAKBGgoYAygUBahkAegyYBGiCA8j6AejwYAymkgekih4ksYhQjSgegyh4h4Yigiqiqh4jmhaYhkgegUAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 108, 262);
            return stroke;
        }(),
        211: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AIcAKYgKAUAAAKAoBuYBkD6AoCgAUFAYAKC0AKBGgKB4YgUEOgyC+gyAyYgUAUgKAKgogKYgUAAiCgoh4goYiCgehugoAAAAYgKAAgUAKgKAKYgJAKAJAKB4BuYB4BkCMCWCqC0YAyAyAUAKAeAKYCMAUCMjmAylKYAylegeqUhak2YgoiqhkiMh4hQYhGgegKAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 102, 229);
            return stroke;
        }(),
        212: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AFeAAYgUAegKAyAUAeYAKAUAeAyAyAoYBQBGAoBGAeBaYAoC+AKIcgoDIYgeC+AKAAlUgyYhkgUhagKgKAAYgxgKATAoCMCCYDcC+BQBQAyBGYAeAoAeAeAUAKYAyAKA8g8BkigYAyhGAohuAKhkYAUh4gKocgUkEYgKhagojmgKgoYgUgygogyh4hGYiqhuhagdgUAJ").cp().ef());
            stroke.setBounds(0, 0, 90, 208);
            return stroke;
        }(),
        213: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADcAKYgeAeAKAeA8AyYBkBGAyBaAoCgYBQFKgeFohuA8YgoAegeAAiWgeYiggegKAAAAAKYAAAKAoAyA8A8YA8BGBGBGAeA8YBGBuAeAKA8gKYBQgeCCiCAyhuYA8huAKhGAAjcYAAjSgUiCgyjIYgoiggehGg8gyYhuhaiggng8Ad").cp().ef());
            stroke.setBounds(0, 0, 76, 161);
            return stroke;
        }(),
        214: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ACCAKYgUAegUAyAAAyYAAAoAeAoA8AUYAyAUCqCqBGB4YBuCgBGCgAeBuYAoC0geCChQAyYgyAehaAKhQgUYhkgKjIgegyAAYhZAAAxBQC0BkYC0BkCCBkAeAyYA8BaAeAUAyAAYAyAAA8geA8hQYCWi+BQkYgojcYgyjwiMjmkYkYYg8g8g8g8gUgKYgUgKgegUgKgUYg8hQgegUgegUYg8gKgUAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 104, 187);
            return stroke;
        }(),
        215: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AC0AeYgoBQAKAyBaAoYBkAyCgCgA8BuYA8B4AKBugyAoYgeAeiCAAjSg8YhkgUhagUgKAKYgdAKAdAyCMBQYDSB4BaBGBaB4YAyA8BagKBGhGYBuiCAejmgyigYgyiMiCigiqiCYhkhagogogKgeYgUgegegKgygKYgoAAAAAAgUAe").cp().ef());
            stroke.setBounds(0, 0, 87, 123);
            return stroke;
        }(),
        216: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AEiAUYgUAKgKAUAKAoYAAAyAKAeA8BaYBQCMA8B4AAAyYAAAogUAogeAKYgKAKhkAAhuAAYiCAKhQAAAAAKYAAAKAeAeCCA8YBkAyCMBQBGAoYBGAoBGAoAKAAYAoAABQhkAUhGYAyighkkYi+jcYgegegog8gKgeYgyhag8gTgoAn").cp().ef());
            stroke.setBounds(0, 0, 79, 104);
            return stroke;
        }(),
        217: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgTAKAJAoA8C+YAeBaA8CgAoBkYBkE2BGCMBkCMYB4CMCgBkDwBaYHMCWKUgoF8i+YCChGCChQAKgeYAUgogohGhkhGYiChuh4hujmjmYiCiChuhkgKAAYgeAAAKAyA8B4YAeA8A8CCAeBaYBGCWAAAUAAAyYAABQgoAehQAeYhkAehQAKi+AKYloAKk2g8i+h4YjSh4igkYh4maYgeiMgogyhGgyYg8gogygJgeAT").cp().ef());
            stroke.setBounds(0, 0, 277, 162);
            return stroke;
        }(),
        218: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAKYgTAeA7EOBGCqYA8B4AoA8BkBkYCgCqDIBkE2BQYCCAeD6AyB4AKYF8AoCqgKDchQYCMgoBQhGgKg8YgKgUgogygogoYigiqiqjShui0YhQiCgegegUAKYgUAUAABGAKBQYAUBuAoEYAAAoYAAAygUAegoAUYiWBQocgok2h4Yiqg8hagyhuhuYhuhugohGgoiWYgyiWgUgyhGgUYgogKgeAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 247, 123);
            return stroke;
        }(),
        219: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAKYgTAoBPFABQC0YCMEODwC+FUBuYCCAoE2BGCgAUYF8AyD6gKEEhGYCqgyA8goAUhGYAKgeAAgKgUgeYgUgegogogogoYiMh4jmkYiCi0Yhah4gUgegUAKYgeAKAAAyAeBkYA8DIAoCqAKA8YAeCqhQAologKYm4gUlAhQjmigYi0h4hkiMhGjmYgUhGgeg8gUgUYgogyhQgJgeAT").cp().ef());
            stroke.setBounds(0, 0, 262, 129);
            return stroke;
        }(),
        220: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAKYgJAoBFC0BaCMYBaCCDcDICCA8YF8CqH+A8DchaYAygeA8gyAAgeYAAgegUgehQhaYiCiCigjSiWjcYgyhGgUgKgKAUYgKAKAUBaAeBkYAyDcAUCMgeAeYgKAUgUAAhaAAYjIAAjmg8iWhGYiMhGiqiWiWjIYhGhQgegJgKAT").cp().ef());
            stroke.setBounds(0, 0, 182, 95);
            return stroke;
        }(),
        221: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAhwAAUYi+A8muBukOAyYkOAyksAomGAyYh4AKhuAUgUAAYg8AegTBuAnA8YAoAoBQgKFehQYJiiMNciWC+AAYBaAAAAAAAoAeYBkBQAUBaA8PUYAUDwAKX6gUBkYgKBugeAygyAeYgyAUiWAAi+geYhagKhGgKgKAAYgeAUAKAoAoAUYAKAUBGAeAyAoYCqBkCqB4BuBkYDSC0A8AABGiMYAohQAehkAUiWYAUiqAAhagUj6YgelUgenCgKkYYgoqegKiMAAk2YgKloAKhGAohkYAKgoAUgyAKgUYAKgogKgKgKgeYgegyhkhQiMhGYhug8gUAAhGAAYg8AAgeAAhQAU").cp().ef());
            stroke.setBounds(0, 0, 287, 412);
            return stroke;
        }(),
        222: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAlCAAKYhkAojSAei+AUYkOAep2Bal8BGYiMAUhuAKhuAKYiqAAgoAKgUAoYgJA8AJBQAyAUYAeAUBagKBQgUYAoAAA8gUAogKYAoAACWgeCMgeYJEhaHWg8GQgeYCqgKAKAAAoAUYBGAeAUA8AeEOYAyGGAUFoAUJYYAKCqAKFAAKDmYAeHMAABQgoBQIgeAyIg8AAYgogKgoAAgKgKYgUAAgKAAAAAUYAAAUBQCMBQBuYAeAyAyBQAeAyYAoBQAoAoAoAAYBaAABQi0AekiYAUhkgKjSgUiqYAAgUgUhagKhQYgekEg8x+gKngYgKjmAAhaAKgUYAKgUAeg8AegoYAegyAUgyAAgKYAAgyhQhQiqhuYi0hkg8gJh4AT").cp().ef());
            stroke.setBounds(0, 0, 302, 395);
            return stroke;
        }(),
        223: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AeyAeYmaBun0BaqKA8YlyAoAKAAgeAeYgUAUAAAKAAAyYAAAoAKAUAKAKYAoAeBkAAC+goYFyhQKUhuHCgyYDSgeAeAKA8AyYBGBGAUBuAeHMYAeIIAKD6gKKKYgKNIAABkhGBGIgUAeIhkAAYgygKhkgKhQgKYhGgUhGgKgKAKYgKAAgKAKAAAUYAAAeAKAKAyAeYBaA8DcCqCCCMYCqCgAoAUA8gyYBQhGA8i+AUkEYAKhkAAhagKjSYgUkigUnWgUlKYgKl8gUq8AKiCYAAiWAUg8AohkYAyhuAAgehGg8Ygyg8i0huhQgeYhGgKgyAAiqAe").cp().ef());
            stroke.setBounds(0, 0, 263, 397);
            return stroke;
        }(),
        224: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAj8AAAYh4Aon0B4kOAyYiMAUn+A8nqA8YkOAUAAAKAABQYAAAoAAAUAUAUYA8AyBkAAEig8YGkhaKyh4ISg8YCWgUAeAAA8AoYBGA8AUCCAoKUYAUEEAASIgUDmYgKCqgKA8gyAoYgeAUhuAKiMgUYiggegUAAgUAKYgeAUAeAoBkBGYCCBaCWB4B4BkYCMCMA8AUA8g8YBuiCAyksgemkYAAhkgKiCAAg8YgKg8gKiqAAiWYgeocgKjmAAloYAAmGAAgeAyh4YAohGAAgogegyYgegohkhGh4hGYhagogegKgyAAYgoAAgoAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 284, 362);
            return stroke;
        }(),
        225: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("Ac6AAYgyAUkEBGjmA8YjwAyjmAomuBGYlyA8AAAAgUAeYgUAeAABaAKAeYAKAeBGAACWgoYGahkGGhQHWhQYFAgyAKgKAyAeYBQAoAKBQAKHCYAUHggeNIgeBuYgKAygoAegyAKYgyAKiWgKhugUYhkgUgeAKAAAeYAAAUAUAKBGAoYCCBQDcCWBuBkYB4BaAoAUAogeYA8goAyiCAUi+YAUhuAAgogUmQYgUpYgUpYAKhaYAKh4AKg8AohQYAKgoAUgyAAgKYAAgyhahQiMhGYhugygegKgyAAYgeAAgoAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 235, 284);
            return stroke;
        }(),
        226: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AU8AoYjcBGlKBQlAAyYmGBGgeAKgeAUYgdAoAJBQAyAeYAeAUCMgeEYhGYGkhkEsgyCCAAYAyAKAUAAAoAeYBGAyAKAUAKDwYAKDwgKMCgUEEYgKDmgeEEgoD6YgoDSgKAohQEOYhGEEgoBGhGBQYg8A8goAAjShaYiCgygogKgKAUYgKAeAeAoBuBuYA8A8BQBaAyA8YBuCgAKAKA8AeYA8AeAeAAAogeYA8goBujcBQj6YCqpEBkqoAes0YAesgAAgKAUhaYAKgyAehQAKgeYAUgoAKgyAAgKYAAgehkhaiChaYjIiBAKAAjIA7").cp().ef());
            stroke.setBounds(0, 0, 197, 410);
            return stroke;
        }(),
        227: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ATEAeYksBanCBalyAeYhkAKgJAKATAyYAUAoAoAeBQAoYBQAoAygKDmgyYDSg8EEg8CWgUYBugUAoAKAyAoYBQBGAUBQAeHWYAUF8AUJOgKHWYgKH0gKGagUBQYgeC0hGAKmGh4YiWgogUAAAAAyYAAAKAUAeBQAyYCqCCDICqB4BkYBuBuBGAoAogKYBGgeBGiWAojmYAUiMAAj6geoSYgowGgUwQAeiCYAKgeAUgyAKgeYAohaAKgUgegyYgohkkYiWh4AAYgKAAg8AKhGAU").cp().ef());
            stroke.setBounds(0, 0, 183, 406);
            return stroke;
        }(),
        228: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AYOAKYj6B4piCCn0AyYiCAUgoAKgKAeYgdBQAnA8BuAAYAyAAC0gUBugUYAogKC0geC0geYCqgeDSgoBQgKYDSgoBaAKAoBaYBQC0AyIIAAKoYgKIIgeKygeA8YAAAUgUAKgUAKYgeAUg8gUiCg8YhQgogUAAAAAKYgKAUAyBaBQBkYBuCCCMDIAoBGYAUAeAeAoAKAKYBaBQBuh4BGjmYAoiMAKhugKi0YgKhagKhuAAgoYgemkgKkYgKkEYAAhQgKiqAAiCYgKiCgKjcAAigYgKlAAKgeBGh4YAohQAKgUgogyYgygyiWhaiChGYiCgygygJhGAT").cp().ef());
            stroke.setBounds(0, 0, 216, 370);
            return stroke;
        }(),
        229: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANcAKYj6BGksA8jIAUYh3AKgKAKA7BGYBkBkBkAUCMgoYDmhGCWgoAyAAYBaAKAyBGAeCMYAyEsAUP8goNmYgKEsgKAygyAyYgeAUAAAKhkAAYhQgKhGAAhugUYiWgegeAAAAAeYgKAeAeAeAeAKYA8AUEsDIC0CMYCMBuAoAUAogUYA8gUAyhkAeigYAeh4AAlKgenqYgepsgKjwAAnCYgKngAKgyAyh4YA8hugKgeg8g8YhQhQi+huhQAAYgUAAgyAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 138, 359);
            return stroke;
        }(),
        230: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQuAAYgKAAg8AehGAeYiWBQhQAehuAUYiCAeksAohGAAYgoAAgUAKgKAKYgUAeAAA8AKAoYAUAUAAAKA8gKYAeAAA8gKAegKYAogKCggeC0goYCqgoCqgeAogKYBagUAAAAAeAeYAoAoAKBaAeF8YAyN6AAJigyB4YgUAoAAAAgyAAYgUAAhkgKhQgeYiggog8AAgKAUYAAAKAoAoA8AyYBkBaCqCqBkBkYAyAyAUAUAeAKYBGAUAUgKA8hkYCWjcAKg8gomGYgUlegKh4gUm4YgoqyAKhuA8iCYAohQgKgehQg8YgygoighQg8gUYgoAAgoAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 155, 293);
            return stroke;
        }(),
        231: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAsiAAUYh4AekiAyl8AoYm4AomGA8lKBQYigAeiqAoj6AoYjcAegeAKgoAeYgeAegJBGATAyYAeBQBGAADchQYA8gUBageA8gKYEEg8OYiWEEgUYD6gUFUgeCggKYDSgKAUAAAeBGYAUAyAKC0gUFAYgUKAhGHqhaFKYgeCChGA8hkgKYgUAAhagUhkgUYjmgoAUAAAAAeYgKAoAeAUCWCMYCgCCBaBkBQBkYBGBuAeAKBGgoYBagyCMkEBGkEYAyjSAejmAooIYAKhQAKjcAKjIYAenqAKhkA8hkYBGh4AAAAgKgUYgegeiChah4g8YiqhPgeAAiWAd").cp().ef());
            stroke.setBounds(0, 0, 349, 314);
            return stroke;
        }(),
        232: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAtKAAUYhQAUhaAUleAoYqKBQkOAoksA8YiCAUksA8jwAoYmuBGAAAAgeAeYgdAyAJBaAoBGYAUAeA8gKBagoYBugoDShGCWgeYIShuDSgoImg8YG4g8BGAAC+gKYDIgKAeAKA8BGYAyA8AKA8AKCgYAKDcgKC+hGHgYhGISgUBkgeAoYgeAUgyAAgygoYgygegeAAAAAUYAAAKAeA8AUA8YAeBGAeBGAAAUYAyCCBQBaBGAAYAyAABah4AyiWYAyiWAyjmAej6YAKhuAek2AKhGYAenCAoi+BGhuYA8hagUg8iMiMYiWiMighahQAAYgKAAgeAAgeAU").cp().ef());
            stroke.setBounds(0, 0, 349, 267);
            return stroke;
        }(),
        233: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAoeAAAYgKAAhGAUg8AUYlKBun+B4kEAoYiCAKjmAehuAKYgyAAhQAKhGAAYiMAKjcAUigAKYg8AAg8AKgKAAYgeAUgJCMAdAyYAKAUAUAKAUAAYAUAACggUCqgoYFog8DcgoFogyYCMgUCqgeBQgKYIwhkCggKBaAoYBQAoAoBugKDSYgUGkgoF8haGuYgoDSgKAogeAUYgeAKgUgKhag8Yhag8gogKgKAUYgKAoDmImA8BQYAeAoAeAKAogUYAygeAUgeA8h4YB4j6BGkYAelAYAAgeAUiMAKiCYAUiMAUi0AKhaYAekiAeiMBaiCYBQh4AKgogygyYgyg8h4hGiMhGYhkgygegKgyAAYgoAAgeAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 320, 279);
            return stroke;
        }(),
        234: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAvWAAUYhuAej6AokOAUYqoBGksAomkBQYhuAekEAojIAeYjIAeiqAogUAAYgoAegJBaAnA8YAUAeAKAAAoAAYA8AAC0geBQgeYBageCCgUFyg8YMqiCEYgeJigoYFKgUAoAAAeAUYAoAeAKAUgKCMYAAIchaIShkBkYgyA8geAKi0geYhQgKhagKgKgKYgogKgUAKAKAeYAAAoAeAoBkBuYBaBuB4CgAeA8YAeA8AoAoAeAAYAyAABGhQBaiMYBui+BQkiCCraYAeiqAeiqAUgoYAKgeAeg8AUgoYAegoAUgoAAgKYAAgoiMhui+hkYhugyg8gJiCAd").cp().ef());
            stroke.setBounds(0, 0, 367, 234);
            return stroke;
        }(),
        235: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAqgAAKYhuAeh4AUl8AoYpiAyk2Ayl8BGYjSAojSAojIAeYg8AAg8AUgUAAYgeAUgUAoAAAyYAABQA8AUCWgoYEEhGA8gKGQg8YGGg8FygoCggKYBQAADcgUC+gKYC+gKCqgKAKAKYAyAKAeAoAKBGYAeCCAUFygKEsYAAG4geB4huAyIgyAUIiqgUYlKgogKAAAeA8YAUAeAeAeB4BkYCqCCCCB4BGBQYBGBaAUAKAygUYBQgoBujmAojmYAoi0AomuAKl8YAKj6AKigAUg8YAKgeAUgyAUgeYAUgeAUgeAAgKYAAgoh4hQiMhQYigg8gygJhuAT").cp().ef());
            stroke.setBounds(0, 0, 330, 242);
            return stroke;
        }(),
        236: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAmmAAKYhkAejSAei0AKYpEAyjwAemGBGYkYAykOAoh4AKYhaAKgTAKAJAeYAKAKAoAeAyAeYBkBQAUAACWgeYCggyBQgKE2gyYJOhQDSgUImgeYEOgKAUAAAKA8YAeBQhGHgg8DwYhGEshGAyjchQYjIhGh4gegKAAYgKAKAAAKAUAoYAKAeAoA8BGBQYCMCqBQBuA8B4YAoBaAKAKAeAAYAeAKAygeA8hGYCqjIBGi0DSrkYBGj6AehaBGhQYAUgeAUgeAAgKYAAgUgUgegogeYhGhGjciMgygUYgyAAg8AAhaAK").cp().ef());
            stroke.setBounds(0, 0, 308, 202);
            return stroke;
        }(),
        237: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("Af4AKYgoAKjIAohuAKYm4A8ngBGigAoYhkAUkOA8huAKYhGAKg8AUAAAeYAAAeAUAeBaAoYBkAyBGAAB4goYFUiCMCiMGGgKYCCAAAAAAAeAeYAUAUAKAKAAAeYgKA8gyDwgoB4YgeBagUAegeAAYgUAAjmhQhugyYg8gegyAAAAAUYAAAKA8BGA8BQYCMCMB4CgAyBaYAUAoAeAeAKAAYAyAKBkhaAohkYAUgoA8igAyiWYBakYAKgeBkhuYAUgeAKgeAAgKYAAgohGhGiChkYiMhkgegJhGAT").cp().ef());
            stroke.setBounds(0, 0, 249, 134);
            return stroke;
        }(),
        238: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAj8AAKYgUAAgyAegoAUYh4Ayi+A8l8BQYl8BQhGAUhGAKYiqAeksAojcAKYjIAUgoAAgUAUYgUAKgKAUAAAKYAAAeAyAyBuAyYCCBGAeAADcg8YImigNci0DwgKYBkgKAKAAAUAUYA8AyAKBug8EEYhGFohGD6hkC+YhaC+hGBGhkAAYgoAAiqgyiChGYgygUgygUgKAAYhGAAAoBGCMCCYBuBaBQBkB4CCYA8BQAoAeAygKYBkgKDmjwBai0YBQigBaleBaoIYAojwAohuBQhuYAegeAKgeAAgUYAAgohahGjIhkYhkgyhQgJg8AT").cp().ef());
            stroke.setBounds(0, 0, 284, 227);
            return stroke;
        }(),
        239: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAhmAAAYgKAKjwAyjIAoYhaAKiMAehGAKYhGAKiMAehkAUYhkAKi0AoiCAUYh4AUi+AohuAUYhkAUhkAUgUAKYgoAUgJA8AJAyYAeBQBaAADIhGYDIg8Eig8ImhaYF8hGB4gKBaAAYBkAAAyAUAyBGYA8BkAAAUhaGuYhaHMg8DSgyBGIgeAyIgogUYgygegoAAgKAeYAAAUBQCqA8BGYAyA8BaBGAeAAYAoAABQhaAehaYAyh4Bal8BGloYA8kYAKgeAohaYAeg8Aog8AegeYBQhaAKgegegyYgeg8kijIhQgeYgygKhQAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 271, 206);
            return stroke;
        }(),
        240: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AdiAUYiCAen0BujwAoYhuAUiCAUgoAKYgyAKigAoiqAeYigAeiMAegUAAYgoAUgJBuAdAyYAoAeAoAACWgyYC+g8DcgyF8hQYGahQEYgyBQAAYBkAABQBQAABkYAAAyhGFAhGDmYgyCggoBagUAKYgKAAgegKgegUYhGgegeAAAAAoYAAAeBkDIA8A8YCWDIBQg8CMmuYAohkAyiqAeh4YBQj6Aeg8B4iCYAygyAKgogogyYgog8jSighkgoYg8gUgoAAiCAU").cp().ef());
            stroke.setBounds(0, 0, 250, 166);
            return stroke;
        }(),
        241: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AcwAUYp2C+kYAyq8AyYi+AUgUAAgUAeYgJAoAJAyAyAyYAoAeAKAAAyAAYAeAAAoAAAUAAYAegKB4gUCCgeYB4gUCMgUAogKYBQgUJOhaC+geYDIgeA8AeAUCWYAKCWhGK8goA8YgUAehGgUgygoYgogegUgKgUAKYgyAAAAAoAyBuYAeAyAyBuAoBaYBGCgAeA8AoAAYAyAAAogoAyhuYBai0AehkAyl8YAUiqAei+AKgyYAUhkAyhuA8hQYA8hQAAgeg8g8Yg8gyiChQhkg8YhkgegygJh4Ad").cp().ef());
            stroke.setBounds(0, 0, 245, 191);
            return stroke;
        }(),
        242: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AccAUYi+BamGBknCBQYj6AogoAKjSAUYhkAKhuAKgUAKYg8AKgTA8AnAoYAKAKAeAKBuAAYCCAAAKAAFohGYDSgyEsg8CggeYFehGBkgKBaAoYA8AUAKAeAUCCYAoDwAAHggeH+YAACWgKAygKAeYgeAogoAAiCg8YhkgygeAAAAAUYAAAKAyBGAyBGYA8BQBQB4AoBGYCCC+AAAKAeAKYBkAyCCjSAokEYAAhGAAhGgKj6YgemkgepOAKhkYAAhaAehQAog8YAogogKgehGhGYgygygygehugyYiqhGgogJhGAd").cp().ef());
            stroke.setBounds(0, 0, 238, 251);
            return stroke;
        }(),
        243: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AcwAKYgeAKhkAehkAeYm4CCkiA8qAAyYiWAUg8AAgKAUYgUAUAAA8AAA8YAUBGAKAKBagUYAoAABQgUA8gKYBGgKCMgUB4geYD6goEigyFUg8YDSgeA8AAAeAAYA8AUAeAUAUBGYAKAoAAAoAADcYAACMgKCMAAAeYgUCqgoD6gUB4YgKAKgKAUgKAKYgUAKgKAAgogKYgegUgogUgegeYgygogegKgKAUYgKAUB4EiBQC0YBaCqAUAeAygKYAogKAogyAohQYBai+Aoi0AejcYAKhQAKhkAAgoYAKgoAAgyAKgeYAomQAKgyA8iCYAUgyAogyAUgeYAyhGAAgog8gyYg8g8huhGh4gyYhugyhGgJhaAT").cp().ef());
            stroke.setBounds(0, 0, 245, 218);
            return stroke;
        }(),
        244: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("Ad2AeYiMBQomBunMAyYmaAyksAegKAUYgoAUAAAyAAAoYAKAeAoAKCCAAYBkAAA8gKC0geYBugeDSgeCMgeYCMgUCMgUAegKYBQgKGQgyBGAAYAoAAAeAKAUAKYBGAeAAAAAAHWIAAGkIgUAyYgUAogUAKgeAUYgyAUgeAAiWgeYiMgUgyAAgKAUYgUAeAeAUCqB4YBaA8CCBQAyAyYA8AoA8AoAKAAYAyAKA8gyA8huYA8h4AAgUAAoSYAAmuAAg8AUhQYAUiCAAgUhahQYhahQhuhGgeAAYgUAAgoAKgoAU").cp().ef());
            stroke.setBounds(0, 0, 233, 178);
            return stroke;
        }(),
        245: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AfQAAYgKAKleA8jSAUYjSAUjmAoocBQYhuAKiCAUg8AKYiCAKgUAUAABGYAAAoAAAKAeAUYAUAeAKAAA8gKYAoAAB4gUBugUYFehGNShuC0AAYBuAAA8AUAeBGYAeA8AAAKhGEsYgyDwgeBkgoAoYgUAegKAAgogUYgeAAgKAAgKAAYgKAKAyCgAeAyYA8BaBaA8AogKYBagUAyiCCWnqYAyi+AohQBQhaYAegeAegoAKgKYAUgogUgogygyYg8hGiWhuhGgeYgogUhkgKgKAA").cp().ef());
            stroke.setBounds(0, 0, 250, 146);
            return stroke;
        }(),
        246: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AYsAAYhGAUnMBGkYAeYhGAKh4AKhGAKYiCAUiqAeh4AKYhaAKAAAAAAAyYAAAeAKAUAUAUYAeAeAyAACqgeYFAhGKyhkCqAAYBuAAAyAUAKAoYAKAehGDmgeAeYgUAegeAKgeAAYgeAAAAAAAKAeYAKBQAUAeAeAyYAoA8AKAKAogKYAygKAegyCqkiYAUgeAogyAegeYBGhGAAgegyg8Ygyg8iChugygKYgogKgyAAgyAA").cp().ef());
            stroke.setBounds(0, 0, 199, 82);
            return stroke;
        }(),
        247: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUAAeYjmBuoIB4muAoYhQAKgdAUAJAeYAKAeB4A8A8AUYAoAKAKAABGgUYE2hkImiCBaAAYBQAAAKA8geDIYgoFAhGC0haBGYg8Aog8AAiMgoYh4gogUAAgKAKYgKAUAUAoBaBaYAyAyA8BGAeAoYBaB4AKAKAoAAYAyAAB4haBQhuYAegeA8h4AehQYAUhQBGkOAeiCYAeiWAehGA8hGYBGhagegei+hkYiMg7geAAhkAn").cp().ef());
            stroke.setBounds(0, 0, 174, 148);
            return stroke;
        }(),
        248: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AbqAAYgUAKloBGvKCgYm3BQATgKAABQYAAAeAAAoAKAKYAUAeAAAABGgKYAyAAB4gUB4geYD6gyC+geEYgoYFygyBugKAyAUYAoAUA8BGAeBGYAoBQAAAohGH0YhQKUhGFAg8BGIgeAoIhGgUYgegKgoAAAAAAYgKAAAUAyAoBGYBQCMCgCWA8AAYAeAAA8hGAegyYA8iMBkowBGqeYAUiMAUiCAKgeYAUhaAyhaBGhkYAogyAegyAAgKYAAgegegogygoYgygyi+iChGgeYgygUhkgKgKAA").cp().ef());
            stroke.setBounds(0, 0, 233, 253);
            return stroke;
        }(),
        249: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AbCAKYhaAejIAykYAyYj6AyowCCjmBGYgyAUg8AUAAAKYgKAeAAA8AUAUYAKAUAKAAAyAAYAegKBGgUBGgUYBkgeFyhkDwgoYAogKDIgeC0geYGGgyAAAAAUA8YAeBGAKDSAAF8YAAF8gKCMgeDwYgeCWgUA8g8AUIgoAeIi+geYhugUhQAAgKAAYgUAUAeAyCgCMYBkBQBaBkAeAeYCCCgAUAKBGhGYAygyBQigAehuYA8jcAUjmAUq8YAKo6AAgoA8haYAKgeAUgeAAgKYAAgUiChah4gyYh4gog8gJhGAT").cp().ef());
            stroke.setBounds(0, 0, 223, 249);
            return stroke;
        }(),
        250: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAiiAA8Yo6C+rkB4psAKYjmAAgeAKgKAKYgTAoATA8BaBGYCMBuAyAAEihGYJsiWPeiqCCAUYBQAUAUAyAACMYAACMgyGGgyEsYhQG4iqHMhuBuYhGBGgeAAkEhaYjchGgygKAAAeYAAAUAUAeBuCCYBkBuCWDIAeA8YAoA8AeAUBGgKYBQgKA8geBGhGYBkhaBQh4BGiMYCglKBQloBaqyYAUiWAUigAKgeYAUhuAyhuA8haYAog8AUgoAAgeYAKgoAAAAhGg8YgygygogehkgyYi0hPgKAAkEBP").cp().ef());
            stroke.setBounds(0, 0, 292, 292);
            return stroke;
        }(),
        251: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AeAAKYhkAemGBQjcAyYloBGnWBGjmAKYiMAKgKAKAAAyYAAAUAUAKA8AeYCqBQBkAADSgyYEYhGMWiMCqAAYCggKA8AeAoCCYAoBuAKBugUFKYgKEYAABugUD6YgUDwgoEEgoDIYhGE2hkE2g8BkYhaB4gyAAlohuYkihagygKAAAoYAAAUAoAoCgB4YCMB4C+C0A8BaYB4CgBGAACCiCYCgigCWkYBGksYA8jIBGowAyoIYAelKAKjcAKhaYAKjwAoiCBaiMYAog8AAgegegyYgeg8iChGi0hGYgygUg8gegUgKYgygKgyAAhGAK").cp().ef());
            stroke.setBounds(0, 0, 259, 368);
            return stroke;
        }(),
        252: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AXcAKYhkAoqUCWksAoYiCAUi0AUhaAKYgUAAgUAAAAAKYAAAUBkA8BGAKYBuAUCMgKJEhaYCWgUC0gUBGAAYCCgKAKAAAUAUYAoAoAKBGAAFyYAAI6gyE2iMEOYg8CCgUAUhkgKYgoAAhagUhGgUYhGgUg8gUgKAAYgKgKgKAKAAAKYgKAKAUAeAyAoYBaBkBQB4A8BkYBQCMAyAeBQgyYA8geBuhkAog8YBah4BkjcAojIYAoiWA8nqAomQYAKhkAKhaAKgeYAKgeAegyAegoYAegoAegoAAgKYAKgogegehag8Yi0iCjmhFhkAn").cp().ef());
            stroke.setBounds(0, 0, 213, 253);
            return stroke;
        }(),
        253: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AS6AKYgUAKiWAoigAoYigAokEA8iWAoYiqAoh4AogKAKYgTAUAJBaAeAyYAeAoAyAeAeAAYAKAABGgeBGgeYBQgeB4gyBQgUYCWgyFohkAeAAYAeAAA8AoAeAoYAUAoAAAUAACCYAACMgeDmgeDSYgoDSgoDcgKAoYgeBGgoAAjwgoYiqgegeAAAKAoYAKAoAeAoBaBGYBuBaCCCMA8BaYBuCqBQgoCMkYYBujmAKgyAUlyYAKigAKjIAAhGYAKhGAKh4AAg8YAUiMAKg8Ayg8YAyhGAAgUhQhQYgegehGgygygeYhGgygUgKgyAAYgeAAgeAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 166, 219);
            return stroke;
        }(),
        254: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AXwAKYgUAAhGAeg8AeYiqBGjwBQiqAoYj6A8kEAoiCAKYhkAKgeAAgKAUYgTAUAJAoA8AoYBuBQBaAKBkgoYCgg8JOigC+geYDcgoAKAKgKEYYgKC+AAAKgeEEYgoEsgyDchQDcYhGDchGBahGAUYgyAKgogKjchQYkYhagKAKC0C+YBkB4CqDIAeAyYAUA8AoAUA8gKYBGgKAygeBQhGYDmjcCWnCBasgYAymQAUhQBuiqYAUgeAKgoAAgUYAAgohahQh4g8YhugyhGgJhGAT").cp().ef());
            stroke.setBounds(0, 0, 199, 256);
            return stroke;
        }(),
        255: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AV4A8YmaCCmGBGmaAUYiqAKgUAKAAAeYAAAeA8A8BGAeYBGAoA8AACCgeYF8hkJEhuCMAAYBGAAAKAKAACCYAKDIg8GuhGDSYgyC0gyBugyAoIgeAyIhGgKYgoAAg8gUhagoYiqhGgegKgUAKYgUAAAKAUBuCWYAyA8BGBuAoA8YBkCgAAAAAoAKYBuAUCWh4BujmYBujSBQkiBGngYAejIAohuBGhkYAUgUAUgoAAgUYAKgogKAAgogyYgygoiChQg8gUYhGgTgoAJjSA8").cp().ef());
            stroke.setBounds(0, 0, 201, 205);
            return stroke;
        }(),
        256: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQQAyYiqA8jSA8iCAUYhuAek2AygyAAYhFAAgKAUAxA8YAoAoA8AeA8AKYA8AKCMgUCqg8YISiWAygKBQAeYBGAeAUBkgKEEYgUISgeGagoDwYgeC0g8EEgeBkYgyCggUAyhGAAYgyAAkYg8gogUYgegUgeAAgKAUYgKAUHMHCAeAKYAoAKAegKA8gyYBQg8BahkAohaYBGiWAyj6AelAYAKh4AKhuAAgeYAAgeAKi+AAi+YAUnCAKkEAUhQYAKgoAUgyAUgeYA8hkAAgyhQg8YhahGi+hGhQAAYgUAAhaAUhQAe").cp().ef());
            stroke.setBounds(0, 0, 166, 296);
            return stroke;
        }(),
        257: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APyAKYh4A8i+A8lKBQYi+AyigAygKAAYgKAUAAAyAUAUYAUAUAKAKAygKYAeAABkgUBageYFUhQEOgyBaAUYAoAAAeAUAKAyYAeBGAUH+AAG4YAAHCgKCqgeAyYgeA8gyAKiggoYiggegKAAAAAUYAAAUAoAoBaBaYA8A8BaBkAoAoYB4CgBGAKBQiCYBah4BGi0AUiCYAUhugKkihGtIYAAhQgKhkAKgoYAKhQAehuAegyYAKgeAKgeAAgKYAAg8h4hQi0hGYhkgUgeAAg8AK").cp().ef());
            stroke.setBounds(0, 0, 151, 253);
            return stroke;
        }(),
        258: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ALQA8YigBahGAejwA8Yh4AUhuAogKAAYgKAUAABGAKAUYAeAUBugUGkiCYEEhaAAAKAUAKYAoAeAUEEAKJYYAKF8gKCqgeA8IgUAoIh4AAYhGAAhagKgeAAYgygKgeAAAAAUYAAAAAoAoA8AyYAyAoBkBaBGBGYCqCqAoAKA8hkYCCi+AUhagKjIYgKgygKhaAAgoYgenCgKjIAAjIIAAjwIAeg8YAohuAAgUgogoYhGg8i0hQhGAAYgUAAgyAUhGAo").cp().ef());
            stroke.setBounds(0, 0, 122, 219);
            return stroke;
        }(),
        259: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUKAUYiMBGlKBajmAeYg8AKhaAUgyAKYgoAKhkAKhGAAYh4AKgKAKgeAKYgUAeAAAyAAAeYAUAeAKAAAoAKYAyAKAygKEEgyYBGgKCqgeCggeYCggUCggeAogKYBagUBGAKAoAoYAUAUAUBQAUCWYAUCgAAMMgUDmYgUDcgKAKhQgKYgoAAgegKgygeYhGgygygKgKAUYAAAUAyBaCCCqYA8BQBGBuAeAyYA8BaAoAoAeAAYBuAAB4jwAUjwYAAgogKi0gKiqYgoo6gKnWAKhGYAKgyAehGAohGYAegogKgegogoYhQhQkiiWg8AAYgUAAgoAKgeAK").cp().ef());
            stroke.setBounds(0, 0, 186, 252);
            return stroke;
        }(),
        260: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AScAAYgKAAg8AegyAUYjwBki0AylyAyYjSAegeAAgUAUYgKAoAAAoAUAUYAoAeBagKGkhkYGGhQBGgUBaAKYBkAAAKAAAUBkYAUB4AKCWAAEOYAAEOgKDSgUAyYgKAeAAAAgUAAYgogKAAAAAAAUYgKAoC0EEAeAKYAoAKAegeAyhGYBaiMAUhGgUiCYAAgogKi0AAigYgKl8AKhGA8h4YAUgyAUgyAAgKYAAgyhkhQi0haYhkgogoAAhQAA").cp().ef());
            stroke.setBounds(0, 0, 169, 176);
            return stroke;
        }(),
        261: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AN6AKYgeAKhaAohQAeYiWBGiqAojIAoYiMAegUAKgKAyYAAAUAAAUAKAUYAKAeAKAAAyAAYA8AAAoAAF8huYEOhGAygKAeAKYAKAKAKAeAUAeYAUAyAKAUAAC+YAKDIgKGGgUDIYAAAygKBkgKBGYAAA8gUBGAAAUYgUAoAAAAgogKYgeAAgegUgUgKYgygUgUAAAAAeYAAAoAeBQAUAyYAoBQB4DSAeAUYAyA8A8gyA8igYBakEAUiWAKqAYAKowAAAoBujcYAKgUAKgUAAgKYAAg8hkhGighGYhugegygJhGAT").cp().ef());
            stroke.setBounds(0, 0, 139, 225);
            return stroke;
        }(),
        262: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AI6AyYiMA8h4AoiWAoYiMAogUAKAAA8YAAAoAUAeAyAAYAUAABGgUA8gKYGkh4AegKAyAyYA8BGAKBaAAJiYAAJ2geJEgeAyYgKAUgUAAgUgKYgKgKgUgKgUAAYgegKgKAAAAAKYgUAoDcF8A8AoYAUAKAKAAAUgUYA8geA8iCAeiMYAUhQAAgegKlAYgKi+gKmQAAksYgKpsAKg8A8iCYAUgoAUgyAAgKYAAgegogog8geYhQgojIg8gyAAYgKAAhGAUg8Ae").cp().ef());
            stroke.setBounds(0, 0, 114, 275);
            return stroke;
        }(),
        263: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AKyAAYgeAKgyAUgeAKYhuAohaAeiqAyYi+AogUAUAAAyYAAAeAeAoAoAAYAUAAA8gKAygUYDchGDwgoA8AUYAoAUAKAoAAH0YAAGkgKAygKAeYgUAegKAKgUAAYgUAAgegKgKAAYgygoAAAeA8B4YBkCqAyBaAUAoYAUAoA8A8AUAAYAAAAAUgKAUgUYAogoAohuAUh4YAKhGAAjIgKiqYAAhGgKigAAiMYgUkOAKg8AehuYAKgeAAgeAAgUYgKgog8g8hagyYhagogyAAhaAA").cp().ef());
            stroke.setBounds(0, 0, 109, 183);
            return stroke;
        }(),
        264: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ASwAUYgyAKhaAUg8AKYi+AopiCChkAeYhaAUgKAUAAAyYAABGAyAKCCgoYAogKBQgUBGgUYDIgyH+hkBQAAYA8AAAeAUAeAyYAUAyAAAUgoDcYgoDcgoCWgeAoYgUAegKAAgyAAIgyAAIAKAoYAUBQCWCgA8AAYBQAAAyh4BumuYAyjSAehGBQhkYAegeAUgoAAgKYAAgog8g8h4hQYiWhZgeAAiWAd").cp().ef());
            stroke.setBounds(0, 0, 171, 128);
            return stroke;
        }(),
        265: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AIwAUYhkAyiqBGiCAoYhGAUhGAegKAKYgKAUAAAeAKAUYAeAeBQgUC0g8YDwhkAyAAAeAyYAUAeAABugUGaYgUFeAAAKgygUYgUgKgKAAgKAKYgKAUA8BuAyAoYBGA8AygUA8iCYAegyAAgKAKi0YAKmQAUiMA8iCYAUgeAKgoAAgUYAAgogogohug8YhugogogJhaAd").cp().ef());
            stroke.setBounds(0, 0, 96, 131);
            return stroke;
        }(),
        266: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ARMAKYgyAUi0AolKBaYmaBuhQAUgeAoYgKAKgKAeAAAKYAAAoAUAoAeAAYAUAAB4geDchGYDcg8FKhQBGAAYAyAAAKAAAUAeYAKAKAUAeAKAeYAKAegKAegoDwYg8EYgyC+gUAoYgeAogoAUgogKYgegUgKAKAUAyYAeBaCMCgA8AAYAeAAAyg8AohaYAehaBGjwA8kOYAojIAUgyBQhkYAegyAegoAAgKYAAgyhGg8iWhkYhkg8hQgJg8AT").cp().ef());
            stroke.setBounds(0, 0, 156, 147);
            return stroke;
        }(),
        267: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AIIAUYhaAei0AoiCAKYg8AKgyAKAAAKYgTAKAJAeAoAoYA8A8BQAADSgoYB4gUAyAUAABGYAAAogoEYgoEEYgUB4geAogogUYhGgeAAAUAyBuYAUA8AUAoAeAeYA8BGAygKBahkYBGhQAUgoAeiqYAoj6AohuBQhuYBaiCAKgUgeg8Ygegyi+igg8geYgoAAg8AAhaAU").cp().ef());
            stroke.setBounds(0, 0, 101, 130);
            return stroke;
        }(),
        268: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ARCAAYgUAKhkAUhuAeYh4AUiMAohGAKYg8AUiMAehuAeYhuAUhkAeAAAKYgTAUAJBQAeAUYAyAoCWgKCMgyYBQgeDwhGCqgoYB4gUAUgKAoAKYAyAUAKAUAABuYAACghGHCgoAoYgeAogeAAiggoYhagUg8gKgKAAYgUAUAoAyBaBaYA8AyBGBQAeAyYBkCCAAAAAeAAYAeAAA8gyA8hkYBGhuAehkAUjIYAKhaAUhuAKg8YAKgyAKhQAKgyYAKhkAUgoAogyYAKgKAKgeAAgKYAAgUgyg8hQgyYhuhQg8gJgyAJ").cp().ef());
            stroke.setBounds(0, 0, 145, 146);
            return stroke;
        }(),
        269: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APKAeYhkAylyBkkiAyYigAegoAKgKAoYAAAoAKBGAeAUYAUAUAKAABQgKYAogKBagUA8gUYEEhQFohQAoAUYAeAKAKAogKCMYgeE2g8CWhuAyYg8AogygKiWhGYhug8gegKgKAKYgUAUAKAeBaBuYBaBkBGBaAoBQYAoBGAeAeAeAAYAoAABuhGA8hGYBkhuA8iWBklUYAyjIAehaAyg8YBahkgKgUjwiCYiMg7geAAhkAn").cp().ef());
            stroke.setBounds(0, 0, 146, 140);
            return stroke;
        }(),
        270: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMMAKYgUAKgUAKgKAKYgoAojcBakYBaYhQAUhGAegUAKYgKAKgKAUAAAUYAAAeAAAKAUAUYAUAUAKAAA8AAYAyAAAoAAA8gUYDwhaDwhQAUAKYAKAAAUAUAKAeYAKAoAKAoAACgYgKGGg8DmhuAyYgyAUgUAAh4goYiWgygKAeCMCgYAyA8A8BQAeAyYBGBaAoAeAygKYAogKB4iCAyhaYBaigAojmAenMYAKigAUhaAohQYAUgoAKgoAAgKYAAgehGgoiWgyYhugegoAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 121, 166);
            return stroke;
        }(),
        271: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADSAKYgUAUgKAeAUAeYAeAyCqA8CgAeYBuAUF8AUBGgKYCMgUA8BQgoCqYgKAogoCMgeCCYigJsiMFKiWCMYh4BugeAAmkiqYhGgUhGgegUAAYgnAAATAoBQBaYCWCWCgC+BGBuYAKAUAUAUAUAKYAyAeBGAABkgyYCCg8CCiWBujIYBai+CCloB4mkYBuloAeg8Buh4YBQhGAKgegegyYgUgygygoiChkYi0iCgeAAiCAUYhkAUigAUiCAAYiCAAhugKjIgeYiggUAAAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 177, 244);
            return stroke;
        }(),
        272: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AFUAAYgUAAAAA8AUAeYAeAoBaBQA8AeYBGAoBkAUCqAoYCgAeAoAUAoAUYBGAyAKAogoDSYhGFUhuFoh4DcYg8B4goAyhQAeYhaAegyAAiqhGYiqhQhagegyAAYhFAAAUAyBtBQYC0CCCqC0A8B4YAeA8AoAeAoAAYAyAAB4hGBGg8YBahQAyhQA8iCYBai+A8igCWo6YAoiMBQiqAygyYAKgKAegeAUgKYAKgUAKgUAAgKYAAhGiqi0hug8Yg8gegKAAhQAAYigAUk2hGjIhaYhugygeAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 162, 234);
            return stroke;
        }(),
        273: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AH+AUYgKAKAAAeAAAeIAAAoIAyAKYBkAKB4AoAeAKYBGAyAKAogeCqYgKAygKBagKA8YgyEsiCGahQBkYgeAohaAogoAAYgKAAhGgUhGgeYi+hag8gKAAAoYAAAKAeAeAoAeYB4BuBkB4AyBaYAyB4AeAKBugyYBug8B4iMA8iWYAoiMA8jcA8kYYAeiWAoiqAUgoYAehkAyhQAegKYAegKAUgogKgeYgKgoiWiWg8geYgogegUAAhkAAYhQAAgygKgygKYhkgUgeAAgUAU").cp().ef());
            stroke.setBounds(0, 0, 123, 195);
            return stroke;
        }(),
        274: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AD6AKYgoAyAABaAoAUYAUAKB4AUCCAKYCCAKB4AUAUAKYA8AKAyAoAKAoYAyCMjcI6iWCWYgUAKgeAUgUAKYhGAegygKi0g8Yi0g8geAAgKAeYAAAUAKAeAyAeYBaBGCWC+AoBkYAeBkAoAeA8gKYBGgKB4g8BQhQYCCiCBQiMCCmGYBakYA8huBQhQYAygyAAgKAAgeYgKg8iMiWhkg8IgygeIjSAAYi0AAgoAAiggeYhkgUhagKAAAAYgKAAgKAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 137, 174);
            return stroke;
        }(),
        275: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAtUAAKYgUAKgyAegeAeYiWCCkOCWm4DcYnMDmuEFynCCMYhkAegUAKgKAUYAAAUAAAKAUAUYAKAKAyAeAyAKYBQAeAUAKBQAAIBkAAIBkg8YCChQMgmaE2iMYBugyD6h4C0hQYImkOAAAAAoAyYAoAygeBuiMHMYgeBagoB4gUA8YgeB4goAog8AAYgUAAhGgKhGgeYh4gog8AAAAAUYgKAUBaBkCqC0YCgCqAUAKA8gKYAygKB4iWBGiMYAyhaAUhQBkmGYB4nMAUgyCWigYAygyAKgegUgyYgUgoh4gyiggyYh4gUgyAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 344, 183);
            return stroke;
        }(),
        276: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAg+AAKYgUAAgeAegKAKYh4Buh4BQjcCCYj6CWhGAekYCMYmkDIhkAojwBkYjmBagTAUAdAeYAUAUBuAoBQAKYBGAUBGgUA8goYA8gyFojIEiigYCMhQC+hkBQgoYDciCDwh4AegKYBGgUAoAoAABkYAAAygyD6haGuYgyDcgKAKi+goYhGgUg8gUgKAAYgyAAAKAeA8BGYBuBkDmDIAUAKYA8AKAygyBQiMYAyhaAoiCAUigYAykYAyksAKg8YAKhGAyhuBGhQYAegyAegoAAgKYAAhGhagojIgoYiCgKgUAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 259, 173);
            return stroke;
        }(),
        277: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APUBQYksCWjwBajmAoYgyAUg8AAgUAAYgyAAgeAeAAAeYAAAyCMBQBuAKYAyAKAUgKC0hQYBkgoCMg8BGgoYCqhGAygKAUAyYAUAegeKygUC0YgeDmgyD6g8CqYgUBQAAAyA8BuYAyBuBGBGAeAAYAeAAAygoAehGYAohQCWi0E2k2YBuh4AogoAAgUYAAgegegKgeAUYgoAelUDcg8AoYg8AogoAAgUgeYgKgeAKkiAekEYAUjmAymQAKgoYAUgyAeg8Ayg8YAegeAegoAAgKYAAgegygyhGgyYhGgyhkgogeAAYgKAAhQAehaAy").cp().ef());
            stroke.setBounds(0, 0, 183, 231);
            return stroke;
        }(),
        278: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHqAyYg8Aeh4A8haAoYi+BGgeAeAAAyYAABQA8AACghaYCghaA8gUAoAUYAUAKAKAKAKAUYAAAUAABuAAB4YAKDmgUDSgeB4YgKAogKAyAAAUYAAAoAoBGAyBGYBGBaAygKAohkYAehQCWjcCWi+YBuiWAUgogegKYgKAAiWCCiWCCYhGBGgeAKgUgoYgUgoAAhaAUj6YAKjmAKgoBGhQYAyg8AAgUg8gyYgygyhkgygoAAYgKAAgyAUgyAe").cp().ef());
            stroke.setBounds(0, 0, 116, 144);
            return stroke;
        }(),
        279: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQaAKYgUAKgyAUgyAUYiqBGjSBGiCAUYloBGgeAAgUAeYgKAKAAAUAAAUYAKBQAyAeBugUYBGAAFKhaDchGYBGgUA8gKAKAAYAUAAAKAKAKAUYAKAUAAAygUDwYgUCWgKC0AAAyYAADwBQCWCWBGYDwBuHWAAD6huYA8gUAKgUgUgoYAAgegegeg8g8YhuhkAAAAj6BGYg8AUgyAKhkAAYjIAKg8gUgyhuYgeg8AAgKAAhkYAAg8AKhkAKhGYAeiWAohkBuh4YBQhkAKgUgogyYgyg8jciCgoAAYgKAAgeAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 219, 154);
            return stroke;
        }(),
        280: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAoAKYgxAUAAAoA7BkYA8BaAeA8AeBaYAUBQAAAKAAK8YAAH+gKFAgKEOYgeLaAeEiCMD6YCgEYDwBkIcAUYCWAKFUgUCWgKYC+gUC0gyC0hGYCCgyA8goAAgoYAAgKgKgygUgyYgeh4gyjcgUi+Ygej6AAgegUgUYgog8gUAegyDIYg8DShGDcgeA8YgoAyhuBag8AeYhkA8jcAokiAKYjwAUjIgUiqgyYg8gUgUgKgygyYhkhkgohugojwYgUiMAAgUAAqUYAAtwAUnqA8leYAKgyAKhGAKgoYAKgyAAgUgKgeYgKg8hGg8hkg8YjSh4gegJhGAT").cp().ef());
            stroke.setBounds(0, 0, 264, 398);
            return stroke;
        }(),
        281: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAoAKYg7AeAKAoBFB4YAyBQAyBaAUBaYAoCqgKJEg8R+YgUFAAUEOA8CgYBaEECqCME2AyYDmAoG4AKDwgeYC+gUEYhaAygyYAygyAAgegyiCYg8iWgyjcgojwYgojSgUgygeAAYgeAAgKAUgoCqYgoCqhQEOgeAyYgyBahuBahuAeYjcAymGgKjIhGYhagehGhagoiCYgeiCgKi+AAmGYAUq8A8sCBGkYYAeiCAAgKgegoYgohQiMhui0haYhQgegeAAg8AK").cp().ef());
            stroke.setBounds(0, 0, 226, 361);
            return stroke;
        }(),
        282: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgTAoAJAeBGB4YBkCWAoBkAKCqYAKBkAATigKCCYgKCMAUEEAeB4YBGEECMCgEEBuYBaAeBQAUCqAUYCgAUJOAKDmgUYEsgeEEg8DShQYA8geBGgUAUgKYAygUAogyAAgoYAAgKgKg8gUg8Yg8i+g8j6gokYYgUiqgUhGgoAAYgegKgKAUgoC0YgyD6hGEigeA8YgeAyhuBkhGAoYiWBalKA8maAKYlUAKjwgeiChGYhGgohahkgohQYg8iCgKhGAAn+YAAj6AKkYAAhkYAUkYAom4AUhGYAeiCAAgogUgoYgog8g8gyh4g8YjSh4hagTgyAd").cp().ef());
            stroke.setBounds(0, 0, 307, 325);
            return stroke;
        }(),
        283: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAKYgUAUAAAUAUB4YAeCMAKA8gUDmYgKB4gKB4AAAeYgKCqgKHCAKCCYAUCgAeCWAoBQYAUAeAoA8AyAoYBGBGAUAUBkAyYC+BaDcA8D6AoYEYAoHMAAEYgeYDmgUEsg8Cqg8YEOhaFeiqAyhGYAegyAAgegehkYgohkgeiqgojwYgejSgKgegeAKYgKAAgeBQgoBuYhGDmhQDcgyBGYgoBGg8AoiCBGYi+Baj6BGksAyYjSAen+AAi0geYk2gojShQigh4YhuhQgyhQgyiqYgUhQAAgeAAjwYAAiqAKiCAKhaYAejwAKhuAeiWYAUhaAAhGAAgUYgUhQg8hGhugoYg8gKgeAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 348, 251);
            return stroke;
        }(),
        284: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAKYgnAeAAAeBPCgYA8BuAKA8AKGQYAKDSAAEYAKCMYAAEEAKBaAeBuYA8DwCqCgFABuYFoB4FoAyJsAAYF8AADwgUD6goYC0geD6hGA8geYAogUAogyAAgeYAAgegUhQgohQYgohkg8jSgojcYgUhkgUhugKgUYgKgygegygeAAYgUAAgKAegeC+YgoDIgyD6geA8YgUBGgoAygoAoYgeAegUAKg8AKYhaAekEAejIAKYiqAUnMAAi+gUYkOgUkYgyigg8YiCgyhuhagoh4Ygoh4gKhaAAmGYgKngAUjIBGjSYAohuAAgog8gyYgogoi0hahQgUYhQgKgeAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 355, 258);
            return stroke;
        }(),
        285: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAUAAAKAUB4YAeCgAKA8gUD6YgKCMgKDIAAC0YAAEOAAAoAUBaYAeB4AeA8BGBGYCMCWEYBuFeAoYC+AUFeAACMgKYFKgyDwhGDwiMYCghaAUgog8igYgoh4hQlKgUiqYAAgUgUgegKgKYgKgUgKAAgKAeYgKAKgUA8gUBGYgoCWhQEEgoBQYgoBahQBGiMAyYo6DIsqhui+kiYg8hugeigAKi+YAKj6BGnqAehkYAUg8gKgUhGg8Yh4hQhugdgoAd").cp().ef());
            stroke.setBounds(0, 0, 259, 213);
            return stroke;
        }(),
        286: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAUYgUAeAAAUAUBGYA8CgAAAUgKJ2YgKGuAKBQAyBuYBkDcCqBaGaAyYCMAKJEAACqgKYHMgyC0huhGi+Yg8iMhGksgykYYgUiWgUgygeAAYgogKgKAygKDIYgUEEgUCggoB4YgoBkiCBGjSAoYmGA8n0gUiChQYgygeg8g8gUgeYgehGgKhuAAi+YAAkOAokEBGigYAehQAAhagegyYgog8jwiWg8AAYgUAAgUAKgKAK").cp().ef());
            stroke.setBounds(0, 0, 228, 195);
            return stroke;
        }(),
        287: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AaaAKYAAAKgeBkgUBuYhkGagyCMhGAoYgyAehuAoh4AeYhaAUgyAAi0AAYi+AAgeAAhQgUYhkgehagogegeYhGhQAAi+A8kEYAUg8AAgegKgUYgKgegygyhGgoYgygegUgKgoAKYg8AAgJAKATCMYAUBkAAAoAACCYgKFyAKA8BQBkYAeAyAUAUBGAeYC+BkC+AoFUAAYC+AAA8gKBkgKYCWgeCWgyCChGYDIhuAUgUg8iqYgyh4geiggej6YgUhkgKhagKgKYgKgUgUAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 193, 123);
            return stroke;
        }(),
        288: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAUAAAAAeCWYAUBaAKAeAAEEYAKC+AKBkAKAoYAeBuA8BGB4A8YCWBQCgAeDcgKYDwgKCMgoCWh4YBuhQAAgeg8iMYgohahGi0AAgeYAAgKAAgUgKgKYgUgegUAKgUAyYgKAyhkC+goBQYhGBkhkAojmAAYiCAAgegKgygKYi+hGgehGAAkEYAAhQAKhkAKg8YAei0gKgeiCg8YhQgegygJgUAT").cp().ef());
            stroke.setBounds(0, 0, 146, 124);
            return stroke;
        }(),
        289: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAUAAAUAKBaYAeBuAKB4gKBuYgoHqAAH0AUCgYAeCWAoA8B4A8YCgBQB4AUEYAAYEiAAB4geDIhaYBug8AogeAKgyYAKgogKgKgyiMYgehahalKAAgeYAAgogUgogUAAYgKAAgKAegeBQYg8CMhaDSgoBGYgyBQgoAehaAUYhkAehGAKh4AAYjIAAh4gogohQYgKgUgUg8gKgoYgyjIAonMBangYAKg8AKg8AAgeYAAgoAAAAgogyYhkhQiCgngoAd").cp().ef());
            stroke.setBounds(0, 0, 155, 201);
            return stroke;
        }(),
        290: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAoAKYgeAKAKAoAoAyYAyBGAKAoAAEYYAAC0gKBugUCgYgUDmgKBGgoBQYgUAyAAAUAAAeYAAAyAoBQAoAeYAeAeAUAABkg8YBGgyCCgoBQAAYBaAAAAAogyGGYg8GagUCCgyA8YgyBQAKB4BGCMYAoBGAKAUAUAAYAeAABGhaAehaYAUg8AojmAUigYAej6AoksAUhQYAUg8AUgyAUgoYAyhQAAgUgygyYg8gyh4g8g8AAYgogKgUAKhkAoYh4AyhGAKgUgUYAAgKAAgeAAgeYAUiqBan0AoigYAKgeAUg8AKgoYAohaAAgUgyg8YhkhajwhPhGAn").cp().ef());
            stroke.setBounds(0, 0, 93, 293);
            return stroke;
        }(),
        291: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAyAAYgUAUAAAUAoBQYAoBGAAAKAAB4YAKCWgeHqgUBQYgKAogUAygKAoYgUAogKAeAAAKYAAAeAyBQAeAUYA8AoAUAABGgoYBkhGB4gyDcg8YAygKA8gUAKAAYAeAAAoAUAKAUYAUAUgUBQgyCMYgyCgAAAeAoAeYAeAUBaAAAogUYAogKAKgeAoh4YAoh4AohGBahQYAygyAegeAAgKYAAgehQhGhug8YhuhGgyAAiCAyYigBGk2BugeAAYgoAAgUgUAAgeYAAhaB4piAohuYAKgeAKgyAAgUYAAgogKgKgegoYhGg8jmg7g8AT").cp().ef());
            stroke.setBounds(0, 0, 131, 170);
            return stroke;
        }(),
        292: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAKYgUAKgKAUAAAKYAAAAAKAeAeAeYBGBaAyCCAKCqYAUBkgKBQgUA8YgeAyAeBaA8AeYAoAeAUAABQgyYBQg8DShaBGgKYBGAAAeAUAKAoYAAAUAKBuAACCYAKCCAKBuAAAKYAKAeAoAKBQgUYAyAAAegKAKgUYAUgUAKgKAAiMYAAjwAUhkAygyYAegUgKgegogoYgogogygehkgeYhkgogKAAhGAoYhGAojwBQgeAAYgUAAgUAAAAgKYgUgUgekiAKh4IAAhQIgogoYhQhaiggdg8Ad").cp().ef());
            stroke.setBounds(0, 0, 120, 134);
            return stroke;
        }(),
        293: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGQAUYgUAUAAAeAoBGYBaCgAAD6haKUYgeEEgyDmg8D6YgUBageB4gKAyYgeBugyBkg8BQYhQBkgJA8ATBuYAoBuAeAKCWhQYC0hkC+gyFygoYB4gKAyAAAAAUYAAAAgoBkgyBuYksKyhQDIAKAUYAeAUD6ksEil8YCWi+BahkBGgoYBQgoAogoAAgeYAAg8hGhGighkYhGgygUAAhGAAYg8gKgUAKgyAUYjSBGksBGiWAKIhkAKIgKgeYAAgUAAgeAAgoYAeiWFK5UAUhaYAehuAehGAohGYAyg8gKgegygyYhGg8kEh4hQAAYgKAAgeAAgKAU").cp().ef());
            stroke.setBounds(0, 0, 169, 376);
            return stroke;
        }(),
        294: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMgAUYi0CChuA8jIBQYiCAyhaAegyAAYg7AAATAyA8AUYBQAeA8AABagUYBagUCqgyB4gyYA8gUAUAAAUAKYAeAKAyAyAKAoYAUA8geBag8BQYgoAygoBaAABGYgKBkAUBQBQCMYBkCqAoBaAUBaYAUBagKBkgeBQYgUA8AKAKAygUYB4gyA8hQAKhuYAeh4goh4h4i+YhGhugKgogKhQYgKhQAUhGBGiWYBGiWA8huA8hGYBahkgUgoi+haYjchjgUAAg8Ad").cp().ef());
            stroke.setBounds(0, 0, 128, 187);
            return stroke;
        }(),
        295: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AeoAUYh4AyhaAeruCgYtIC+hQAUgoAKYgxAeAABkAnAeYAUAKAUAAAUAAYAeAADIgoAogUYB4goKeiWFeg8YE2gyA8AAAoAKYA8AUAKAegUCCYgyHCgKC+AAFAYAAN6CMHqGGG4YDIDwD6CqDwBQYBkAoAUAAAogUYAygeAKgegUiCYgKi+AAg8gUmaYgKmGAAgogoAAYgUAAgKAUhGDwYg8DmgyB4goA8YgeAeAAAKgogKYhugKiqiChkiMYi+kOiCl8gonMYgKhuAAl8AKiWYAUjSAokOAehGYAehaAyhQA8g8YAygyAAgegegoYg8haigiCg8geYgygKgyAAhaAU").cp().ef());
            stroke.setBounds(0, 0, 334, 379);
            return stroke;
        }(),
        296: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ATOAAYgKAAgoAegeAUYgeAehGAegyAeYiMA8l8Buk2BGYizAogKAKAnAoYAoAoA8AUBaAAYBaAAAogKHqiMIFKhaIAoAUYA8AeAKAogKDwYgoLQA8KyCCG4YBaFADIEYDwCWYCgBuCWAyBagoYAygUAKgegKh4YgUiqAAgUgKlKYAAi0gKigAAgKYgKgogeAKgKAeYgKAUgeBGgUBQYhGC0hGCCgeAoYg8Ayg8gUhahaYi0jIiClegym4YgekYAUqUAoigYAehQAyhaBQhkYAog8AegyAAgKYAAgyhuhQi0haYiCg8hGgJgoAJ").cp().ef());
            stroke.setBounds(0, 0, 240, 336);
            return stroke;
        }(),
        297: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ASIAKYgUAAgyAeg8AoYkECqjSBGm4A8YhuAUgKAUAAAyYAAAyAeAeAyAUYA8AKBugUGuiCYE2hQBQgeAUAKYAoAUAAAAg8MqYgUCqgUEigUC0YgoH+gKDIAKDIYAUC0AUBkA8B4YBaDIDSCMEsBQYEEBGF8gKE2haYDIgyDmhkAogoYAUgUAAgygUgyYgoiCgejwgUjSYgUi0gUhQgoAAYgUAAAAAKhGDSYhGD6huDIhkBkYhQBQigAokiAKYjcAKhQgKiMgoYi+g8hkhkgyjSYg8jSBGvAB4pYYAoi+AyjSAeg8YAehQAyg8BGhGYAegeAogoAAgKYAohGg8hGi0haYi+hahagJhGAT").cp().ef());
            stroke.setBounds(0, 0, 311, 358);
            return stroke;
        }(),
        298: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMCAKYgUAAgyAegyAoYhuBGhaAyjwBkYhkAyhaAogKAKYgKAUAAAoAKAUYAAAKAUAAAKAAYAoAACggoDmhQYBugoBugeAKAAYAyAAAABkhGI6YgoGGgKC0AKDcYAKBkAKBuAKAoYAeCWBaDSBaCCYBaCWDwCgDSA8YD6BGDwgUEihuYBQgeAegeAKgyYAKgUgKgUgyi+YgoiMgUh4gUjcYgKi+gUgygeAAYgUAAgKAegoCWYgoC+g8DmgeA8YgeA8geAogoAUYiCBGk2gUiWhQYhuhGiCiWg8iCYhGi0geiqAAk2YAAkOAUiqAyjmYAyjmBai0B4h4YBGhQAKgUAAgeYAAgygygUjIg8Yh4geg8AAgyAK").cp().ef());
            stroke.setBounds(0, 0, 233, 292);
            return stroke;
        }(),
        299: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAg+AAAYgKAKg8AUgyAeYi+BajSBQkEBGYkOBGn0BQlKAeYjvAUgeAUBPBQYBGBGBkAoBaAKYA8AAAUAACMgyYC+g8C0gyE2hQYGQhkFUhQAoAAYAyAKAKAegeCMYhGGagKIIA8FeYAoDwBGDmBGCWYC0FUF8EsGQBaYBaAUDmAABkgUYBQgUBQgoAKgeYAUgegKgygyh4YgyiMgyiWgyi+YgoiCgUgogUAUYAAAAgUBGgUBQYgoC+goCggKAyYgoBGg8AKiggyYlyh4kYkOh4leYhulUgemkBQmQYA8k2AehQDciqYAKgUAUgeAKgKYAAgeAAgKgogeYgUgehQgohQgoYiChGg8gJg8AJ").cp().ef());
            stroke.setBounds(0, 0, 374, 314);
            return stroke;
        }(),
        300: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAkkAAKYgKAAgoAegoAUYjSCMlUBupiCWYhGAKiMAohkAeYjIAyiWAUjwAKYhaAKhQAAgKAKYgKAKAAAoAKAoYAeAyCCBQBGAUYA8AKBQgKBageYGGiMLGjcEEhGYDcgyCMgUAUAeYAUAUAAAUgyDIYiCImhGHqAKEYYAUI6C0EEG4BuYCqAyBkAKDSAAYDcAABagKDIgyYDIgyDchkAog8YAUgoAAgKgoiMYgoiggejcgUjmYgUiWgKgygKgKYgegogUAohGEsYhQFAgeBGhaBaYhQBahQAejwAeYjmAei+gKi0g8Yiqg8hahGgyh4Yg8hugKhGAAjSYAAiqAAgyAeiMYAejSA8jcBQjmYBakYA8hkCCiWYBGhGAKgUAAgeYAAgeAAgKgogeYg8gokOiCgeAAYgUAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 410, 295);
            return stroke;
        }(),
        301: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AfQA8YjSBukiBQnMBuYmaBajSAekEAUYhGAAhGAKgKAAYgKAKAAAoAUAoYAKAUAeAeAyAUYA8AeAUAABGAKYBaAAAKAALajIYMWjSB4geAoAUYAeAKAAAKAAAoYAAAegKA8AAAoYgyEEgUGaAUC0YAeEiA8C+CWDcYCMDwCqCCEEBaYE2BuHCAUCChaYAogUAKgogUhGYgojSgokOgUkiYAAhagKhagKgUYgKgogegUgUAUYgUAKAAAKg8DmYhGEihQDSg8A8YgyAyhQAKiMgeYiqgojIh4hkh4Yhahkhkj6goi+YgojSgKj6AojSYAeigBQi0BkhuYAUgeAegeAAgKYAKgyg8gyi0hQYiggxAAAAigBF").cp().ef());
            stroke.setBounds(0, 0, 376, 260);
            return stroke;
        }(),
        302: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AYEAKYiMBaiCAyjmBQYlKBkk2BQjmAeYhGAKhGAKgKAAYgUAUAAAeAKAoYAoAyB4AyBkAAYA8AAA8gUMqkYYDchGAygKAeAeYAUAeAAAAgoD6YhQHWgKFABQEYYAeBuBkDcBGBkYA8BaCMCCBaA8YDSB4EsBQEYAAYDSAABQgoAAhQYAAgUgKhGgUg8YgeiMgei+gUjSYgKhQgKhGgKgUYgKgegeAAgKAUYgKAAgeBagoBkYhaEYhGCChGAeYhkAojwhGiqiCYiMhkg8hkhGi+Yg8i0gUhuAAi+YgUmQBakODIjcYAUgUAUgoAAgKYAAgyh4hQiqg8YhQgUgeAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 305, 257);
            return stroke;
        }(),
        303: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AbWAKYgyAKn0B4i0AoYmGBQkYAyi0AUYh4AKgKAKgUAUYgKAKgKAUAAAKYAAAUAyAoBGAeYBQAoBuAKBkgoYDwhaBkgeDSgyYD6g8EigyBQAAYAeAAAoAKAUAKYBGAeAAAog8DIYgyCggUBQAACWYAABuAKAeAUBGYAyCWBQBkCqBQYCWBGCqAeE2AAYDSAACMgUB4goYB4goAygUAAgyYAAgKgUg8gUgyYg8h4gyi+geigYgeiWAAgKgegeYgUgegUAAgKAKYAAAKgUBQgKBaYgoEOgeBQhGBQYhGBGiWAej6gKYi+gKgygKhQgoYgogUgKgUgegyYhGiWAUi+Buj6YAyhaAyhGBag8YAogeAKgogKgeYgUgejmiqgogUYgeAAgyAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 321, 156);
            return stroke;
        }(),
        304: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ALaAoYhuA8i+BGjcAyYi0AygeAUAAAyYAAAoAUAKCMgKYBuAAAUgKCMgoYEshkAogKAeAoYAUAeAAAUgeDSYgeDmgUEEAUB4YAUEiCqEEDSBaYCCAyEEAoDSgKYEYgKDSg8DShkYB4hGAUgygyhuYhGiWg8i+gUigYgUhagKgegeAAYgUAAgUAygoCCYhGDwgoBkg8A8YhQBGhQAei+AKYiMAUjSAAhGgUYjIgoh4i0gKkiYgKiCAKhaAoiqYAeiCAyhkBQhQYBGhQAAgUg8g8Ygygyh4hGhQgUYhQgTgeAJhuAo").cp().ef());
            stroke.setBounds(0, 0, 258, 186);
            return stroke;
        }(),
        305: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AM+AUYhkA8igA8k2BQYi0AygoAUgUAUYgUAeAAAKAAAeYAKAUAUAAAyAAYBkAADcgoCCgyYCWgyA8gKAeAeYAUAUAKAKgKAoYgKBQgKGQAKC+YAeFoA8EEB4CqYAyBQBuBuBaBGYBQA8CqBaBQAUYBGAUB4AAAogUYBGgUAAgegeiMYgUhGgUhQAAgUYgKhGgej6AAg8YAAhGgKg8gUAAYgUAKgeBQgoCgYgyDIgeAyg8AAYhaAKiMhahah4YhQhkgyhkgei+YgUhkAKksAUigYAej6AohuBahaYBQhQgUgyjIhaYiCgygogJgyAd").cp().ef());
            stroke.setBounds(0, 0, 187, 226);
            return stroke;
        }(),
        306: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ASwAAYgKAKgoAUgUAUYhGAojcBuh4AyYh4AynWB4g8AAYgKAAgeAKgKAUYgUAUAAAAAAAUYAUAoAoAUA8AKYBaAKFAhaEih4YC+haAygKAoAUYAeAeAAAegUCCYhQFygKAyAKCWYAACqAUA8AyB4YBQCgCCBuEOCgYEYCgCWAyB4gKYBGgKAygUAUgoYAUgogKhugoiWYgUiCgojcgeiqYgKhkgegygegKYgeAAAAAKgeC0YgyEOgeCMgoAeYgoAegoAAhkgeYkYhQjcj6AAjwYAAg8AeiMAohuYAoiMAyhQB4iCYBQhaAKAAgKgoYgKg8hGhGiWhQYgygehGAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 229, 203);
            return stroke;
        }(),
        307: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AYOAeYiMA8lKBuhQAUYi+AojwAUlUAUYhuAKhQAKgKAAYgKAKgKAUAAAKYAAAeBuBuA8AeYBGAeCCAABkgeYAygKCWgeCMgoYCMgeC0goBageYCqgoAegKAeAeYAUAeAAAAi0DcYocJshkBui+EsYjcFKhuDShGDcYhZEsAAEYBZDIYAeA8B4B4BkAyYCWBaDcBQC+AeYCWAeAKAAEYAKYC+AKBaAAC0gKYB4AAB4gKAUAAYEsgoB4gUC0gyYB4goCqg8CMg8YC0hQAUg8g8jmYgyiggojSgei+YgUiWgKgogegeYgUgUgeA8gUCCYgoDmhGEOgoBGYgeA8g8BGgyAeYhkA8k2BajSAeYkEAolAAAmugeYlAgeiCgeiMhQYiChQg8hQgeh4YgojIAoi0CCkOYDmnCEslyJso6YEOkEBag8C0hkYB4hGAUg8hGhGYhQhQj6huhagKYgoAAgeAAhQAe").cp().ef());
            stroke.setBounds(0, 0, 325, 364);
            return stroke;
        }(),
        308: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AR0AUYloCCl8BkkEAUYgoAAgyAKgKAKYg7AKAKBGA7AKYBGAUCMAKAyAAYBugKE2g8B4gUYC0goAUAAAABGYAAAygKAUigDSYl8H0h4C+iCD6YiWE2hQEYAeCqYAUBuAoBGBaBaYBaBQCCBGCqA8YD6BQDcAeFUAAYE2AAC0geEihQYDmhGCCg8AygoYA8g8AAgUgoiMYg8jIgei0gokOYgKhugUgogeAAYgoAAgUA8goDmYgUB4geB4gKAoYhGDIiWBkkiAyYkiA8nMAAkOg8YlehGiWj6BuloYAyi+C+lUC+jwYBkiMD6kOBQhQYBkhaBuhQBkgyYCChGAKgohQhQYg8gyiWhugygUYgygKgyAAhGAU").cp().ef());
            stroke.setBounds(0, 0, 265, 293);
            return stroke;
        }(),
        309: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANcAKYgUAAhGAegyAeYjSBujmBaiqAyYhGAKgoAeAAAUYAAAKAAAKAKAKYAUAUAUAKBGAAYBuAUB4gUBGgoYBkgyBugeA8AAIA8AAIAAAoYAAAegKAegeAyYlUHWiCDwhQDwYiWGuB4DmHCCWYHWCWIwAAIIiqYBQgeCCgoBGgeYDShaAKAAgojSYgoiggUiggUjmYgKhkgKhGgKgUYgKgegoAKgUAeYgKAKgoBugeCCYgoB4gyCCgKAoYiCD6leB4psAAYjIAAiCgKhkgUYiCgohuhQg8huYgUgoAAgUAAhQYAAhuAKhGBGiMYBQiWBuiqCMiqYC0jcCChuB4g8YC0hkgUhQkiigYhkgyg8gJhGAT").cp().ef());
            stroke.setBounds(0, 0, 262, 235);
            return stroke;
        }(),
        310: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAUYgdAeAJAoAeA8YBQBuAKBaAAFyYAAHWgoH+g8CWYgUBQAUA8BuBQIAyAoIA8gUYAogKBGgUAygKYDmhQJihuGGgeYAoAAAogKAUAAYBugKE2gUBGAKYBaAABQAeAeAyYAoA8gKBkhQHMYhGGQhaEOhkA8YgyAogygKjIgyYjmhGAAAAgUAUYgKAKAUAUBuBuYCgC0B4CCAoBaYAyBkAeAUBagyYBkgyB4h4BGh4YAyhQAehaAojSYB4pOBkmaAyhuYAUgUAUgeAUgUYAUgUAKgUAAgUYAAgyhkhaiqhkYhug8gUgKiWAeYhkAUhQAKj6AKYhQAAiCAKhaAUYhkAKhkAKgeAAYjcAelKAoiWAeYhaAKh4AUgoAAYhGAKgKAAgegeYgogoAAgoAKl8YAAm4AomQA8iCYAehkAAAAgygyYhuhuiqhahGAAYgUAAgUAKgKAK").cp().ef());
            stroke.setBounds(0, 0, 295, 380);
            return stroke;
        }(),
        311: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AEiAKYgUAeAAAUAUA8YAeA8AABGgKCMYgKC+goEsgeCWYgeCWgKAUhuCCYhtCMAAAeCpCMYBGAyAUAABugyYCChGCWgoEsg8YEigyE2goC+gKYCqgKAUAKAyBQYAoBGAABQgeDSYgyEOhkHqgoBaYgyBug8AyhGgKYg8gKjIg8hagoYhugogUAAgKAoYAAAeAKAKA8BGYAoAoA8BQAoAyYA8BQAeAoBaCgYAeAyAoAeAyAAYAyAADSiWBQhaYAog8AUgoAohuYAyiMAKhGBkn0YAokEAyjwAUgeYAUhGAUgeBGhQYAog8AAgegogoYg8g8jciChQgUYhGgUhkAAhkAUYgyAUhQAKg8AKYg8AKiMAUhkAKYjSAej6AojIAyYiWAehGAAgUgUYAAgKgKgUAKgoYAKgeAUhuAKhkYAUhkAeiqAehuYAoi0AKg8A8iWYAUg8gKgohGgyYg8g8hugyg8AAYgeAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 247, 335);
            return stroke;
        }(),
        312: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAAYgUAUAAAeAUBGYA8CCAAAyAAIIYAAHqgKCMgeCqYgUBuAAAyAeAoYA8BGBQAUBQgyYBQgoBugeC0goYDwgyCCgKEYgUYD6gUBaAUA8A8YAUAeAAAKAAA8YAAAogUA8gKAoYgKAegUCCgKBuYgoDwgeCqgUBGYgUBGg8BugUAKYgoAehQgKjSg8YjmhGgeAAAAAoYAAAUAeAeBGBGYCqC0BaB4BaCWYAyBaAyAAB4hQYCMhQBGhaAyiCYAohkA8lAA8mQYAejwAyiMBaiMYAeg8gKgohGhGYhGhGiMhahGgeYhGgeg8AKhaAeYh4AyhuAUjwAeYiCAKjIAUhuAUYkOAogeAAgegoIgUgUIgKmaYAAmkAKj6Aeh4YAUiMAKgKgKgoYgehajmhthQAd").cp().ef());
            stroke.setBounds(0, 0, 215, 349);
            return stroke;
        }(),
        313: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAyAAYgeAKgUAUAAAUYAAAKAKAeAKAUYAKAUAUA8AKAoYAKBQAAAyAAFKYgKGQgKBagoC+YgKCCAAAeAeA8YBGBGA8AKB4g8YBug8A8gUCqgoYFUhaFAgoDwAAYBkAABQAUAUAeYAeAegKBugUBGYgKAogKBGgKA8YgKCggyFUgeCqYgUCqgoBugyBuYhQCMgeAKkOhaYhkgehkgegUAAYgegKgUAKAAAeYAKAKBQBaBaBaYCWCWBkB4AeA8YAyBkAeAKBagyYB4g8BQhGAyhGYAohQAeg8AehGYAehaBapOAymuYAejcAehkBki0YAeg8AAgUhQhQYg8g8hkhGhagyYhGgohQAKiCAyYiqBGgyAKnqBGYhGAKiMAehaAUYhkAKhaAUgUgKYgygKAAgUAAjmYAUoIAKhaAehkYAoi+AAgUhahGYhahGiCgngoAJ").cp().ef());
            stroke.setBounds(0, 0, 218, 350);
            return stroke;
        }(),
        314: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABGAKYgeAKAAAUAeBQYAUA8AKAUgKCWYAACqgUG4gUB4YAAAogUBQgUAyYgTCMAJA8BGAyYAyAeAygKBGgoYB4hGF8h4CMAAYCCAAAoAogKCMYgKDIhQIwgeB4YgUBQhGCqgeAUYgoAegoAAiqg8YjIg8gKAAgUAKYgeAKAUAeCCCCYB4CCBQBaAoBQYAyBQAeAABuhGYB4hQBQhkAoiWYAehkA8lAAym4YAejwAeh4A8hkYAUgeAKgeAAgUYAAgehuhkhkg8Yhkg8g8gKhQAoYhkAonqCMgeAAYgKAAgUgKgKgKYgegUAAAAAAhQYAAhkAonWAKhkYAKgoAUhGAKg8YAUgyAKgyAAgKYgKgohkhQhGgoYhGgUgUAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 141, 308);
            return stroke;
        }(),
        315: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHMAKYgUAKAAAUAoBkYAoBaAAAAgKBaYgKCMhuFKhQCCYgKAehGBQhGBGYh4B4goA8AAAyYAAAoAoBQAyAoYAyAyAeAABGgyYB4hQDIhQDcg8YFehaCWAAA8BaYAeAoAeBQAAA8YgKCMgyE2g8DIYhkE2igFKhkBGYgoAehGAUgygKYgygKj6hGgegUYgKgKgUAAgUAAYgoAAAKAoA8BGYBQBkBQBkBQCCYBaCMAeAUBQgKYBkgKAygeBkhuYCqi+B4jcBQjwYBQjSBamkAolAYAUiMAUhQAyg8YAohQgKgehahGYgegUhQgygygeYiWhGgyAAigAyYiMAyiWAejcAoYiWAUgeAAgKgeYgKgyEYpOBkiMYA8hageg8hug8Yh4g8iWg8gUAAYAAAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 180, 334);
            return stroke;
        }(),
        316: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADcAKYgUAeAAAUAeAyYAeA8AACMgeB4YgoCggyBuhaBaYg7BQAAAyA7BGYAyA8AoAAA8goYCqiCAygeCqgoYCMgeBQgKBkAAYCqAAAeAeAAC0YAACqgeFKgyDwYgyD6haFAhGBkYgyBagUAAjwhGYiqgyAAAAAAAeYgKAoAeAyBuBuYA8AyA8BQAeAyYA8BaAUAUAyAAYAeAKAUgKAogUYBQg8DmkEAyhuYAohGAUhkAUiWYAUjIAomQAUjwYAekEAKgoAohaYAUgoAKgoAAgUYAAgohQhQhkgyYhkgog8gKg8AUYgyAUowCMgeAAYgKAAgKgKgKgKYgUgUAAgKBGjIYBQkOAAgehQhGYgygyhuhGgeAAYgKAAgUAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 148, 289);
            return stroke;
        }(),
        317: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADSAKYgoAUAAAeAeA8YA8B4AUCCgoC0YgoC0g8CMhQBaYg8BGgJAyAJAoYAUAoBGBGAeAKYAeAAAygUA8gyYBQhGA8geCMgyYC+g8CggUBGAoYA8AoAACggoEiYgyFehuFAhuB4YgeAogKAAgyAAYgeAAhQgUiCgyYjIhGgygKAAAeYAAAoAoAyBkBuYBuBuBaBuBGBaYA8BaA8AKBkg8YA8goDIjSAog8YA8hkAAgeBuowYAei+AojIAAgoYAKgyAehGAehGYAohQAKgeAAgUYgUgyhuhahagyYh4g8goAAk2BQYj6BGgyAKgKgoYAAgKAUiMAoiqYBQlUAAAehGhQYgygoiMhkgoAAYgKAAgeAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 143, 278);
            return stroke;
        }(),
        318: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AEYAAYgKAUAKAyAUAeYBQCCgKBkhkDSYgoBagUAUhQBGYhkBkgeAyAAAyYAABGBaBuAyAAYAUAAAogKAogeYCWhkDIhQEihQYFAhQBaAKA8B4YBQC0jSKKjIC+YhkBag8gKj6h4YhagyhQgegKAAYgeAKAUAoA8BQYBuCgAyBaBGBuYAeA8AoA8AKAKYAoAeBGAABGgUYBGgUAKgKBahaYCCiWBaiMBajIYBGi0Bak2Aoj6YAUhaAUhGAogoYAKgUAKgUAAgKYAAg8ighuiggyYhagegeAAigAyYiCAonMBkgygKYgoAAAAAAAAgeYAAgeCMjwA8hQYAogyAKgygUgoYgKgKjIh4hagoYgygUgyAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 175, 240);
            return stroke;
        }(),
        319: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ACCAKYgUAKAAAKAKA8YAUBGAAAogoDSYgeC0gUBageBGYgKAogKAoAAAUYAAAoAeBGAoAUYA8AoAeAABQgoYBagyBageCggeYEshGE2gyFAgUYDcgKBGAKAyAoYAeAeAAAKAAA8YAAAegKA8gKAeYgKAegUB4gUB4Yg8EYgoB4hGA8YgoAogoAAiqg8YiqgygegKAAAeYAAAKAeAyAoAyYBkCMBQB4AyBkYAeBQAeAUAeAAYAeAAC+haAygoYBahaAoiCBun0YAUiMAeiMAKgeYAUg8A8huAohQYAegyAAgUgUgoYgohGjcighGgUYhGgKgeAAiWAyYigA8haAUiqAKYiWAUnqBGiWAUYi0AoAKAAgUgeYgUgeAAAAAKg8YAoiqAoh4AUgoYAyhagUgohahaYhahQhGgJgoAT").cp().ef());
            stroke.setBounds(0, 0, 230, 225);
            return stroke;
        }(),
        320: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ADIAKYgKAKAAAUAKAoYAUBGgKBagKBkYgUBkgUAehaBkYhZBuAAAeBZBkYBQBQAeAABkgyYDchuHMh4GkgyYCMgUAUAAAoAKYA8AUAKBGgoB4YgyC0i+GagyAoYgyAygoAKh4gKYiMgKg8AAhQgUYhkgKgUAUBQBGYB4BaB4CCAUA8YAyBaAoAKCWhQYC+haAyhGDcoIYCgl8AAAABQhQYAygoAUgeAAgUYAAgogygyighaYiWhQg8gKi+AyYg8AKiMAehkAUYjSAolKBQiMAyYhkAegeAAgKgeYAAgUBGi+AyhaYAyhQgKgUhGhGYhahahkgdgeAd").cp().ef());
            stroke.setBounds(0, 0, 207, 185);
            return stroke;
        }(),
        321: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AC0AKYgeAKAAAeAUBQYAUAyAKAeAABQYAABkgKAUgeBQYgoB4geA8gyBQYgxBQAAAUAxB4YBGCgAyAKCMhkYCMhkFKh4D6geYAogKCggUCWgeYJEhQGkgyBuAKYBQAKAeAUAUAyYAUAygKBQhGEEYg8D6gKAUg8AAYgKAAhagKhkgUYjSgegeAAAAAUYgKAUAUAoB4BkYBuBQBGBGB4CMYAeAoAKAAAeAAYBaAABuhaBGiWYAog8AKgyAeigYAykEAyhuBuiWYAyhGAAgygegeYgog8i+iChug8YgygUg8AAiMAoYh4AekEAyjwAeYhuAKiqAehuAUYhuAUiWAUhQAKYiWAei+AehuAoYgyAKg8AKhGAAIhkAAIgKgoYAAg8BGj6AohGYAegoAAgygUgeYgeg8jIiCgyAAYgKAAgKAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 309, 181);
            return stroke;
        }(),
        322: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AC0AAYgeAKAAAoAUBGYAyCMgoCWiMDIYgeAogKAoAAAUYAAAyAoBkAoAoYAeAeAKAAAeAAYAeAAAegUAogUYCChaC0hGDwg8YCCgeFeg8DSgeYBagKC0gUCCgUYCCgKCMgUA8AAYAygKBaAAA8gKYDIgeCMAKAoAyYAyAogUCChQCqYgeBGgUAegUAAYgUAKgygKhugKYhQgUhQgKAAAKYgKAKAUAoBGBaYBaBkAoA8AeBGYAeA8AUAKA8AAYAyAAAygeBGg8YA8g8AKgUBGi+YBGiqAyhuAyg8YBahkAAgehQhQYhQhGi0h4gygKYgUgKgoAKgyAKYiWAok2AyleAoYjSAengBGhkAUYgyAKhuAUhkAKYhkAUiCAUgyAUYg8AKhQAUgoAAYhaAKgKgKAKhaYAUhQAyh4AegoYAKgUAUgeAAgKYAAgohahahkg8YgygegUAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 324, 134);
            return stroke;
        }(),
        323: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AdEAKYgUAAgyAUgeAUYhQAohuAejIAyYnWBkmGA8lKAUYiWAAgeAUAAAeYAAAeAoAoBQAeYBGAoAAAACMAAYCCAAAUgKCMgeYDmg8NIigBGAAYAoAAAeAeAAAyYAAAoh4FehQDSYgyCCgoAyhkB4YhQBagKAUAAAyYAABaBaBuBGAUYAoAAAKAACCgyYCCg8CWAUA8A8YAoAyAAA8g8DSYg8C0g8C0g8BaYiWEYksEOmGDmYjwCWmGC0iMAeYhGAUgUAKAKAeYA8A8I6iMFoigYFeigEsjcDmkiYCMi0Bai+BGkEYAoiMA8h4BQhaYBGhGAKgUgeg8YgehGi0iChageYhGgUhaAKhGAoYhGAoiCAogoAAYgoAAgKgKAAgyYAKgyAKgeDSmGYC+loAog8BuhGYBGgyAygoAAgeYAAgyi0iMigg8YhQgehQAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 256, 360);
            return stroke;
        }(),
        324: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUeA8YhGAoh4AohQAeYkEBQlyBajIAUYiCAUgUAyBaAyYCMA8CWAAD6hQYDmhQFohuAyAAYAoAAAUAKAAAyYAAAoh4FohQC+YgyCMgeA8hQBaYhGBagUAoAAAeYAAAyAoA8AoAoYBGAyAeAABagoYBug8A8gUBaAAYA8AAAUAKAUAUYAeAUAAAKAABGYAAAygKBGgeBuYhQFAhkDcigC+YjmEinCFAmGCqYiWA8gJAKAJAKYAeAUA8AAB4goYHqh4F8jID6kOYB4iCC+jwAyh4YBGh4AohuAyjcYAyi+AehQBGhGYA8hGAAgehGhGYgegeg8gogygeYiMhGg8AKiCBQYg8AehQAogyAKYgoAKgUgeAKgoYAAgUBGiMBQigYEOocAKgKB4hQYBag8AKgyhag8YhGg8h4g8hGgUYhkgdgeAJiMA8").cp().ef());
            stroke.setBounds(0, 0, 205, 342);
            return stroke;
        }(),
        325: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHqAKYgUAKgyAogoAoYgyAohQBGgyAeYgyAogyAeAAAKYAAAKAKAKAUAKYA8AeA8gUC0g8YBGgeAKAKAABkYAAA8gKBGgeBuYhGEigoCChQBuYgyBGgKBGAoAeYAKAUAUAABQAAYBugKBQAUAUAoYA8BQhuGuiMEYYhaCqhQCCiWDcYgoA8geAyAAAAYAAAoAegUBkhQYCChkCWiWA8hkYBkiWB4kYB4leYAUhQAohkAegoYAUgyAUgoAAgKYAAgyiChGhkgKYgegKgoAKgeAKYgeAKgyAKgUAAIgoAKIAKgoYAAgyDSomAyhkYAegyAohQAogyYAogyAeg8AAgKYAAg8hGgoiggyYhugUgyAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 94, 284);
            return stroke;
        }(),
        326: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMgAKYgUAKgoAUgUAUYhGA8g8AUjcBQYlyCCAAAKAABGYAAAeAKAUAKAKYAUAeCCgeC+hGYE2h4AygKAoAyYAUAKAAAUAAAeYAAA8iqHCg8CMYhQCWAKAyBaAyYC0BaD6FoBQEEYAeB4AACCgeBGYgoBahQAeiggUYiqgejIgUgKAKYgeAKAKAeAoAoYAUAUBQAyBGAoYDSCCBQA8AyBGYBQCMBkgUB4igYCCigA8iqAAjIYAAiggyiWhaigYhki0kOksiChQYhuhQAKgUD6mGYCMjSAogoBkhGYBagyAUgygUgoYgKgehahGh4haYiWhkhQgJhGAT").cp().ef());
            stroke.setBounds(0, 0, 145, 294);
            return stroke;
        }(),
        327: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ALuAAYgUAKgUAUgUAKYg8AygyAUkEBQYiMAyh4AogUAAYgoAUgJA8AdAyYAUAeAyAABkgoYBugyE2huAoAAYAoAAAoAoAAAoYAAAUhuFUgeA8YgoBGAAAeAeAeYAKAKAUAUAUAKYBkAoC0C0A8B4YAoBQAUBagKAoYgKAygeAUhGAAYg8AAgoAAiMgoYhkgUhkgUgUAAYgogKgKAAAAAUYAAAeA8AoBaA8YDSBuBkBQBaB4YBGBaB4gyBQigYCMkshukYl8ksYhkhQgegeAAgeYAAgeA8haBkhuYBahuAygoA8geYAygeAUgeAAgeYAAgehGhGhkhGYh4hahGgJg8AJ").cp().ef());
            stroke.setBounds(0, 0, 128, 195);
            return stroke;
        }(),
        328: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AOYAAYgUAKgoAUgoAeYjICWiMA8lKAyYhQAKgeAKgUAKYgUAeAAAyAKAeYAUAUAAAABuAAYCMgKDwg8CMg8YCMg8AKAAAeAUYAyAUAAAUgyB4YgoBQgyCMg8CqYgUAyAKAoBGB4YBaCgA8BuAABGYAKAogKAKgUAUYgUAUgKAKgeAAYi+AAi+AKgKAKYgKAUAKAKCWBGYCgBQB4A8BkBGYAeAUAoAUAKAAYAoAAA8g8Aog8YAehGAAAAgKhaYAAhGgKgygUgyYgohuhGiCg8hGYhuiWgUgegKgoYgKgyAUgoBQh4YCCjIBGhQB4huYAUgKAUgeAAgKYAKgegKgKgegoYhGhQiWhahQAAYgUAAgeAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 132, 189);
            return stroke;
        }(),
        329: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQaAKYgUAAhaAehQAUYkOBQjcAojIAKYhGAAg8AKgUAAYg7AKA7B4B4A8YBQAoAoAADmg8YB4geCggoBQgUYBGgKBQgUAUgKYAogUAUAKAAAUYAAAej6FejwEsYigDIhkBuhkBaYgyAog8AygKAKYgeAeAAAKgKAyYAAAeAAAyAKAUYAUBGAeAADIg8YAogUCMgeB4geYC+goB4gUGkhQYCggeEEgUAyAKYBQAKAKAKAKCMYAUFAhkIIiqHCYhGDIgyBahQBuYhaB4goAegoAAYgUAAhugehugoYhugohagogKAAYgoAAAUAeBQBaYB4B4BQBuBGB4YAoBQAyAyAeAAYAeAABagyBQhQYCCiMCCiqBQiqYBkjICCnqBuqeYAykEAKgoAyg8YAUgeAUgUAAgKYAAgogogohQg8YiqiCgygKiMAoYiWAelKBGmkA8YjIAojIAegoAKYgyAKgoAAAAgKYgegUBQh4C+jmYGun0CgiWCghQYBQgoAUgKAAgeYAAgyiWiCiCgyYgygUhGAAhGAK").cp().ef());
            stroke.setBounds(0, 0, 235, 383);
            return stroke;
        }(),
        330: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AL4AAYgUAKg8AUhGAUYiWAyiWAUiqAUYiCAKgKAAAAAUYAAAeAeA8BGAoYA8AoAKAAAyAAYAoAAAygKA8gUYBagUD6hGAegKYAeAAgKAehQBuYi+EEiqC+iWBuYgoAegeAogKAKYAAAKgKAoAAAoYAAA8AUAeAoAAYAKAABkgUBugUYG4huJ2hQA8AeYAoAeAUCMgeBkYgoCMhaDShGBkYgoA8haBGgoAKYgUAAg8gKhQgKYhGgUgygUgKAAYgKAAAAAeAUAUYAoAeA8BkAyBkYAyBkAoAyAUAAYA8AADSiqBuiWYB4igAyiCBGlUYAeiCAKgeAogyYAUgUAKgeAAgKYAAgohGhGhkgyYhuhGgoAAi0AyYhQAUigAehuAKYh4AUiqAehuAUYhuAKhGAKgKAAYgegeAogyDwjmYDmjwB4hkBGgKYAogKAUgUAAgeYAAgoh4huhagyYhGgegyAAg8AA").cp().ef());
            stroke.setBounds(0, 0, 187, 221);
            return stroke;
        }(),
        331: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AXIAKYgeAKhGAegyAUYhuAyjwBGlABaYkiBQg8AKiMAKYiCAKgoAKAAAeYAAAoBkA8BkAeYBQAKBQgKD6hQYGkiMFAhQAyAKYAeAKAoAoAAAeYAAAygoCCgyCWYhQD6hQCqhuB4YhGBaAAAoA8BGYAyAoAUAABagoYBQgeCqgyA8AAYA8AAAyAoAUA8YAoBkgUEshGEOYhQFoiCEYhuBQYhQAygoAAjchQYiWgogygKgKAAYgeAUAKAUBkBuYBkB4B4CWAyBaYA8BaAeAKBagoYBug8B4huBah4YCMi+BakYBkqAYAoj6AKgyA8haYAyhaAAgeg8gyYg8g8iWhQhQgeYg8gUgeAAiWAoYi0AygUgeBai+YBGiMC+lABkh4YAegeAogoAegeYA8goAegygKgoYgKgohahGiChGYiCgygegJhaAT").cp().ef());
            stroke.setBounds(0, 0, 211, 335);
            return stroke;
        }(),
        332: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AT2AeYgoAehGAUgeAUYiMAyl8BalyBGYhkAUhkAUgUAAYgKAAgKAKAAAKYAAAUBGBQA8AUYBGAeBGgUEYhaYD6hQDIg8CggeYCCgeAKAehQCWYg8CCgyBGg8BGYgyAyAAAKAAAeYAAAeAKAeAKAeYAeAyAoAKBGgoYBug8DwgoBQAUYAoAKAUAyAAA8YAAC+h4FohGAyYg8AohagKjchGYh4goAAAAB4CgYAoAyA8BQAeAoYBGBuAoAeAoAAYAoAAB4g8A8gyYBQhGAyhkBQksYBGjIAohuA8hGYAUgeAUgeAAgKYAAgegygyhahGYhuhGgogKigAeYjIAehGAAAAgyYAAgeB4iqBQhaYAogoAogoAegKYAUgUAegUAKgKYAUgUAAgKgKgUYgKgegygohkgyYhugxgeAAhkAn").cp().ef());
            stroke.setBounds(0, 0, 202, 190);
            return stroke;
        }(),
        333: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ARMA8YjwBuhuAeowBGYhGAKg8AKgUAAYgeAUgKAyAAA8YAUA8AKAAD6gyYI6h4DmgyAUAAYAUAAAUAUAUAKIAUAeIgKB4YAABGgKDmgUDcYgyMMAKgogyCMYgeBGAAAKAKAoYAUAyAoA8AoAKYAKAAAeAAAUAAYCMgyCqgoB4gUYC0goDmAAA8AeYBQAoAUBGgUCqYgyIIgeDSgyCWYgeBugoBQgUAKYgUAUg8geg8goYgUgUgUgUAAAAYgUAAAUA8A8CMYAeBQAyBkAKAyYA8CWAoAKBuh4YBahQAohQAUhaYAoiqBuo6AokEYAUiWAehGBGhaYBuiCgKgUjIiMYhQgyhagygUgUYg8geg8AAh4AeYgoAKigAUiWAeYkiAygUAAgUgyYgUgyAopsA8m4YAei+AKgUBahuYBQhkgKgoiMhkYhQgyighGgeAAYgKAAhGAUhGAo").cp().ef());
            stroke.setBounds(0, 0, 267, 379);
            return stroke;
        }(),
        334: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AakAeYiCAolUBQnqBQYksA8jIAKh4gUYhagUgxAyAdBGYAUAoCMCCBGAoYBaAyAyAABQgyYCChQAegKC0g8YDchGImiMBagKYBGAAAAAAAKAUYAUAogeAyg8BQYgeAogyA8goAyYiCCqiqDcgeAUIgeAeIgygUYhkg8h4gegeAeYgKAUAAAABGBaYA8BaAeBkAeDIYBGHWAUEigKGkYgKGQgUCWhQCqYgeBGgKAKgeAKYg8AUiCgKiqgoYj6g8gUgKgUAUYgKAKAAAKAAAKYAAAAA8AyBGA8YCqB4BuBkCCCCYA8AyA8AyAUAKYAeAAAygUBGgyYBQhGAyg8AyhuYBkjIAUi+gKm4YgKk2genMgokOYAAgogUiggKigYgUiWgKiMgKgKYgKgUAKgKBGgyYBkhGEEi+BkhQYBQhQAygeBkgeYCMgyAygygKgyYgUgyi0jchahGYhQgxgeAAh4An").cp().ef());
            stroke.setBounds(0, 0, 223, 394);
            return stroke;
        }(),
        335: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQkAUYgyAUigA8igAyYk2BuhGAKi0AAYhQAAgUAKgUAKYg7A8CpCWCMAAYAyAAAUAABQgoYBugyFoiWBageYA8gUAyAAAoAoYAUAUAKAegUAeYgUAokYHCAAAKYAAAAgegKgUgKYgUgKgUgKgUAKYgyAKAAAeAyBuYBuD6AyDcAUFeYAeGkgyG4haBkYgeAUAAAAgyAAYgeAAiCgoh4goYjwhGg8gUgeAUYgUAKAUAUB4BkYCWCCC0C0BaBuYBQBkAyAoAoAKYBkAUBuhuBQjIYAohuAKhGAeigYAej6gKqeg8ksYgUiWgUhGgyhkYgohkgKgUg8g8YgegegUgeAAgKYAAgKA8g8B4haYAogoA8g8AygoYAygoAygyAegUYAygoBuhGAogKYAegKAegoAAgeYAAgyhahGi0huYhugxgyAAh4Ad").cp().ef());
            stroke.setBounds(0, 0, 162, 331);
            return stroke;
        }(),
        336: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANcAUYgoAUiWAyiCAoIjwBQIiMAKYhQAAhGAKAAAAYgxAyCVCCBuAAYAUAAAogKAogUYAogUCCgyB4gyYC0hGAygUAUAKYAyAAAUAeAAAeYAAAKjIFogUAUYAAAAgUgKgegUYgygogygegUAAYgKAAgKAKgKAKYgKAKAKAUAoBQYBaDSAeCCAAEsYAADIAAAogUBGYgeB4geAygeAKYgUAAhQgUiMgeYh4gehkgUgKAAYgeAKAUAUAyAoYBkBGBuBaBuBuYBaBGAeAeAeAKYBGAKAygeAyhaYBuigAekEgel8YgKjSgoi0gohQIgehGIAogoYAogoCqiWBahGYAegeA8goAygUYBQgoAUgegegyYgKgehuhGhkgyYhagegogJhkAd").cp().ef());
            stroke.setBounds(0, 0, 133, 215);
            return stroke;
        }(),
        337: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANcAKYiWBugyAehaAoYjIBkjIBGhaAAYhQAAAoBGBkAUYB4AeC0goEEhaYB4gyAKAAAyBGYAeAeAAAUAAAyYAABGAAAKgoAyYgeAegeA8gUAeYgUA8gKAUAABQYgKBkAUAyBGCCYBQCMA8B4AUBGYAUBGAACMgKAyIgUAeIiMAKYiCAAgoAKhkAUYi+A8iMAUhuAKYhuAKgeAKAAAoYAAA8BkBkBkAyYBGAoAUAAB4hGYBkg8BagyBugeYBGgUAeAAB4AAYB4AAAUAABuAoYDcA8FUCCFoCqYFACMEiBuFABGYDcA8BQAKBagUYCMgUEYh4C+iCYBuhGAUgUgUgKYAAgKiqgKkOAAYjwAAjSgKgUAAYgUAAg8gKgoAAYkYgUlehQlohuYj6hQleh4iCg8YgegUhQgUg8gUIhkgUIAUgUYAogeAohaAKhGYAKh4goh4hui0YhaiMgUhkAeh4YAoiMCgkOBQhkYBQhag8hGkYhuYhkgegeAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 416, 278);
            return stroke;
        }(),
        338: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJsAKYgKAKgoAegUAKYhuBQkYB4hkAKYgyAKgKAAAAAUYAAAyCCAUCCgeYAogKBageBGgUYCCgyAKAAAoAyYAyA8gKBGhGBQYhQBugKCCA8BuYCWEEAeBagKBuYgKAeAAAegKAAYAAAKgeAAhQgUYhugoiMgKhkAKYgyAKgyAAg8gKYhagKAAAAgUAUYgTAoAnBaBQAoIAyAeICggUYDmgUBGAKDcBaYA8AUB4AyBaAoYBaAoBuAoAeAUYAoAKBuAyBaAoYC+BGFoCgBGAeYBkAoBugKC0hQYEYiCD6h4AegUYAUgUAKgKAAgUYAAgygegKloAUYiqAAiMAKgKAAYAAAAhkAKhuAAYk2AAgegKsqkEYiMgoh4gogKAAYgUgKAKAAAegoYAygyAUg8gKhaYgKhGgUg8haiWYgyhaAAAAAAhQYAAhaAAAAA8iCYA8iCAog8Ayg8YAyg8gKgehGgyYg8goiWg8goAAYgKAAgeAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 318, 218);
            return stroke;
        }(),
        339: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAsYAAAYgKAKgeAUgeAKYhaA8hGAoiWAyYhQAUhaAegeAKYhQAUk2BQiWAeYnqBukOAokEAKYiWAAgKAKgKAUYgeAeAAAoAeAyYAoA8BuBkA8AeYBQAoAogKCMg8YA8geBagoAygUYBkgeCqg8AygKYAUAABageBugeYEYhQGGhaAoAAYAoAAAUAUgKAeYgKAUhuBkkYDcYl8EslKD6loDwYiMBkiCBQgUAKYgUAUgyAUg8AKYgyAUhQAUgoAKYhGAUj6Aog8AAYgoAAgUAeAAAoYAAAyBaBuBkAyYBGAyAogKBag8YBkhGBkgoBugoYBGgeAoAABkgKYBkAAAUAABaAUYCqAyEiBuDmBuYA8AeAyAUAAAAYAAAABQAoBaAoYFUCqDcBQE2BkYCMAoDwAyAyAAYCWAAEEhuEEiqYB4haAogUgKgUYAAgKhugKksAAYmkgKlAgUjcgoYhugUj6g8gygUYgUAAg8gUhGgUYiWgyloiCi0hGYhGgohkgogygUYhagoiWgog8AAYgoAAgKgKAegKYAogUC+hkCChGYG4kEG4ksFAj6YA8gyBGgyAogeYBGgyDchuB4goYBkgoAUgKAAgyYAAhGhuiCighuYhGgygUgKgoAAYgeAAgeAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 422, 290);
            return stroke;
        }(),
        340: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AbCAKYhGAUAAAUAyBuYAUAoAUAogKAAYAAAAgeAKgeAKYhGAKhuAejSAyYi+AohkAUj6AyYhuAUiMAUg8AUYhQAUhQAKhuAAYiCAAgUAKgKAUYgTAeAJAyAeAeYBGAyDmCCAoAAYAUAABGgeBagoYC0haB4gyDSg8YAogKAogKAUgKYAKAABageBageYBageB4goBGgUYA8gUA8gUAAAAYAKAAgKEYgKBQYgKAegKA8AAAeYgUBkg8C+goBuYiWGQjmEOnCEsYigBkgeAUAKAeYAUAoDwg8C+hkYCCg8BGgyCgh4YDIiqBGhQCMj6YBujcA8igAyj6YAUhGAUhaAKgoYAKgoAKg8AKgoYAUhaAUg8AohQYAog8AAgogKgeYgKgeiChQhkgyYhugohQgJg8AT").cp().ef());
            stroke.setBounds(0, 0, 223, 240);
            return stroke;
        }(),
        341: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAm6AAKYgKAUgKAUAAAUYgKAUgKAegKAUYhGBaoIDwoIC0YhGAUhGAUgKAAYgKAAgogKgygeYiMhGhQgKgeAeYgeAeAKAUAoBGYAUAoAUBGAKAoYAyCWgUJsg8FUYgeC+hQD6haDIYhuEEigDSkODwYhGA8g8A8AAAKYgJAyBPAKBagyYBagoDci0B4h4YB4huCCi0A8h4YAyhaAyiWAoiWYAyjcBGnMAelyYAAhuAUiqAKhQIAeiMIBugUYCCgUIIh4CCgeYAygUBkgeBGgUYCWgyCggoCqgUYCMgUAogKAAgoYAKhGhkhaj6iCYh4gygogJgeAT").cp().ef());
            stroke.setBounds(0, 0, 303, 351);
            return stroke;
        }(),
        342: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AXcAKYAAAAgKAUAAAKYAAAUgKAeAAAeYgeBGi0C0jmCqIi0CCIh4gyYiChGg8gKgoAoYgeAeAKAeAyBaYAeAoAeA8AAAUYAUA8AAKKgUC+YgoImhaFojcHgYgoBahQCWgyBkYgyBugeBQAAAKYAKAeA8gUAyg8YA8g8CgjcA8haYDclUCWn0BGo6YAejwAAgUAUlKYAKigAKigAAgeYAKgeAKgyAAgUYAAgeAKgKAogKYBQgeEYh4CghQYBkgyBageA8gUYBugeAogegKgyYgKgygyhGhQhQYhuhkhkgngoAd").cp().ef());
            stroke.setBounds(0, 0, 190, 370);
            return stroke;
        }(),
        343: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ASmAKYgKAKgKAUAAAyYgKBkgKAoiCCWYh4Cgn0H0gegKYgKAAgogUgogUYg8gUgUgKgUAKYgoAKAAAoAoBaYA8CMAKBQAKC+YAKC+gKIIgUCMYgoFUgyC0hkCMYgoAygKAeAAAeYAAAyAKBkAeA8YAyBkAeAABGhaYCWi+Cgi0EOkYYC+i+AegygoAAYgUAAiCBQi+CMYi+CMAAAAgUgUYgUgKAAgeAKjSYAAiCAKiMAAgeYAAhGAKiWAUnWYAKjcAUjmAKAAYAeAAH0lADIiMYCWhuBQgoB4gyYB4gogKhkiCiMYg8g8huhQgygeYgygKgyAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 164, 343);
            return stroke;
        }(),
        344: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AOEAAYgKAKgKAUAAAoYAABQgKAehQBuYhuCMhGBQi+C+Ii0CqIgogUYg8gehGgKgeAUYgeAUAAAeAUAUYAUAUAyCCAKA8YAUBkAKF8gUC+YgKDSgUBagyBuYgoBkgJAoATBQYAyB4BGBQAogKYAKAAAogoAogyYAogoCWiqCWiWYFAk2BGhQgUgKYgUgKiMBGjwCMYhuBGg8AegeAAYgoAKgKgKAAgeYgKgoAKp2AKh4YAejIAAgegUgeYgUgUAAAABQgyYBug8DmigCqh4YCChkB4hGAeAAYAKAAAUgKAKgKYA8gygUhGhuhuYhkhuhugxgyAT").cp().ef());
            stroke.setBounds(0, 0, 127, 261);
            return stroke;
        }(),
        345: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AOsAUYgKAKgKAeAAAKYAAAygyBGhkBQYhQBGi+CCh4BGIhuBGIgygeYhGgog8gUgyAKYgoAKgJAeAJAeYA8BkAUAeAUAyYAeBaAUCWgKC0YAACMgKAog8BaYgoA8gKBQAeBQYAoBkBGBkAyAAYAKAAAygyA8g8YB4h4C+igEYjmYEOjSBuhkAAgeYAAgUgUAAhGAoYgoAeigBQiWBQYigBQiWBQgeAUYhGAegyAAgegoYgUgegKgoAKloIAKi+IBQgeYDShGCWg8Bkg8YAogeCggyA8gKYBGgKAKgKAAgyYAAgeAAgegUgUYgohGi0iggoAAYgKAAgKAKAAAK").cp().ef());
            stroke.setBounds(0, 0, 131, 189);
            return stroke;
        }(),
        346: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ATOAKYgUAUAAAKAUA8YAUCMgeCCiCDwYhuDckEGai0DmYhaCCiMCMiWBuYiMBkgUAeAAAoYAABGBGCqAoAoYAoAUAUAABkgoYCqgyEsgyGagoYCCgKB4gKAeAAIAygKIgUAeYhkCCuYOihuBQYgUAUg8AegoAUYhuA8geA8AyBkYAoBQB4B4AoAAYAKAABGgUBQgeYHCi0H+iCKehaYJOhQgeAAAogeYAKgKAKgUAAgKYAAgKgKgKhaAAYloAAtmBkpOBaYiqAegeAAAegyYAohQIwpYJspsYFKlUCWiMB4haYAogeAogoAKgKYAUg8hGh4iChuYhkhQg8gegoAAYgyAAgUAegKBGYgKBagUBGhGB4YhuDchkCgiCCqIg8BQIoSgKYn0AAgoAAgegUYgKgKgKgKAAgKYAAgKDSksCqjcYDSkOD6kiDcjwYBGhQA8hGAKgUYAUgeAAgKgUgoYgohkjIjShGgUYg8gKgyAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 273, 378);
            return stroke;
        }(),
        347: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANmAUYgUAKgKAeAAAyYAAAogKAogKAUYgoBkiqC0iWBkYgoAeg8AogeAUYgoAegeAKhGAKYhkAUgUAKgoBGYg7CMAdBkBkgyYA8geBugKFAAKYFeAKgUAAAAAAYAAAKjwCqloDwYgUAUgoAUgeAKYiCAoAABGB4CMYAUAUAUAUAKAAYAKAAA8gUBGgUYEYhuCWgoH0hkYBugUDmgoCWgUYCMgKAygUgKgoYgKgUhGAAjcAUYlyAejIAemGA8YiMAUgyAKAAgKYAAgeQ4rkCghGYBkg8AUgKgUg8Ygoh4iqiWg8AUYgKAAgKAUgKAeYgoBkgUAUhGBaYhaBuhkBuhuBaIhaBQIiWgUYmug8goAAAAgUYAAgUBagyC+huYCWhaCMhQAegKYAogUAKgKAKgeYAehGgyiMh4h4YgygogegJgeAd").cp().ef());
            stroke.setBounds(0, 0, 202, 177);
            return stroke;
        }(),
        348: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AKKAKYgUAUAAAKAUAyYAyCWhGDSjSGGYiMEEgeAoiCB4YiBCMAAAKAdBkYAUBGBQBQAeAAYAKAAAygUAygUYCChGGkiCAUAUYAKAAgoAykiFyYj6E2g8A8g8AoYiCBQAUBQCWB4YBGA8AUAAB4hQYC0h4DmhuFAh4YCWgyAUgKAUgeYAAgKAAgKgKgKYgKgUgUAAhaAUYhuAUjwAyjIA8YiMAogUAAAUgyYAKgUEElKBGhQYAUgUB4iMB4iWYDwkOA8hGBahQYA8gyAKgUgog8Yg8hQighuhQgKYg8gKgeAUAABaYAABagoCChuDIIgoBaIhuAKYgyAAh4AKhQAAYhQAKhQAAgKAAYgKAAgKgUAAgKYAAgKAyhQA8haYCgkEB4igDwlAYAyhGAKgegyg8Ygog8iCh4g8geYgygKhGAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 154, 260);
            return stroke;
        }(),
        349: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ALQAKYgUAKAAAKAUB4YAUBQgKBagoB4Yg8CgkOIIhaCCYgeAeg8A8g8A8Yh4BuAAAUAAA8YAKBaBkCMA8AAYAKAAAygUA8geYCMg8G4iWAUAUYAKAAmuImg8A8YgUAUgoAogUAKYhQAygKA8AyBGYAeAoBkBQAeAAYAKAAA8geBGgoYDIiMBugyE2h4YC0hGAUgKAAgeYAAgUAAgKgeAAYg8AAksBGjmBGYiMAogKAAAUgyYAyhkLQtwB4hkYBQhGAAgUgUgyYgohGiqh4hGgKYhGgKgKAUgKBkYAABGgKAogyBkYgoBkhuDmgUAUYgKAKAAAAksAKYiCAKh4AAgKAAYgKAAgKgKAAgUYAAgyHWqyDmkYYAygyAAgegeg8YgUgoigigg8geYg8gehagJgeAT").cp().ef());
            stroke.setBounds(0, 0, 163, 257);
            return stroke;
        }(),
        350: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGkAKYgKAKAAAKAKAUYAeBQgyCCiCDmYhGBugeAohQBQYg8A8geAoAAAUYAAAeAoBGAoAUYAUAKAKAAA8geYBugyE2hQAKAUYAKAAgoAokOE2YiCCWg8AygoAeYhPAogKAoAxA8YAoAoBGAyAUAAYAKAAA8gUA8goYCWhQB4gyDwhQYDIhGAegUgUgeYgUgKiqAej6A8YhaAUhaAUgUAAYhGAUAyhGHqn+YBuh4CCiCAogeYAygoAegeAAgKYAAgohahGhagyYhGgegUgKgeAKYgeAKAAAAgKA8YAAAogKAoAAAUYgeAyg8B4goBQYgoBGgKAAgeAAYgUAAhaAKhaAAYh4AKg8AAgKgKYgKgKCgjwC0jSYA8hGAogyAAgUYAAgUhkhkg8geYgogKgyAAgKAK").cp().ef());
            stroke.setBounds(0, 0, 120, 165);
            return stroke;
        }(),
        351: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHqAKYgKAKAAAUAKAoYAoCCgyCgigFKYh4DwgKAehuBuYgoAygoAyAAAKYgJA8BFCWAyAAYAKAAA8gUA8geYB4g8DchQAoAKYAUAAAAAKigDcYkYGGgeAogyAeYhaA8AKA8BaBaYAeAeAeAUAUAAYAKAAAygeAygoYBuhGDIhuC+hGYCCg8AegKgKgeYgKgUAAAAgoAKYhGAAjIA8iMAoYh4AogeAAAAgKYAAgoJYsWBuhuYAogoAUgeAAgKYAAgyiCiChageYg8gKgKAKgKBkYAABGgoCChGCCYgKAegKAAjcAKYiMAKgeAAgKgKYgKgKAKgUA8h4YBui+B4jIB4iqYAyhGAohGAAgKYAAgyiMigg8geYgogKgyAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 114, 218);
            return stroke;
        }(),
        352: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAUAKYgdAUAJAUAeBaYA8BuAAAUAUMCYAUMCAAAUAKAKYAUAUBGgKAogKIAogKIAAs0YAKpsgKjIgKgUYgKgehuhkgygeYgygKgUAAgoAK").cp().ef());
            stroke.setBounds(0, 0, 33, 186);
            return stroke;
        }(),
        353: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAAYAAAKAKC+AKBkYAKAoAKDIAADSYAAEsAKBkAKAoYAeCMBkCCAogKYAegKAehGAKhGYAUhkgUlUgejmYgUiWhQlogKgUYgUgegegogegKYgogUgoAAAAAA").cp().ef());
            stroke.setBounds(0, 0, 32, 146);
            return stroke;
        }(),
        354: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANSAAYiCAoloA8jIAKYiCAKgeAKAAAoYAAAoA8A8BGAUYBaAoA8AABagUYBugeEig8AoAAYBkAAAUAygeDIYgoFehaHWgoAoYgeAegygKhQgyYhQgygegKAAAyYgKAeAyBkAyBaYAUAoAoBQAeBGYAyCCAeAoAoAAYAeAAA8geAegoYBQhkBGi0AykOYAojIBamaAUgyYAKgeAehGAegyYA8h4AAgUhahQYhGhGh4hQhQgyYg8gUgoAAgyAA").cp().ef());
            stroke.setBounds(0, 0, 135, 188);
            return stroke;
        }(),
        355: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAgqAAKYgUAAhkAehaAeYk2Bkj6AylKAyYjIAel8AojIAUYiMAKgKAKgoAoYgUAoAAAoAKAyYAeA8AyAKDmgyYBagKDSgoCggUYCqgeFKgyDmgeYDmgoDIgeAKAAYA8AAAyAUAoAyYA8A8AUBGAABkYAACgiCKohaFKIgUAyIi0AoYm4BQj6Aom4AyYiqAKiMAUgKAKYhGAoAeBaBaAoYA8AeCCAADmgoYBugKBugUAeAAYAegKBQgKBGAAYBugUEYgUFUgUYAygKBuAABkgKYCqgKAUAAAUgUYAKgKAKgUAAgKYAAgUhQhag8gyIgegUIAeiMYBupYB4lKDmkEYBGhQAKgogKg8YgKhQhag8kiiMYiMhGgUgKg8AAYgoAAgyAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 283, 230);
            return stroke;
        }(),
        356: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AMMAUYigBkhkAejcBGYiCAeh4AogKAKYgoAKAAAoAAAoYAKAeAAAAAyAAYAUAAA8AAAogKYI6iWAeAAAeAeYAyAygKBGhGFoIgyEOIhaAeYgyAKiCAohkAeYjSA8geAUAKAyYAUBQA8AKCggoYCWgoCWgeDmgoYBugUBugUAKgKYAogUgegyhkg8YgogUgKgKAKgUYAAgKAKg8AKgyYAeiCA8i+AohGYAKgeAog8AUgoYAogyAKgUAAgeYAAgygUgehQgoYgegKhGgogogeYhug7g8AAhQAd").cp().ef());
            stroke.setBounds(0, 0, 128, 136);
            return stroke;
        }(),
        357: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AdYAAYgKAAgyAeg8AUYh4A8j6A8l8BGYlKA8i+Aej6AKYjSAUgeAKAAAeYAAAeAoAoBQAoYBGAeAAAACMAAYB4AAAogKBkgUYEEg8NIiqA8AAYAyAAAeAeAAAyYAAAohuFKhaDcYgyCCgyBQhuB4Yg8BQgKAKAAAyYAABaBaB4BQAKYAUAAAeAAAogUYBQgoAUgoAKiWYAAgeAKgyAKgeYAKgUBai0Bui+YC+loA8hQBagyYA8geA8gyAAgeYAAg8i0iCighGYhGgehaAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 241, 165);
            return stroke;
        }(),
        358: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AeAAKYgUAKgeAKgKAKYhGAyjcA8hkAAYg8AAgeAKAAAyYAABQA8AeBageYBQgeBagKA8AKYA8AKA8AUAUAeYAeAygUCMhkEiYhuFUi0DwleEOYkiDmnMDwlKBkYhaAegJAKAJAUYAeAeCWgUDwgyYGkhuGGi0EsjwYBkhQC+jIBGhaYB4igBQigBGkEYAyiqA8h4BGhGYA8hGAKgKAAgoYAAg8huhuiWhQYhQgehGgJhQAT").cp().ef());
            stroke.setBounds(0, 0, 242, 230);
            return stroke;
        }(),
        359: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGGAKYgKAKg8AogoAoYgoAohQA8g8AoYg8AogoAeAAAKYAAAKAKAKAKAKYAyAUBagKBugoYBQgeAUgKAUAKYAUAKAKAKgKBQYAAAygUBugeBaYhGEigoCChGBkYgeAegKAegKAeYAAAyAAAAAeAUYAUAUAKAKBGgKYBagKAKgKAKhkYAAg8AUgoA8igYAohuAyiCAUg8YA8igA8huBaiCYBah4gygyjmhGYhkgUgoAAgyAK").cp().ef());
            stroke.setBounds(0, 0, 82, 135);
            return stroke;
        }(),
        360: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AJYAKYgeAKhGAKhGAAYg8AKg8AKAAAAYgUAUAAAyAUAUYAeAUAAAABGAAYA8AABaAeAUAeYAKAUAKAUgKBGYgUD6h4FKi0E2Yg8BkgoA8iCC+YgoBGAAAKAKAKYAUAKC0iWB4h4YAygyA8hQAegoYBkigB4kOB4leYAUhaAohkAUgoYAegoAKgoAAgKYAAgegygyg8geYhGgUhaAAg8AK").cp().ef());
            stroke.setBounds(0, 0, 94, 167);
            return stroke;
        }(),
        361: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("APeAUYhQA8hGAygoAUYhQAojmBGi0AyYjwA8gyAUgUAeYgJAeAJAoAoAUYAUAUAeAABuAAYCWAAAogKCMhGYBugyCWg8BagUYAygUAUAAAoAKYBQAeAAgKAAHMYAAEOAADIgKBuIgKCgIAeBGYAoBGAoBGAoAUYAoAUAegKBQhGYBGg8CWhQBkgeYAeAABugKCWAAYDwgKAAAAAAgUYAKg8huhug8AAYg8AAk2AyhkAUYiMAegeAAgegeYgygyAAhkAKn0YAUk2AAhGAohQYAohQAAgegegeYgKgKhGgog8geYighFgyAAg8Ad").cp().ef());
            stroke.setBounds(0, 0, 221, 178);
            return stroke;
        }(),
        362: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAAYgeAegJBQAdAeYAUAUAyBuAeBGYAUAyAAAoAAGaYAAG4gKCCgoFUYgUDIgKBGgeBGYgeBQAUA8B4BQIA8AoIBkgUYA8gUA8gKAKgKYBGgoAAi+hQhGYgegUAAgKgKhaYgUiMAepsAeksYAUkYAUhaAohQYAohkgKgeh4hQYh4hQiMhGgyAAYgeAAgUAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 53, 236);
            return stroke;
        }(),
        363: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAkuAAKYgyAKh4AUhuAAYhkAKhkAAgUAKYgUAAgyAAgeAKYhkAKqeBajmAoYigAUksBGiqAoYhkAegKAKgKBGYAAAoAAAAAUAeYAUAUAUAAA8AAYAyAAA8AAAogUYC+g8HghkFAgyYFogyISgyBQAUYBQAUAyAeAUAoYAeAygUCMg8FeYhGHMhQEYhaCWYhQCMgoAKkOhGYi0gygyAAAAAUYAAAKAoAoAyAyYCqC+CMC+AeBQYAKAoAyAoAoAAYAyAABag8BkhaYCWiWAohaA8kiYCCpYB4oIA8igYAUgeAegyAUgeYA8hGAAgUhahQYgogohQg8g8goYiCg8gegJiWAT").cp().ef());
            stroke.setBounds(0, 0, 292, 245);
            return stroke;
        }(),
        364: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAKAKYgKAegJgUAxCCYAyCCAKBagKJYYAAI6gKAygoDcYgeCMAKAyBaAoYA8AUAUAAA8geYAegeAUgKAKgoYAUg8AAhQgUgoYgUgoAAgeAAo6YAAqAAAgKAyjIYAehuAAAAgUgUYgyhGighQhGAAYgUAAgUAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 37, 206);
            return stroke;
        }(),
        365: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ANwAUYgyAUi+Ayi+AoYmGBagoAKgUAUYAAAeAAAyAKAeYAoAoAoAAB4goYCCgyCMgeCggeYC0gUBQAAAyAUYBGAeAKAogoDmYgKBGgUCWgUCCYgeDmgKBQgoBkYg8CCgUAKiqgyYhGgKhQgUgUAAYgyAAAAAeBGBQYBaBkBGBuAoBGYAeBGAeAeAeAAYAoAABagyBGg8YBGgyA8huAehkYAUhGAejmAolUYAokOAUhQBQiWYAohQAAgUgUgoYgegoh4hkhagoYhQgngoAAh4Ad").cp().ef());
            stroke.setBounds(0, 0, 138, 187);
            return stroke;
        }(),
        366: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AB4AKYgKAKAAAUAUBGYAUBkAKDwgKDIYgUCqAAAUhQBuYgyBGAAAUAAAoYAKAoCCBaAoAAYAeAABQgyAUgoYAegyAAhGgUgyYgUgoAAgKAAiMYAUkOAKgeAei+YAeiqAAAAhug8YhagogygJgUAT").cp().ef());
            stroke.setBounds(0, 0, 39, 122);
            return stroke;
        }(),
        367: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AYOAAYgyAUiMAUiWAUYhQAKi0AUiWAeYjwAoiCAUk2BGIh4AeIAAAeYAABGAyA8BQAAYAUAAAogKAegKYDIhaGuhQG4goYDIgUAeAAAyAUYBGAUAUAyAABkYgKBageDcgyDcYgoC0gKAegyAyIgeAeIhQAAYgyAAhQgUg8gKYi0gogoAKBaBQYBkBaBuB4AoA8YBQB4AeAKBuhQYCMhkAog8AyiWYAUgoBGlKA8k2YAeiWAUgoAyg8YAygyAAgUAAgUYAAgog8gyiMhGYhkgygKAAhGAAYgyAAgoAAgUAA").cp().ef());
            stroke.setBounds(0, 0, 205, 160);
            return stroke;
        }(),
        368: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AYEAeYlyBunWBQn0AeYiqAKgeAKAAAeYAAAUAUAUBGAeYBQAeBGAACqgeYBQgUC0gUCMgUYCMgUB4gUAKAAYAAgKBugKCCgUYCWgeBkgKAUAKYA8AKAoAeAAAoYAAAehGDIgUAeYgKAKjmBGi0AyYgoAKgyAKgeAKYiCAekOAokiAeYk2AeAAAAAKA8YAKAeBkBuAeAKYAKAABkgUBkgUYD6g8J2h4CWgUYCCgUDIgUA8gKYBagKAUg8g8g8IgogoIAog8YAyhGAygyBGgoYBQg8AUgegeg8YgKgehkg8iMhGYiCg7goAAiqAn").cp().ef());
            stroke.setBounds(0, 0, 215, 105);
            return stroke;
        }(),
        369: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUUAKYgKAKhQAUg8AeYiqA8iqAyiMAeYjwAohuAUiWAKYhQAUhGAKgKAKYgTAUAJAeA8AeYA8AeAUAKBGAAYAoAABQgKAogKYAygKCCgeBkgUYBugUCqgeBugeYDmgoAUAAAoAeYAyAoAKAygUBkYgKB4geC0gUBQIgUA8Ig8AUYgoAKh4AehuAUYi0Ayi+AojIAoYiCAUgeAoBGA8YAUAUAeAUAoAKYA8AKAUAACMgeYDwgoFygyDIgUYBkgKBagUAKAAYAegegKgog8gyIg8gyIAUhGYAyi0A8igA8hQYAKgUAegeAegeYAyg8AKgogUg8YgKgogogei+haYhug8geAAgoAAYgoAAgoAAgUAK").cp().ef());
            stroke.setBounds(0, 0, 184, 129);
            return stroke;
        }(),
        370: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AP8AAYgUAAh4AeiMAoYiMAejSAyh4AeYiCAUhuAegKAKYgxAeAxBQBkAUYA8AKAUAACMgUYDwgoFog8DSgUYCggKAegKAUgUYAegegUgehGg8YhahGhGgKh4AA").cp().ef());
            stroke.setBounds(0, 0, 138, 39);
            return stroke;
        }(),
        371: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AUAAUYjmBQjwBQi0AeYi0AehGAKkEAoYhkAKgUAKAAAeYAAAUBGAoAyAUYBQAegeAAMqigYCWgeCCgUAUAAYAyAKAoA8AABGYAAA8geCWgeCgYgKBGgKA8AAAAYAAAAgeAKgUAAYgeAAhuAehuAUYjmA8leBQiCAUYiWAUhaAUgUAUYgxAoAxBQBaAeYA8AKB4AAB4gUYEEgoBagUDcgeYCCgKDIgUBugUYDmgUAUAAAAg8YAAgegygohGgyYgegUgKgKAAgKYAAgKAUg8AUhGYA8jIA8huBGhQYBGg8AUhGgegyYgUgogogUiqhaYiMg8g8gJhaAd").cp().ef());
            stroke.setBounds(0, 0, 182, 133);
            return stroke;
        }(),
        372: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAAAKYAAAKAAAeAKAUYAKAoAAAyAACCYAADSAKAyBGA8YA8A8A8AUCqAAYCMAABQgUAKgeYAUgegKgogUgeYgog8g8gKi0AUYhQAKgUAAgKgUYgegeAKigAohQYAUgeAAgKgKgeYgKgyg8gyhGgUYhGgUgoAAAAAK").cp().ef());
            stroke.setBounds(0, 0, 64, 70);
            return stroke;
        }(),
        373: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AA8AKYgKAKAKAyAeB4YAUBkAKDSgeBQYgKAygoA8goA8YgJAUATAyAyAyYAyA8AUAACWg8YEOhkFohGH0goYCCgKAUAegeC+YgUC+gKA8geA8YgUA8AABGAUAUYAUAUAKAAAyAAYBkgKAogoAeiMYAoiCAehGBuhkYA8hGAegeAAgUYAAgoh4hki+haYg8gegKAAhQAKYgoAAi+Aei0AoYm4BakOAohQAAYhaAAAAAKAeh4YAUhuAyiCAegoYAUgUAKgeAAgKYAAgehuhuhQgyYhQgygygJgUAT").cp().ef());
            stroke.setBounds(0, 0, 200, 136);
            return stroke;
        }(),
        374: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABQAUYgoAoAKAeAyAoYA8AyAeA8AUBQYAUBGAAE2gUCqYgKCMgoDwgUAeYgUAogoAogyAoYgeAeAAAAAAAeYAKAoCMCWAoAUYAeAKAKgKAogUYAygeCgg8B4geYCggoEEgoH0gyYEigeCggKGuAAYG4AACCAKEiAoYB4AUAogKAegoYAegeAAgygegyYgegyhkhQhagoYgygegKAAhaAAYg8AAhkAKg8AKYmGBG6QCqkiAKYgyAAAAAAgUgyYgehQAAhkAyn+YAUjSAKhuAUgUYAKgogKgygegeYgegehug8hGgUYhagKg8AAgeAU").cp().ef());
            stroke.setBounds(0, 0, 348, 168);
            return stroke;
        }(),
        375: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AR+AUYhGA8geAUi+AyYlABukEA8iqAKYgyAAgyAKAAAAYgxAyCfBuB4AAYAyAKAegKBGgoYA8gUCWgyCMgyYE2hkAogKAKAKYAAAAgKBGgKBGYgeC0gKDIAKBuYAUCMAKAoBQBGYAyAyAUAKAyAKYAeAKBaAKBGAAYCCAAAKgKAygUYBQgeBah4AAg8YAAgKgKgogUgeYgyhGgehGgUhaYgKg8gKgegKAKYAAAKgUAygUA8YgeCCgeBGgeAeYgUAUgUAKg8AAYiMgKhGg8AAhuYAAhQA8jIA8h4YAohQAKgUA8goYAegUAUgeAAAAYAAgehuhahGgeYhugxgUAAgyAd").cp().ef());
            stroke.setBounds(0, 0, 184, 122);
            return stroke;
        }(),
        376: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AAeAAYgeAUAAAyAABQYAKBQAKDcAKJiYAKHCAKAeAyBkYA8BkBkBQBuAyYCWA8EiAeGuAKYEiAKCMgKD6geYC+geDcgeAUgUYAegKAKgoAAgyYAAiCiChGkOgKYh4gKgUAAgeAUYhaA8goAKi+AeYhuAUh4AUgyAAYi+AelUgUiMgoYjShGgyhaAUmGYAKk2AejSBQigYAohaAAgogUgyYgegyiqigg8geYgygUhGAAgoAA").cp().ef());
            stroke.setBounds(0, 0, 240, 198);
            return stroke;
        }(),
        377: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAgMAAKYjwBQhaAeiWAoYlABQlAAynWAyYmaAoAAAAgeAUYgnAyAABkAxAoYAeAUBugKDIgoYBagKCCgeBQgKYDcgeJ2hkDIgeYBkgUBkgKAUAAYA8AAAyAUAoAyYA8A8AUA8AABuYAACWhaH+hkFoYhkGQAUBGCqgKYBGAAAUgKAUgUYAegoAUhGAyjmYAoj6BQksAyiCYBGjSBkiqBkh4YBahkAUg8gohGYgeg8hag8jchuYiqhQgUgKg8AAYg8AAgeAAg8AK").cp().ef());
            stroke.setBounds(0, 0, 283, 211);
            return stroke;
        }(),
        378: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AbqAAYgUAAhaAUhkAUYmuBQl8A8m4AyYi0AUhQAUgUAKYgxAoATBQBQAoYBGAoBkgKD6goYFKgyFygeISgoYC+gKCggKAUAAYAegKAegeAAgUYAAgoiqiWhGgeYgegKgyAAhGAA").cp().ef());
            stroke.setBounds(0, 0, 217, 48);
            return stroke;
        }(),
        379: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AHWAKYhkA8haAejcBGYg8AKgJAeAJAeYAUAUBGgKCCgeYC+g8AoAAAeAKYAeAKAAAogeCMIgUBkIgeAKYg8AKkOBagKAKYgUAUAAAeAeAKYAUAKgKAKFKgyYB4gUB4gUAKgKYAKAAAAgUAAgKYAAgUgogogUAAYgUAAAAgKAehGYAUhaAUgeAog8YA8hGgKgUiChQYhkgogegJgyAT").cp().ef());
            stroke.setBounds(0, 0, 77, 66);
            return stroke;
        }(),
        380: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AfGAUYh4AoiMAeiMAKYgyAKhkAKhQAKYhGAKiWAUhkAUYhuAKjmAeiqAeYi0AUi0AUgeAKYhkAKgeAKgKAyYAAAyAAAeAeAUYAoAUAUAABagUYA8gUE2g8CWgUYBGgKDmgoDSgUYEOgoH0goAoAKYAeAAAeAeAKAeYAAAogUB4geBaIgUBGIiWAeYi0AomGBQhkAUYgyAAhkAUhQAKYhaAKhGAAgKAKYgKAAiWAKi0AUYi0AKigAUgKAAYgeAUAKAeA8A8YBkBQAAAADSgoYD6goCMgUEOgoYCCgUCWgUA8gKYBkgUGQgoCggKYBagKAoAAAKgKYAUAAAegoAAgKYAAgKgKgUgUgUIgegeIAohaYAog8AegoA8hGYBahQAKgegUgyYgKgehuhah4hQYhag7goAAiMAd").cp().ef());
            stroke.setBounds(0, 0, 252, 108);
            return stroke;
        }(),
        381: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AfaAUYiWAohuAUjIAeYhuAKiCAUgyAKYg8AKiCAKhuAUYhuAKi0AehuAKYhuAUiWAUhGAKYjSAUgKAKgKA8YAAAoAAAKAKAUYAUAoAeAAB4gUYE2hGIShQHCgyYAeAAAogKAUAAYAeAABugKBugKYDcgUAUAAAeA8YAUAegUBagyCWYgoCCAAA8AeAoYAeAUAKAKAyAAYA8AAAAgKAegUYAKgKAUgoAKgeYAoh4A8haBQhQYBahQAKgegUgyYgKgeigiChkg8YhQgegUgJh4Ad").cp().ef());
            stroke.setBounds(0, 0, 252, 82);
            return stroke;
        }(),
        382: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AQuAKYgyAKh4AohkAeYjmBQh4AehuAAYhQAAgUAAhageYhugogogKAAAoYAAAoAoA8A8AeYBGAeCCAoBkAKYBkAUBQgKCMgoYBugoBugUAoAAYAoAAAKAKAUAUYAeAeAAAKAAAoYAACWiWEikiFyYiCCgiCCWiMB4YhGBGg8AyAAAKYgKAKAKAKAUAUYAyAoCqhGCqiMYFAkOCqiqC0jwYB4iqCWi0AygyYAUgUAogeAegUYAygoAygyAAgUYAAg8hGhaiChaYiqiChQgTi0Ad").cp().ef());
            stroke.setBounds(0, 0, 171, 182);
            return stroke;
        }(),
        383: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ATEAAYgKAAiWAKigAAYmGAUiqAKiCAUYgyAUgyAKAAAAYgKAAAKAKAKAKYAUAUAAAAgUAAYgeAAAAAUAUAUYAAAKAAAAgUAKYgeAAAAAKAAAKYAAAUgKAKgUAAYgUAAgKAKAAAAYAAAeBQAyAoAAYAUAAAKAKAAAAYAAAKAKAAAUAAYAKAAAeAKAUAUYBQAoAeAKAUAAYAKgKAKAKAKAAYAKAKAUAAAygKYCCgeBkgKHWgUYM0geJiAUGuBaYAyAKAyAKAKAAYAAAAAAgUAAgKYgKgKAKgKAUgKYAUgKAUgUAAgKYAKgKAUgUAKgKYAUgKAAgKAAgUYAAgKAAgKAAAAYAUAAAAgUgUgKYgKgKgogKgegKYgeAAgogUgUgKYgUgUjmg8iMgUYjcgojmgUlAgUYjSAAngAAgeAA").cp().ef());
            stroke.setBounds(0, 0, 332, 48);
            return stroke;
        }(),
        384: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("EAnYAAKYgUAKgeAegoAeYgeAogeAUgKAAYgUAAmaGuiqC+YhQBahaBkgeAeYgyA8hGBQhkB4YgeAygoAygKAKYgKAKgyA8goAyYgyA8goAyAAAAYgKAKgUAUgKAUYgUAegUAUAAAAYgKAKgUAUgKAeYgUAegUAUAAAAYgKAKgKAKgKAKYgKAeiMC0gyA8YgUAUgoA8goA8YgoAyg8BageAoYigDIkiHWAAAyYAAAUAAAAAoAAYAoAAAKAKAAAUYAAAKAAAUAUAAYAKAKAKAUAAAUYAAAUAAAAAyAAYAoAAAKAKAKAKYAAAKAKAAAKAAYAyAAAUAAAAAUYAAAUAAAAAUAAYAoAAAUgUAUgyYAKgUAUgoAKgUYAKgUA8haBGhkYCCjSAogyBah4YAogyA8hQAUgoYAyg8BQhuAyg8YAUgUA8haBkiMYAegeAyhGAogoYAegyBkh4BahuYBahuBkh4AegeYC0jcDSjcDSjSYDmjwAogygyAAYgoAAAKgKA8g8YAygoAUgogUAAYgKAAAAgKgKgKYAAgKgKgKgKAAYgUgKAAAAAAgUYAAgKgKgKgUAAYgUAAgKAAAAgKYAAAAgKgKgUAAYgoAKAAgKAAgUYAAgUgKgKgKAAYgUAAAAAAAAgUYAAgKgeAAgeAK").cp().ef());
            stroke.setBounds(0, 0, 282, 336);
            return stroke;
        }(),
        385: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AGuAAYAAAAAAAKAAAKYAAAKgUAKgKAAYgUAAgeAKgKAKYgUAKAAAAgKgKYgKgKgKAAgeAKYgUAKgUAKAAgKYgKgKgKAKgeAKYgUAKgUAAgKAAYAAAAgUAAgKAKYgKAKAAAAgKgKYAAgKgKAAgUAAYgUAAgKAAgKAyYAAAyAAAAAKAeYAUAUAAAAgKAUYgKAKgKAUAAAKYAAAKA8BuBQCCYBQCCE2H0E2HqYEsHqEEGaAUAeYA8A8A8AKCgAAYB4gKAKAAAogUYAegUAegeAUgUcAA8gBaAUyghwAAKgAKYAAgKgKgUgUgKYgKAAgUgKAAAAYgKAUg8goAAgUYAKgKgKgKgegKYgegUgKgKAAgKYAKgKgKgKgegKYgUgKgUgUgKgKYAAAAgKgKgKgKYgKAAgKgKAAgUYAAgeAAAAg8AAYgoAKgUAKgUAUYgUAUgUAKgKAAYAAAAjcFykOHCYrQTOAyhQgUgKYAAgKhui+iCjcYiCjcj6maigkiYiqkiigkOgegoYgUgogegogUgKYgKAAgKAAAAAA").cp().ef());
            stroke.setBounds(0, 0, 336, 268);
            return stroke;
        }(),
        386: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("ABaAUYgKAUgKAUAAAUYAAAegKAAgeAKYgUAAgKAKAAAAYAAAeAoDwAeBQYA8DwAeBkBuDcYAeBGAeA8AAAAYAAAAAeA8AeA8YCCDcDmEsDcDSYFUFKGuEYHCC+YAyAeBuAoBGAeYCqBGBkAoB4AeYB4AoAUAAAAgeYAAgUAUgeAegKYAKAAAKgKAAgKYAAgKAAgKAKAAYAAAAAKgKAAgKYAAgKAAgUAKAAYAUgUgygegygUYhGgKi0hGh4gyYqekOommumGomYhGhah4jSAAgKYAAAAgegygeg8Ygyh4g8iCgehkYgoh4hGkEgKh4YgUhagUgogUAeYgKAUhGgUgKgKYgKgKgKgKgUAAYgKAAgKAAgKgKYAAgKgUgKgeAAYgUAAgegKgKgUYgUgKgKAAgeAU").cp().ef());
            stroke.setBounds(0, 0, 306, 310);
            return stroke;
        }(),
        387: function() {
            var stroke = new createjs.Shape(new createjs.Graphics().f(defaultColor).p("AEYAAYgKAKAAAUAAAUYgKAoAAAKgeAKYgeAAgKAUgKAUYAAAUgKAKAAgKYgKgKAAAAgoAKYgeAKAAAAAAAeYAKAKgKAKAAAAYgKAAAAAKAAAKYAAAKgKAUgUAKYgKAKgKAUAKAKYAAAAgKAKgKAAYgdAAAJBGAeAeYAoAeAAAAgUAKYgKAKAAAKAAAUYAKAUBGAoAoAAYAKAAAKAAAAAKYAKAKAAAAAKgKYAKAAAUAKAUAKYAoAeBGAeAeAKYAeAABGAUAKAUYAKAAAKAKAKAAYAKAAAKAAAAAKYAKAKAygKAegeYAKgKAKgKAKAAYAKAAAKgKAAgKYAKgUAKgUAUgKYAUgUAKgKAAgKYgKAAAAgKAKgKYAKgKAAgKgKgKYgUgeAeg8AegeYAUgKAKgKgKgKYAAAAAAgKAKAAYAAAAAKgKAAgKYAAgUgogUgKAUYgUAUAAgeAKgeYAegygKgUg8gKYgegKAAAAAKgoYAAgUAAgKgUgUYgUgKgKAAAAAUYgKAKAAAAgUgUYgKgKgUgKgKAAYgUAAgygeAAgKYAAAAgegKgeAAYgogKgegKgKAAYAAgKgeAAgKAAYgUAAgUgKgKAAYAAAAgKAAgKAA").cp().ef());
            stroke.setBounds(0, 0, 89, 77);
            return stroke;
        }()
    };
    
    /**
     * @method getStrokeShapes
     * @return {Object}
     */
    var getStrokeShapes = function() {
        return shapes;
    };

    return {
        getStrokeShapes: getStrokeShapes
    };
});
/**
 * @module Skritter
 * @submodule Model
 * @param Strokes
 * @author Joshua McFarland
 */
define('models/Assets',[
    'Strokes',
    'backbone'
], function(Strokes) {
    /**
     * @class Assets
     */
    var Assets = Backbone.Model.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            Assets.audioPlayer = new Audio();
            Assets.strokeShapes = {};
        },
        /**
         * Plays an audio file using the native HTML5 audio element.
         * 
         * @method getAudio
         * @param {String} audioId
         * @return {Object}
         */
        getAudio: function(audioId) {
            if (Assets.audioPlayer.paused) {
                Assets.audioPlayer.src = skritter.api.root + '.' + skritter.api.domain + '/sounds?file=' + audioId;
                Assets.audioPlayer.play();
            }
            return Assets.audioPlayer;
        },
        /**
         * Returns a stroke in the form of a sprite from the preloaded spritesheet.
         * 
         * @method getStroke
         * @param {String} bitmapId
         * @return {Sprite}
         */
        getStroke: function(bitmapId) {
            if (skritter.settings.get('strokeFormat') === 'vector')
                return Assets.strokeShapes[bitmapId].clone();
            return Assets.strokeSprites[bitmapId].clone();
        },
        /**
         * @method loadStrokeShapes
         * @param {Function} callback
         */
        loadStrokeShapes: function(callback) {
            Assets.strokeShapes = Strokes.getStrokeShapes();
            callback();
        }
    });

    return Assets;
});
/**
 * @module Skritter
 * @submodule Model
 * @author Joshua McFarland
 */
define('models/Settings',[
    'backbone'
], function() {
    /**
     * @class Settings
     */
    var Settings = Backbone.Model.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            Settings.self = this;
            //triggers an event when the window is resized
            $(window).resize(_.bind(this.handleResize, this));
            //forces the window to resize onload
            this.handleResize();
        },
        /**
         * @property {Object} defaults
         */
        defaults: {
            appHeight: 0,
            appWidth: 0,
            date: null,
            canvasMaxSize: 600,
            canvasSize: 600,
            container: '#skritter-container',
            orientation: 'vertical',
            strokeFormat: 'vector',
            transitionSpeed: 200,
            version: '0.0.109'
        },
        /**
         * @method handleResize
         */
        handleResize: function() {
            //sets the max boundaries of the application
            this.set('appWidth', $('#skritter-container').width());
            this.set('appHeight', $('#skritter-container').height());
            //sets the orientation of the application area
            if (this.get('appWidth') > this.get('appHeight')) {
                this.set('orientation', 'horizontal');
            } else {
                this.set('orientation', 'vertical');
            }
            //sets max dimensions of the canvas element
            if (this.get('appWidth') > this.get('canvasMaxSize')) {
                this.set('canvasSize', this.get('canvasMaxSize'));
            } else {
                this.set('canvasSize', this.get('appWidth'));
            }
            this.triggerResize();
        },
        /**
         * @method refreshDate
         * @param {String} callback
         */
        refreshDate: function(callback) {
            skritter.api.getDateInfo(function(date) {
                if (date.today) {
                    Settings.self.set('date', date.today);
                } else {
                    Settings.self.set('date', skritter.moment().format('YYYY[-]MM[-]DD'));
                }
                callback();
            });
        },
        /**
         * @method triggerResize
         */
        triggerResize: function() {
            this.trigger('resize', {width:this.get('appWidth'), height:this.get('appHeight'), canvas:this.get('canvasSize')});
        }
    });
    
    return Settings;
});
/**
 * @module Skritter
 * @class Sync
 * @author Joshua McFarland
 */
define('Sync',[],function() {
    /**
     * @method methodFlash
     * @param {Function} callback
     */
    var methodFlash = function(callback) {
        //TODO: implement a system for flash style loading and syncing
        callback();
    };
    /**
     * @method methodFull
     * @param {Function} callback
     */
    var methodFull = function(callback) {
        var requests = [
            {
                path: 'api/v' + skritter.api.version + '/items',
                method: 'GET',
                params: {
                    sort: 'changed',
                    offset: skritter.user.getLastSync(),
                    include_vocabs: 'true',
                    include_strokes: 'true',
                    include_sentences: 'true',
                    include_heisigs: 'true',
                    include_top_mnemonics: 'true',
                    include_decomps: 'true'
                },
                spawner: true
            },
            {
                path: 'api/v' + skritter.api.version + '/srsconfigs',
                method: 'GET',
                params: {
                    bearer_token: this.token
                }
            }
        ];
        skritter.async.waterfall([
            //make the initial batch request for changed items
            function(callback) {
                skritter.modal.setProgress(100, 'Requesting Batch');
                skritter.api.requestBatch(requests, function(batch) {
                    callback(null, batch);
                });
                
            },
            //download requested batch and then store it locally
            function(batch, callback) {
                var size = 0;
                nextBatch();
                function nextBatch() {
                    skritter.api.getBatch(batch.id, function(result) {
                        if (result) {
                            size += result.responseSize;
                            skritter.async.parallel([
                                function(callback) {
                                    skritter.data.decomps.insert(result.Decomps, callback);
                                },
                                function(callback) {
                                    skritter.data.items.insert(result.Items, callback);
                                },
                                function(callback) {
                                    skritter.data.srsconfigs.insert(result.SRSConfigs, callback);
                                },
                                function(callback) {
                                    skritter.data.sentences.insert(result.Sentences, callback);
                                },
                                function(callback) {
                                    skritter.data.strokes.insert(result.Strokes, callback);
                                },
                                function(callback) {
                                    skritter.data.vocabs.insert(result.Vocabs, callback);
                                }
                            ], function() {
                                if (size > 1024)
                                    skritter.modal.setProgress(100, skritter.fn.bytesToSize(size));
                                nextBatch();
                            });
                        } else {
                            callback();
                        }
                    });
                }
            },
            //post reviews to the server and remove them locally
            function(callback) {
                if (skritter.data.reviews.length > 0 && skritter.user.getLastSync()) {
                    skritter.modal.setProgress(100, 'Posting Reviews');
                    skritter.data.reviews.sync(function() {
                        callback();
                    });
                } else {
                    callback();
                }
            }
        ], function() {
            skritter.user.setLastSync();
            callback();
        });
    };
    /**
     * @method methodPartial
     * @param {Function} callback
     */
    var methodPartial = function(callback) {
        skritter.async.waterfall([
            //fetch the condensed items and store them into the database
            function(callback) {
                skritter.api.getItemsCondensed(function(items) {
                    skritter.data.items.add(items, {merge: true, silent: true});
                    skritter.data.items.cache(callback);

                });
            },
            //fetch full records for a limited number of next items
            function(callback) {
                skritter.api.getItemsById(skritter.data.items.getNextIds(), function(data) {
                    callback(null, data);
                });
            },
            //store the data in in collections and the database
            function(data, callback) {
                skritter.data.decomps.add(data.Decomps, {merge: true});
                skritter.data.items.add(data.Items, {merge: true});
                skritter.data.srsconfigs.add(data.SRSConfigs, {merge: true});
                skritter.data.sentences.add(data.Sentences, {merge: true});
                skritter.data.strokes.add(data.Strokes, {merge: true});
                skritter.data.vocabs.add(data.Vocabs, {merge: true});
                callback();
            },
            //cache all of the data and callback finished
            function(callback) {
                skritter.async.parallel([
                    function(callback) {
                        skritter.data.decomps.cache(callback);
                    },
                    function(callback) {
                        skritter.data.items.cache(callback);
                    },
                    function(callback) {
                        skritter.data.srsconfigs.cache(callback);
                    },
                    function(callback) {
                        skritter.data.sentences.cache(callback);
                    },
                    function(callback) {
                        skritter.data.strokes.cache(callback);
                    },
                    function(callback) {
                        skritter.data.vocabs.cache(callback);
                    }
                ], callback);
            }
        ], function() {
            skritter.user.setLastSync();
            callback();
        });
    };

    return {
        methodFlash: methodFlash,
        methodFull: methodFull,
        methodpartial: methodPartial
    };
});
/**
 * @module Skritter
 * @submodule Model
 * @author Joshua McFarland
 */
define('models/StudyDecomp',[
    'backbone'
], function() {
    /**
     * @class StudyDecomp
     */
    var StudyDecomp = Backbone.Model.extend({
	/**
         * @property {String} idAttribute
         */
        idAttribute: 'writing',
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('decomps', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        }
    });
    
    return StudyDecomp;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param StudyDecomp
 * @author Joshua McFarland
 */
define('collections/StudyDecomps',[
    'models/StudyDecomp',
    'backbone'
], function(StudyDecomp) {
    /**
     * @class StudyDecomps
     */
    var StudyDecomps = Backbone.Collection.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.on('change', function(decomp) {
                decomp.cache();
            });
        },
        /**
         * @property {StudyDecomp} model
         */
        model: StudyDecomp,
        /**
         * @method cache
         * @param {Callback} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('decomps', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method insert
         * @param {Array} decomps
         * @param {Function} callback
         * @returns {Backbone.Collection}
         */
        insert: function(decomps, callback) {
            this.add(decomps, {merge: true});
            skritter.storage.setItems('decomps', decomps, callback);
            return this;
        },
        /**
         * @method loadAll
         * @param {Callback} callback
         */
        loadAll: function(callback) {
            skritter.storage.getAll('decomps', function(decomps) {
                skritter.data.decomps.add(decomps, {silent: true});
                callback(null, decomps);
            });
        }
    });

    return StudyDecomps;
});
/**
 * @module Skritter
 * @author Joshua McFarland
 */
define('Scheduler',[],function() {
    /**
     * A group of functions that can be used for scheduling items.
     * 
     * @class Scheduler
     */
    function Scheduler() {}

    /**
     * Returns a calculated interval based on the grade and other details about the item.
     * 
     * @method getInterval
     * @param {StudyItem} item
     * @param {Number} grade
     * @returns {Number}
     */
    Scheduler.prototype.getInterval = function(item, grade) {
        var config = skritter.data.srsconfigs.findWhere({lang: skritter.user.getSetting('targetLang'), part: item.get('part')});
        var newInterval;
        var getRandomizedInterval = function(interval) {
            return Math.round(interval * (0.925 + (Math.random() * 0.15)));
        };

        //return new items with randomized default config values
        if (!item.has('last')) {
            switch (grade) {
                case 1:
                    newInterval = config.get('initialWrongInterval');
                    break;
                case 2:
                    newInterval = config.get('initialRightInterval') / 5;
                    break;
                case 3:
                    newInterval = config.get('initialRightInterval');
                    break;
                case 4:
                    newInterval = config.get('initialRightInterval' * 4);
                    break;
            }
            return getRandomizedInterval(newInterval);
        }

        //set values for further calculations
        var actualInterval = skritter.fn.getUnixTime() - item.get('last');
        var factor;
        var pctRight = item.get('successes') / item.get('reviews');
        var scheduledInterval = item.get('next') - item.get('last');

        //get the factor 
        if (grade === 2) {
            factor = 0.9;
        } else if (grade === 4) {
            factor = 3.5;
        } else {
            var factorsList = (grade === 1) ? config.get('wrongFactors') : config.get('rightFactors');
            var divisions = [2, 1200, 18000, 691200];
            var index;
            for (var i in divisions)
            {
                if (item.get('interval') > divisions[i]) {
                    index = i;
                }
            }
            factor = factorsList[index];
        }

        //adjust the factor based on readiness
        if (grade > 2) {
            factor -= 1;
            factor *= actualInterval / scheduledInterval;
            factor += 1;
        }

        //accelerate new items that appear to be known
        if (item.get('successes') === item.get('reviews') && item.get('reviews') < 5) {
            factor *= 1.5;
        }

        //decelerate hard items consistently marked wrong
        if (item.get('reviews') > 8) {
            if (pctRight < 0.5)
                factor *= Math.pow(pctRight, 0.7);
        }

        //console.log('FACTOR', factor);

        //multiple by the factor and randomize the interval
        newInterval = getRandomizedInterval(item.get('interval') * factor);

        //bound the interval
        if (grade === 1) {
            if (newInterval > 604800) {
                newInterval = 604800;
            } else if (newInterval < 30) {
                newInterval = 30;
            }
        } else {
            if (newInterval > 315569260) {
                newInterval = 315569260;
            } else if (grade === 2 && newInterval < 300) {
                newInterval = 300;
            } else if (newInterval < 30) {
                newInterval = 30;
            }
        }
        return newInterval;
    };

    return Scheduler;
});
/**
 * @module Skritter
 * @submodule Model
 * @author Joshua McFarland
 */
define('models/StudyReview',[
    'backbone'
], function() {
    /**
     * @class StudyReview
     */
    var StudyReview = Backbone.Model.extend({
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('reviews', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        }
    });

    return StudyReview;
});
/**
 * @module Skritter
 * @submodule Model
 * @param Scheduler
 * @param StudyReview
 * @author Joshua McFarland
 */
define('models/StudyItem',[
    'Scheduler',
    'models/StudyReview',
    'backbone'
], function(Scheduler, StudyReview) {
    /**
     * @class StudyItem
     */
    var StudyItem = Backbone.Model.extend({
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('items', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * Returns the contained items for multi-character words. Data is stored for
         * the contained characters regardsless of whether they are being studied or not.
         * 
         * @method getContained
         * @return {Array}
         */
        getContained: function() {
            var items = [];
            if (this.get('vocabIds').length > 0) {
                var contained = this.getVocabs()[0].get('containedVocabIds');
                for (var i in contained) {
                    var id = skritter.user.get('user_id') + '-' + contained[i] + '-' + this.get('part');
                    var item = skritter.data.items.findWhere({id: id});
                    if (item)
                        items.push(item);
                }
            }
            return items;
        },
        /**
         * @method getCharacterCount
         * @returns {Number}
         */
        getCharacterCount: function() {
            if (this.get('vocabIds').length > 0)
                return this.getVocabs()[0].getCharacterCount();
            return 0;
        },
        /**
         * @method getReadiness
         * @param {Boolean} deprioritizeLongShots
         * @return {Number}
         */
        getReadiness: function(deprioritizeLongShots) {
            var now = skritter.fn.getUnixTime();
            if (this.get('vocabIds').length === 0)
                return false;
            if (!this.has('last') && (this.get('next') - now) > 600)
                return 0.2;
            if (!this.has('last') || (this.get('next') - this.get('last')) === 1)
                return 90019001;
            var lengthPenalty = (this.getCharacterCount() > 1) ? 0 : -0.02;
            var seenAgo = now - this.get('last');
            var rtd = this.get('next') - this.get('last');
            var readiness = seenAgo / rtd;
            if (readiness > 0 && seenAgo > 9000) {
                var dayBonus = 1;
                var ageBonus = 0.1 * Math.log(dayBonus + (dayBonus * dayBonus * seenAgo) * (1 / 86400));
                var readiness2 = (readiness > 1) ? 0.0 : 1 - readiness;
                ageBonus *= readiness2 * readiness2;
                readiness += ageBonus;
            }
            if (deprioritizeLongShots) {
                if (readiness > 2.5 && rtd > 600) {
                    if (readiness > 20) {
                        readiness = 1.5;
                    } else {
                        readiness = 3.5 - Math.pow(readiness * 0.4, 0.33333);
                    }
                }
                if (lengthPenalty && readiness > 1)
                    readiness = Math.pow(readiness, 1 + lengthPenalty);
            }
            return readiness;
        },
        /**
         * @method getVocabs
         * @return {Array}
         */
        getVocabs: function() {
            var containedVocabs = [];
            var containedIds = this.get('vocabIds');
            for (var i in containedIds)
                containedVocabs.push(skritter.data.vocabs.findWhere({id: containedIds[i]}));
            return containedVocabs;
        },
        /**
         * This check should be used to try and catch common errors with data that could prevent studying
         * certain items.
         * 
         * @method integrityCheck
         * @returns {Boolean}
         */
        integrityCheck: function() {
           //error logs show that in rare instances active items exist but don't contain the required contained item ids to create reviews
           if (this.getCharacterCount() > 1 && _.contains(['rune', 'tone'], this.get('part')) && this.getContained() && this.getContained().length !== this.getCharacterCount()) {
               this.set('vocabIds', []);
               this.set('flag', true);
               this.set('flagMessage', 'Missing contained item ids.');
               return false;
           }
           return true;
        },
        /**
         * @method isNew
         * @returns {Boolean}
         */
        isNew: function() {
            if (this.get('reviews') < 1)
                return true;
            return false;
        },
        /**
         * Updates the locally stored item and also spawns a review for it.
         * 
         * @method update
         * @param {Number} grade
         * @param {Number} reviewTime
         * @param {Number} startTime
         * @param {Number} thinkingTime
         * @param {String} wordGroup
         * @param {String} bearTime
         * @returns {Backbone.Model}
         */
        update: function(grade, reviewTime, startTime, thinkingTime, wordGroup, bearTime) {
            console.log('UPDATE', this.get('id'), grade, reviewTime, startTime, thinkingTime, wordGroup, bearTime);
            var review = new StudyReview({
                id: this.get('id') + ':' + startTime,
                itemId: this.get('id'),
                score: grade,
                bearTime: bearTime,
                submitTime: startTime,
                reviewTime: reviewTime,
                thinkingTime: thinkingTime,
                currentInterval: this.has('interval') ? this.get('interval') : 0,
                actualInterval: this.has('last') ? startTime - this.get('last') : 0,
                newInterval: new Scheduler().getInterval(this, grade),
                wordGroup: wordGroup,
                previousInterval: this.has('previousInterval') ? this.get('previousInterval') : 0,
                previousSuccess: this.has('previousSuccess') ? this.get('previousSuccess') : false
            });
            this.set({
                changed: startTime,
                last: startTime,
                next: startTime + review.get('newInterval'),
                interval: review.get('newInterval'),
                previousInterval: this.get('interval'),
                previousSuccess: (grade > 1) ? true : false,
                reviews: this.get('reviews') + 1,
                successes: (grade > 1) ? this.get('successes') + 1 : this.get('successes')
            });
            skritter.data.reviews.add(review);
            return this;
        },
        /**
         * @method validate
         * @param {Object} attributes
         */
        validate: function(attributes) {
            if (attributes.changed <= this.get('changed')) {
                console.log('Changed timestamp must be greater than current to update item.');
                return 'Changed timestamp must be greater than current to update item.';
            }
        }
    });

    return StudyItem;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param StudyItem
 * @author Joshua McFarland
 */
define('collections/StudyItems',[
    'models/StudyItem',
    'backbone'
], function(StudyItem) {
    /**
     * @class StudyItems
     */
    var StudyItems = Backbone.Collection.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.on('change', function(item) {
                item.cache();
            });
        },
        /**
         * @property model
         * @type StudyItem
         */
        model: StudyItem,
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('items', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method comparator
         * @param {StudyItem} item
         * @returns {StudyItem}
         */
        comparator: function(item) {
            return -item.getReadiness();
        },
        /**
         * @method filterBy
         * @param {String} attribute
         * @param {String} value
         * @param {Boolean} checkSubString
         * @returns {Array}
         */
        filterBy: function(attribute, value, checkSubString) {
            var filtered = this.filter(function(items) {
                if (checkSubString)
                    return (items.get(attribute).indexOf(value) > -1) ? true : false;
                return _.contains(value, items.get(attribute));
            });
            return new StudyItems(filtered);
        },
        /**
         * @method getActive
         * @returns {Array}
         */
        getActive: function() { 
            var activeItems = [];
            var activeStudyParts = skritter.user.getActiveStudyParts();
            for (var i in this.models) {
                var item = this.models[i];
                var part = '';
                if (item.has('part')) {
                    part = item.get('part');
                } else {
                    part = item.get('id').split('-')[4];
                }
                if (activeStudyParts.indexOf(part) !== -1 && item.get('vocabIds').length > 0)
                    activeItems.push(item);
            }
            return activeItems;
        },
        /**
         * @method getDue
         * @returns {Array}
         */
        getDue: function() {
            var itemsDue = [];
            var activeItems = this.getActive();
            for (var i in activeItems)
                if (activeItems[i].getReadiness() >= 1)
                    itemsDue.push(activeItems[i]);
            return itemsDue;
        },
        /**
         * @method getNextIds
         * @param {Number} limit
         * @returns {Array}
         */
        getNextIds: function(limit) {
            var ids = [];
            limit = (limit) ? limit : 100;
            var items = this.slice(0, limit);
            for (var a in items) {
                ids.push(items[a].get('id'));
                if (items[a].has('containedVocabIds')) {
                    var containedVocabsIds = items[a].get('containedVocabIds');
                    for (var b in containedVocabsIds)
                        ids.push(skritter.user.get('user_id') + '-' + containedVocabsIds[b]);
                }
            }
            return _.uniq(ids);
        },
        /**
         * @method insert
         * @param {Array} items
         * @param {Function} callback
         * @returns {Backbone.Collection}
         */
        insert: function(items, callback) {
            this.add(items, {merge: true, sort: false});
            skritter.storage.setItems('items', items, callback);
            return this;
        },
        /**
         * @method loadAll
         * @param {Callback} callback
         */
        loadAll: function(callback) {
            skritter.storage.getAll('items', function(items) {
                skritter.data.items.add(items, {silent: true});
                callback(null, items);
            });
        }
    });

    return StudyItems;
});
/*
 * 
 * Module: Params
 * 
 * Created By: Joshua McFarland
 * 
 */
define('Params',[],function() {

    var params = [
        {"bitmapId": 0, "corners": [{"x": 26, "y": 51}, {"x": 356, "y": 12}], "deviations": [{"x": 162, "y": 39}]},
        {"bitmapId": 1, "corners": [{"x": 19, "y": 46}, {"x": 270, "y": 15}], "deviations": [{"x": 159, "y": 25}]},
        {"bitmapId": 2, "corners": [{"x": 22, "y": 43}, {"x": 207, "y": 8}], "deviations": [{"x": 83, "y": 29}]},
        {"bitmapId": 3, "corners": [{"x": 20, "y": 47}, {"x": 172, "y": 12}], "deviations": [{"x": 103, "y": 32}]},
        {"bitmapId": 4, "corners": [{"x": 14, "y": 28}, {"x": 159, "y": 9}], "deviations": [{"x": 139, "y": 15}]},
        {"bitmapId": 5, "corners": [{"x": 16, "y": 40}, {"x": 154, "y": 7}], "deviations": [{"x": 106, "y": 22}]},
        {"bitmapId": 6, "corners": [{"x": 15, "y": 31}, {"x": 109, "y": 6}], "deviations": [{"x": 78, "y": 10}]},
        {"bitmapId": 7, "corners": [{"x": 14, "y": 29}, {"x": 86, "y": 8}], "deviations": [{"x": 73, "y": 11}]},
        {"bitmapId": 8, "corners": [{"x": 8, "y": 20}, {"x": 69, "y": 8}], "deviations": [{"x": 36, "y": 17}]},
        {"bitmapId": 9, "corners": [{"x": 28, "y": 13}, {"x": 21, "y": 383}], "deviations": [{"x": 28, "y": 317}]},
        {"bitmapId": 10, "corners": [{"x": 25, "y": 24}, {"x": 25, "y": 295}], "deviations": [{"x": 28, "y": 129}]},
        {"bitmapId": 11, "corners": [{"x": 25, "y": 23}, {"x": 25, "y": 265}], "deviations": [{"x": 25, "y": 258.95}]},
        {"bitmapId": 12, "corners": [{"x": 25, "y": 18}, {"x": 45, "y": 272}], "deviations": [{"x": 36, "y": 92}]},
        {"bitmapId": 13, "corners": [{"x": 19, "y": 17}, {"x": 22, "y": 207}], "deviations": [{"x": 22, "y": 116}]},
        {"bitmapId": 14, "corners": [{"x": 19, "y": 19}, {"x": 30, "y": 167}], "deviations": [{"x": 29, "y": 104}]},
        {"bitmapId": 15, "corners": [{"x": 40, "y": 16}, {"x": 14, "y": 220}], "deviations": [{"x": 21, "y": 187}]},
        {"bitmapId": 16, "corners": [{"x": 16, "y": 10}, {"x": 20, "y": 110}], "deviations": [{"x": 19, "y": 61}]},
        {"bitmapId": 17, "corners": [{"x": 19, "y": 14}, {"x": 18, "y": 212}], "deviations": [{"x": 18, "y": 14}]},
        {"bitmapId": 18, "corners": [{"x": 27, "y": 19}, {"x": 27, "y": 391}], "deviations": [{"x": 27, "y": 316.6}]},
        {"bitmapId": 19, "corners": [{"x": 32, "y": 25}, {"x": 34, "y": 327}], "deviations": [{"x": 34, "y": 45}]},
        {"bitmapId": 20, "corners": [{"x": 20, "y": 17}, {"x": 18, "y": 232}], "deviations": [{"x": 20, "y": 189}]},
        {"bitmapId": 21, "corners": [{"x": 30, "y": 22}, {"x": 22, "y": 181}], "deviations": [{"x": 31, "y": 88}]},
        {"bitmapId": 22, "corners": [{"x": 21, "y": 13}, {"x": 15, "y": 186}], "deviations": [{"x": 21, "y": 115}]},
        {"bitmapId": 23, "corners": [{"x": 22, "y": 17}, {"x": 32, "y": 177}], "deviations": [{"x": 26, "y": 138}]},
        {"bitmapId": 24, "corners": [{"x": 24, "y": 12}, {"x": 18, "y": 120}], "deviations": [{"x": 20, "y": 31}]},
        {"bitmapId": 25, "corners": [{"x": 16, "y": 12}, {"x": 20, "y": 107}], "deviations": [{"x": 16, "y": 70}]},
        {"bitmapId": 26, "corners": [{"x": 16, "y": 10}, {"x": 41, "y": 140}], "deviations": [{"x": 32, "y": 55}]},
        {"bitmapId": 27, "corners": [{"x": 17, "y": 9}, {"x": 27, "y": 54}], "deviations": [{"x": 24, "y": 27}]},
        {"bitmapId": 28, "corners": [{"x": 7, "y": 9}, {"x": 14, "y": 43}], "deviations": [{"x": 7, "y": 19}]},
        {"bitmapId": 29, "corners": [{"x": 67, "y": 25}, {"x": 9, "y": 260}], "deviations": [{"x": 58, "y": 48}]},
        {"bitmapId": 30, "corners": [{"x": 48, "y": 20}, {"x": 9, "y": 162}], "deviations": [{"x": 41, "y": 51}]},
        {"bitmapId": 31, "corners": [{"x": 76, "y": 18}, {"x": 8, "y": 345}], "deviations": [{"x": 64, "y": 200}]},
        {"bitmapId": 32, "corners": [{"x": 103, "y": 15}, {"x": 10, "y": 350}], "deviations": [{"x": 91, "y": 256}]},
        {"bitmapId": 33, "corners": [{"x": 149, "y": 22}, {"x": 6, "y": 342}], "deviations": [{"x": 131, "y": 258}]},
        {"bitmapId": 34, "corners": [{"x": 181, "y": 18}, {"x": 15, "y": 388}], "deviations": [{"x": 153, "y": 242}]},
        {"bitmapId": 35, "corners": [{"x": 169, "y": 20}, {"x": 17, "y": 377}], "deviations": [{"x": 140, "y": 264}]},
        {"bitmapId": 36, "corners": [{"x": 147, "y": 22}, {"x": 16, "y": 335}], "deviations": [{"x": 100, "y": 237}]},
        {"bitmapId": 37, "corners": [{"x": 108, "y": 18}, {"x": 11, "y": 290}], "deviations": [{"x": 86, "y": 198}]},
        {"bitmapId": 38, "corners": [{"x": 98, "y": 18}, {"x": 13, "y": 306}], "deviations": [{"x": 82, "y": 155}]},
        {"bitmapId": 39, "corners": [{"x": 219, "y": 23}, {"x": 10, "y": 388}], "deviations": [{"x": 156, "y": 223}]},
        {"bitmapId": 40, "corners": [{"x": 238, "y": 24}, {"x": 18, "y": 306}], "deviations": [{"x": 183, "y": 217}]},
        {"bitmapId": 41, "corners": [{"x": 219, "y": 26}, {"x": 12, "y": 313}], "deviations": [{"x": 140, "y": 210}]},
        {"bitmapId": 42, "corners": [{"x": 254, "y": 13}, {"x": 15, "y": 279}], "deviations": [{"x": 135, "y": 171}]},
        {"bitmapId": 43, "corners": [{"x": 242, "y": 23}, {"x": 16, "y": 257}], "deviations": [{"x": 145, "y": 158}]},
        {"bitmapId": 44, "corners": [{"x": 203, "y": 15}, {"x": 16, "y": 235}], "deviations": [{"x": 126, "y": 151}]},
        {"bitmapId": 45, "corners": [{"x": 145, "y": 25}, {"x": 12, "y": 196}], "deviations": [{"x": 111, "y": 139}]},
        {"bitmapId": 46, "corners": [{"x": 109, "y": 15}, {"x": 10, "y": 203}], "deviations": [{"x": 80, "y": 145}]},
        {"bitmapId": 47, "corners": [{"x": 33, "y": 12}, {"x": 11, "y": 168}], "deviations": [{"x": 37, "y": 103}]},
        {"bitmapId": 48, "corners": [{"x": 56, "y": 15}, {"x": 16, "y": 151}], "deviations": [{"x": 56, "y": 88}]},
        {"bitmapId": 49, "corners": [{"x": 25, "y": 12}, {"x": 12, "y": 96}], "deviations": [{"x": 25, "y": 70}]},
        {"bitmapId": 50, "corners": [{"x": 121, "y": 11}, {"x": 8, "y": 214}], "deviations": [{"x": 83, "y": 123}]},
        {"bitmapId": 51, "corners": [{"x": 145, "y": 26}, {"x": 13, "y": 220}], "deviations": [{"x": 102, "y": 112}]},
        {"bitmapId": 52, "corners": [{"x": 199, "y": 18}, {"x": 8, "y": 200}], "deviations": [{"x": 137, "y": 105}]},
        {"bitmapId": 53, "corners": [{"x": 199, "y": 14}, {"x": 11, "y": 205}], "deviations": [{"x": 145, "y": 102}]},
        {"bitmapId": 54, "corners": [{"x": 161, "y": 19}, {"x": 12, "y": 160}], "deviations": [{"x": 106, "y": 107}]},
        {"bitmapId": 55, "corners": [{"x": 108, "y": 15}, {"x": 10, "y": 151}], "deviations": [{"x": 79, "y": 93}]},
        {"bitmapId": 56, "corners": [{"x": 146, "y": 15}, {"x": 11, "y": 124}], "deviations": [{"x": 104, "y": 63}]},
        {"bitmapId": 57, "corners": [{"x": 110, "y": 12}, {"x": 13, "y": 94}], "deviations": [{"x": 85, "y": 51}]},
        {"bitmapId": 58, "corners": [{"x": 76, "y": 21}, {"x": 13, "y": 164}], "deviations": [{"x": 55, "y": 90}]},
        {"bitmapId": 59, "corners": [{"x": 63, "y": 18}, {"x": 12, "y": 106}], "deviations": [{"x": 44, "y": 74}]},
        {"bitmapId": 60, "corners": [{"x": 32, "y": 11}, {"x": 9, "y": 87}], "deviations": [{"x": 32, "y": 49}]},
        {"bitmapId": 61, "corners": [{"x": 112, "y": 22}, {"x": 17, "y": 96}], "deviations": [{"x": 93, "y": 41}]},
        {"bitmapId": 62, "corners": [{"x": 76, "y": 17}, {"x": 9, "y": 111}], "deviations": [{"x": 44, "y": 70}]},
        {"bitmapId": 63, "corners": [{"x": 56, "y": 21}, {"x": 10, "y": 101}], "deviations": [{"x": 46, "y": 45}]},
        {"bitmapId": 64, "corners": [{"x": 58, "y": 16}, {"x": 15, "y": 70}], "deviations": [{"x": 40, "y": 42}]},
        {"bitmapId": 65, "corners": [{"x": 54, "y": 19}, {"x": 17, "y": 41}], "deviations": [{"x": 28, "y": 32}]},
        {"bitmapId": 66, "corners": [{"x": 161, "y": 22}, {"x": 26, "y": 75}], "deviations": [{"x": 57, "y": 66}]},
        {"bitmapId": 67, "corners": [{"x": 174, "y": 16}, {"x": 15, "y": 134}], "deviations": [{"x": 128, "y": 70}]},
        {"bitmapId": 68, "corners": [{"x": 22, "y": 12}, {"x": 258, "y": 227}], "deviations": [{"x": 100, "y": 107}]},
        {"bitmapId": 69, "corners": [{"x": 16, "y": 8}, {"x": 234, "y": 271}], "deviations": [{"x": 180, "y": 235}]},
        {"bitmapId": 70, "corners": [{"x": 14, "y": 6}, {"x": 276, "y": 172}], "deviations": [{"x": 77, "y": 30}]},
        {"bitmapId": 71, "corners": [{"x": 21, "y": 8}, {"x": 167, "y": 181}], "deviations": [{"x": 147, "y": 166}]},
        {"bitmapId": 72, "corners": [{"x": 15, "y": 11}, {"x": 162, "y": 146}], "deviations": [{"x": 120, "y": 117}]},
        {"bitmapId": 73, "corners": [{"x": 7, "y": 5}, {"x": 174, "y": 194}], "deviations": [{"x": 105, "y": 130}]},
        {"bitmapId": 74, "corners": [{"x": 10, "y": 9}, {"x": 214, "y": 125}], "deviations": [{"x": 104, "y": 70}]},
        {"bitmapId": 75, "corners": [{"x": 8, "y": 5}, {"x": 148, "y": 124}], "deviations": [{"x": 75, "y": 80}]},
        {"bitmapId": 76, "corners": [{"x": 18, "y": 27}, {"x": 335, "y": 82}], "deviations": [{"x": 141, "y": 17}]},
        {"bitmapId": 77, "corners": [{"x": 13, "y": 9}, {"x": 253, "y": 66}], "deviations": [{"x": 78, "y": 9}]},
        {"bitmapId": 78, "corners": [{"x": 11, "y": 8}, {"x": 58, "y": 56}], "deviations": [{"x": 39, "y": 34}]},
        {"bitmapId": 79, "corners": [{"x": 1, "y": 0}, {"x": 24, "y": 16}], "deviations": [{"x": 6, "y": 2}]},
        {"bitmapId": 80, "corners": [{"x": 4, "y": 5}, {"x": 113, "y": 113}], "deviations": [{"x": 56, "y": 47}]},
        {"bitmapId": 81, "corners": [{"x": 5, "y": 6}, {"x": 107, "y": 66}], "deviations": [{"x": 69, "y": 38}]},
        {"bitmapId": 82, "corners": [{"x": 8, "y": 9}, {"x": 71, "y": 99}], "deviations": [{"x": 10, "y": 15}]},
        {"bitmapId": 83, "corners": [{"x": 39, "y": 12}, {"x": 15, "y": 100}], "deviations": [{"x": 31, "y": 46}]},
        {"bitmapId": 84, "corners": [{"x": 61, "y": 10}, {"x": 13, "y": 70}], "deviations": [{"x": 41, "y": 41}]},
        {"bitmapId": 85, "corners": [{"x": 31, "y": 24}, {"x": 15, "y": 110}], "deviations": [{"x": 31, "y": 35}]},
        {"bitmapId": 86, "corners": [{"x": 39, "y": 20}, {"x": 15, "y": 80}], "deviations": [{"x": 40, "y": 29}]},
        {"bitmapId": 87, "corners": [{"x": 28, "y": 61}, {"x": 189, "y": 9}], "deviations": [{"x": 153, "y": 25}]},
        {"bitmapId": 88, "corners": [{"x": 22, "y": 114}, {"x": 161, "y": 13}], "deviations": [{"x": 90, "y": 62}]},
        {"bitmapId": 89, "corners": [{"x": 29, "y": 74}, {"x": 146, "y": 9}], "deviations": [{"x": 51, "y": 56}]},
        {"bitmapId": 90, "corners": [{"x": 22, "y": 57}, {"x": 87, "y": 11}], "deviations": [{"x": 29, "y": 55}]},
        {"bitmapId": 91, "corners": [{"x": 28, "y": 118}, {"x": 106, "y": 10}], "deviations": [{"x": 40, "y": 108}]},
        {"bitmapId": 92, "corners": [{"x": 22, "y": 141}, {"x": 94, "y": 9}], "deviations": [{"x": 41, "y": 101}]},
        {"bitmapId": 93, "corners": [{"x": 10, "y": 48}, {"x": 48, "y": 11}], "deviations": [{"x": 23, "y": 39}]},
        {"bitmapId": 94, "corners": [{"x": 17, "y": 49}, {"x": 283.07038623570236, "y": 9.2324034410744}, {"x": 258, "y": 55}], "deviations": [{"x": 207, "y": 15}, {"x": 269, "y": 40}]},
        {"bitmapId": 94, "corners": [{"x": 11, "y": 48}, {"x": 271, "y": 11}], "deviations": [{"x": 72, "y": 42}], "feedback": "hook"},
        {"bitmapId": 95, "corners": [{"x": 16, "y": 35}, {"x": 232.0877613281261, "y": 15}, {"x": 211, "y": 55}], "deviations": [{"x": 127, "y": 18}, {"x": 234, "y": 17}]},
        {"bitmapId": 95, "corners": [{"x": 17, "y": 38}, {"x": 219, "y": 10}], "deviations": [{"x": 53, "y": 28}], "feedback": "hook"},
        {"bitmapId": 96, "corners": [{"x": 26, "y": 40}, {"x": 147.7431614223769, "y": 11}, {"x": 110, "y": 74}], "deviations": [{"x": 86, "y": 22}, {"x": 145, "y": 22}]},
        {"bitmapId": 97, "corners": [{"x": 19, "y": 44}, {"x": 167.46209380980034, "y": 22}, {"x": 142, "y": 72}], "deviations": [{"x": 39, "y": 44}, {"x": 164, "y": 33}]},
        {"bitmapId": 98, "corners": [{"x": 11, "y": 41}, {"x": 158, "y": 15.038874595270153}, {"x": 146, "y": 46}], "deviations": [{"x": 94, "y": 20}, {"x": 158, "y": 18}]},
        {"bitmapId": 98, "corners": [{"x": 8, "y": 43}, {"x": 159, "y": 11}], "deviations": [{"x": 45, "y": 31}], "feedback": "hook"},
        {"bitmapId": 99, "corners": [{"x": 9, "y": 39}, {"x": 156.71626701455978, "y": 21}, {"x": 153, "y": 324}], "deviations": [{"x": 98, "y": 26}, {"x": 162, "y": 143}]},
        {"bitmapId": 100, "corners": [{"x": 6, "y": 38}, {"x": 117.18145569497398, "y": 18.637088610052054}, {"x": 114, "y": 284}], "deviations": [{"x": 82, "y": 19}, {"x": 119, "y": 120}]},
        {"bitmapId": 101, "corners": [{"x": 7, "y": 21}, {"x": 73.97538080876987, "y": 12.01230959561507}, {"x": 70, "y": 160}], "deviations": [{"x": 32, "y": 21}, {"x": 76, "y": 52}]},
        {"bitmapId": 102, "corners": [{"x": 20, "y": 38}, {"x": 214, "y": 19.701944955764244}, {"x": 150, "y": 285}], "deviations": [{"x": 144, "y": 20}, {"x": 175, "y": 147}]},
        {"bitmapId": 103, "corners": [{"x": 20, "y": 32}, {"x": 153.6106847411587, "y": 14}, {"x": 120, "y": 224}], "deviations": [{"x": 127, "y": 14}, {"x": 141, "y": 109}]},
        {"bitmapId": 104, "corners": [{"x": 13, "y": 17}, {"x": 83.93900629068163, "y": 18.121987418636724}, {"x": 38, "y": 198}], "deviations": [{"x": 84, "y": 16}, {"x": 70, "y": 61}]},
        {"bitmapId": 105, "corners": [{"x": 18, "y": 15}, {"x": 79, "y": 16.217788322200853}, {"x": 43, "y": 137}], "deviations": [{"x": 49, "y": 15}, {"x": 79, "y": 21}]},
        {"bitmapId": 106, "corners": [{"x": 8, "y": 36}, {"x": 169.34480595472274, "y": 17}, {"x": 174, "y": 208}], "deviations": [{"x": 35, "y": 36}, {"x": 170, "y": 131}]},
        {"bitmapId": 107, "corners": [{"x": 6, "y": 40}, {"x": 173, "y": 25.375163415570867}, {"x": 140, "y": 161}], "deviations": [{"x": 116, "y": 25}, {"x": 163, "y": 56}]},
        {"bitmapId": 108, "corners": [{"x": 20, "y": 36}, {"x": 147, "y": 18.425028853721358}, {"x": 113, "y": 172}], "deviations": [{"x": 94, "y": 20}, {"x": 129, "y": 111}]},
        {"bitmapId": 109, "corners": [{"x": 9, "y": 32}, {"x": 131.75753238422908, "y": 19}, {"x": 133, "y": 140}], "deviations": [{"x": 36, "y": 32}, {"x": 133, "y": 19}]},
        {"bitmapId": 110, "corners": [{"x": 11, "y": 16}, {"x": 54, "y": 7.324170873518842}, {"x": 55, "y": 71}], "deviations": [{"x": 31, "y": 10}, {"x": 54, "y": 66}]},
        {"bitmapId": 111, "corners": [{"x": 8, "y": 41}, {"x": 145, "y": 23.700580596523217}, {"x": 122, "y": 111}], "deviations": [{"x": 85, "y": 25}, {"x": 126, "y": 85}]},
        {"bitmapId": 112, "corners": [{"x": 8, "y": 36}, {"x": 101, "y": 17.188159788041734}, {"x": 91, "y": 74}], "deviations": [{"x": 64, "y": 23}, {"x": 96, "y": 38}]},
        {"bitmapId": 113, "corners": [{"x": 10, "y": 18}, {"x": 50, "y": 10.302535954120046}, {"x": 38, "y": 53}], "deviations": [{"x": 32, "y": 12}, {"x": 46, "y": 33}]},
        {"bitmapId": 114, "corners": [{"x": 24, "y": 44}, {"x": 240, "y": 15.580464243417946}, {"x": 203, "y": 176}], "deviations": [{"x": 136, "y": 27}, {"x": 240, "y": 29}]},
        {"bitmapId": 115, "corners": [{"x": 10, "y": 39}, {"x": 238, "y": 32.246854488978826}, {"x": 195, "y": 139}], "deviations": [{"x": 155, "y": 28}, {"x": 226, "y": 56}]},
        {"bitmapId": 116, "corners": [{"x": 9, "y": 50}, {"x": 275.1753147651547, "y": 17}, {"x": 254, "y": 110}], "deviations": [{"x": 147, "y": 24}, {"x": 268, "y": 68}]},
        {"bitmapId": 117, "corners": [{"x": 15, "y": 37}, {"x": 169, "y": 21.11308443430777}, {"x": 153, "y": 106}], "deviations": [{"x": 139, "y": 21}, {"x": 168, "y": 40}]},
        {"bitmapId": 118, "corners": [{"x": 3, "y": 32}, {"x": 141, "y": 10.382411370992937}, {"x": 126, "y": 53}], "deviations": [{"x": 105, "y": 10}, {"x": 137, "y": 28}]},
        {"bitmapId": 119, "corners": [{"x": 11, "y": 38}, {"x": 188, "y": 18.762763241765796}, {"x": 174, "y": 68}], "deviations": [{"x": 58, "y": 38}, {"x": 180, "y": 52}]},
        {"bitmapId": 120, "corners": [{"x": 13, "y": 26}, {"x": 109.81573672074498, "y": 23}, {"x": 54, "y": 217}], "deviations": [{"x": 53, "y": 23}, {"x": 110, "y": 36}]},
        {"bitmapId": 121, "corners": [{"x": 215, "y": 28}, {"x": 317.5873412453205, "y": 21.412658754679548}, {"x": 12, "y": 321}], "deviations": [{"x": 314, "y": 19}, {"x": 186, "y": 187}]},
        {"bitmapId": 122, "corners": [{"x": 158, "y": 30}, {"x": 253, "y": 21.706003355963986}, {"x": 11, "y": 249}], "deviations": [{"x": 206, "y": 23}, {"x": 175, "y": 133}]},
        {"bitmapId": 123, "corners": [{"x": 135, "y": 29}, {"x": 243.28814056179232, "y": 20}, {"x": 10, "y": 231}], "deviations": [{"x": 201, "y": 27}, {"x": 180, "y": 134}]},
        {"bitmapId": 124, "corners": [{"x": 166, "y": 21}, {"x": 236.99291055423177, "y": 14.021268337304667}, {"x": 13, "y": 168}], "deviations": [{"x": 216, "y": 13}, {"x": 148, "y": 109}]},
        {"bitmapId": 125, "corners": [{"x": 95, "y": 44}, {"x": 247, "y": 23.346284008082378}, {"x": 14, "y": 311}], "deviations": [{"x": 172, "y": 30}, {"x": 185, "y": 219}]},
        {"bitmapId": 126, "corners": [{"x": 79, "y": 49}, {"x": 248.31423089842082, "y": 23}, {"x": 17, "y": 305}], "deviations": [{"x": 200, "y": 26}, {"x": 150, "y": 229}]},
        {"bitmapId": 127, "corners": [{"x": 113, "y": 26}, {"x": 189.76554387744852, "y": 12}, {"x": 13, "y": 243}], "deviations": [{"x": 132, "y": 26}, {"x": 101, "y": 160}]},
        {"bitmapId": 128, "corners": [{"x": 154, "y": 35}, {"x": 251, "y": 26.733828343372416}, {"x": 5, "y": 310}], "deviations": [{"x": 251, "y": 22}, {"x": 140, "y": 214}]},
        {"bitmapId": 129, "corners": [{"x": 127, "y": 19}, {"x": 207.14406753244518, "y": 23.855932467554812}, {"x": 15, "y": 193}], "deviations": [{"x": 207, "y": 21}, {"x": 139, "y": 112}]},
        {"bitmapId": 130, "corners": [{"x": 67, "y": 38}, {"x": 184.12542760492005, "y": 19}, {"x": 18, "y": 229}], "deviations": [{"x": 123, "y": 33}, {"x": 130, "y": 158}]},
        {"bitmapId": 131, "corners": [{"x": 95, "y": 22}, {"x": 193, "y": 21.387760539701805}, {"x": 17, "y": 209}], "deviations": [{"x": 192, "y": 17}, {"x": 121, "y": 142}]},
        {"bitmapId": 132, "corners": [{"x": 79, "y": 19}, {"x": 155, "y": 14.781891025951657}, {"x": 16, "y": 133}], "deviations": [{"x": 130, "y": 18}, {"x": 104, "y": 100}]},
        {"bitmapId": 133, "corners": [{"x": 41, "y": 27}, {"x": 135, "y": 16.928357780328348}, {"x": 15, "y": 205}], "deviations": [{"x": 101, "y": 16}, {"x": 97, "y": 122}]},
        {"bitmapId": 134, "corners": [{"x": 30, "y": 46}, {"x": 129.4308590585468, "y": 17}, {"x": 13, "y": 193}], "deviations": [{"x": 115, "y": 23}, {"x": 74, "y": 125}]},
        {"bitmapId": 135, "corners": [{"x": 30, "y": 36}, {"x": 152.7379813918456, "y": 13}, {"x": 12, "y": 162}], "deviations": [{"x": 104, "y": 18}, {"x": 90, "y": 104}]},
        {"bitmapId": 136, "corners": [{"x": 23, "y": 33}, {"x": 127, "y": 17.052505047322544}, {"x": 17, "y": 182}], "deviations": [{"x": 51, "y": 31}, {"x": 96, "y": 110}]},
        {"bitmapId": 137, "corners": [{"x": 28, "y": 26}, {"x": 115, "y": 15.349158856922562}, {"x": 16, "y": 134}], "deviations": [{"x": 112, "y": 14}, {"x": 79, "y": 97}]},
        {"bitmapId": 138, "corners": [{"x": 29, "y": 47}, {"x": 187.36601499450256, "y": 22}, {"x": 122, "y": 162}], "deviations": [{"x": 71, "y": 47}, {"x": 176, "y": 60}]},
        {"bitmapId": 139, "corners": [{"x": 69, "y": 19}, {"x": 132, "y": 12.16936134658754}, {"x": 12, "y": 156}], "deviations": [{"x": 96, "y": 17}, {"x": 90, "y": 86}]},
        {"bitmapId": 140, "corners": [{"x": 26, "y": 63}, {"x": 244.22193287065, "y": 23}, {"x": 33, "y": 163}], "deviations": [{"x": 155, "y": 34}, {"x": 171, "y": 87}]},
        {"bitmapId": 141, "corners": [{"x": 28, "y": 44}, {"x": 191.1532405219484, "y": 20}, {"x": 133, "y": 99}], "deviations": [{"x": 166, "y": 20}, {"x": 166, "y": 58}]},
        {"bitmapId": 142, "corners": [{"x": 23, "y": 40}, {"x": 153.96993979068304, "y": 20.060120418633904}, {"x": 109, "y": 96}], "deviations": [{"x": 120, "y": 22}, {"x": 120, "y": 71}]},
        {"bitmapId": 143, "corners": [{"x": 20, "y": 31}, {"x": 123.68036396555597, "y": 15}, {"x": 80, "y": 67}], "deviations": [{"x": 35, "y": 31}, {"x": 118, "y": 20}]},
        {"bitmapId": 144, "corners": [{"x": 13, "y": 30}, {"x": 95.18945319705531, "y": 13}, {"x": 54, "y": 83}], "deviations": [{"x": 71, "y": 20}, {"x": 89, "y": 27}]},
        {"bitmapId": 145, "corners": [{"x": 16, "y": 25}, {"x": 81.47221488338111, "y": 16.527785116618897}, {"x": 27, "y": 99}], "deviations": [{"x": 61, "y": 21}, {"x": 38, "y": 74}]},
        {"bitmapId": 146, "corners": [{"x": 11, "y": 43}, {"x": 95.85561346129425, "y": 17}, {"x": 65, "y": 109}], "deviations": [{"x": 44, "y": 35}, {"x": 93, "y": 41}]},
        {"bitmapId": 147, "corners": [{"x": 8, "y": 35}, {"x": 90.43256495113388, "y": 9.567435048866114}, {"x": 71, "y": 73}], "deviations": [{"x": 39, "y": 28}, {"x": 73, "y": 63}]},
        {"bitmapId": 148, "corners": [{"x": 11, "y": 38}, {"x": 106.52680291972565, "y": 20}, {"x": 83, "y": 76}], "deviations": [{"x": 40, "y": 38}, {"x": 88, "y": 68}]},
        {"bitmapId": 149, "corners": [{"x": 85, "y": 16}, {"x": 75.95469833372987, "y": 367}, {"x": 21, "y": 331}], "deviations": [{"x": 81, "y": 363}, {"x": 33, "y": 335}]},
        {"bitmapId": 149, "corners": [{"x": 83, "y": 20}, {"x": 91, "y": 361}], "deviations": [{"x": 78, "y": 254}], "feedback": "hook"},
        {"bitmapId": 150, "corners": [{"x": 77, "y": 24}, {"x": 70.96767480603364, "y": 241.03232519396636}, {"x": 18, "y": 208}], "deviations": [{"x": 77, "y": 144}, {"x": 64, "y": 242}]},
        {"bitmapId": 150, "corners": [{"x": 78, "y": 20}, {"x": 80, "y": 238}], "deviations": [{"x": 79, "y": 34}], "feedback": "hook"},
        {"bitmapId": 151, "corners": [{"x": 57, "y": 18}, {"x": 54, "y": 133.85954460885313}, {"x": 17, "y": 111}], "deviations": [{"x": 57, "y": 112}, {"x": 30, "y": 116}]},
        {"bitmapId": 151, "corners": [{"x": 58, "y": 15}, {"x": 54, "y": 138}], "deviations": [{"x": 58, "y": 123}], "feedback": "hook"},
        {"bitmapId": 152, "corners": [{"x": 45, "y": 14}, {"x": 46, "y": 84.80197802518316}, {"x": 16, "y": 67}], "deviations": [{"x": 45, "y": 53}, {"x": 19, "y": 71}]},
        {"bitmapId": 152, "corners": [{"x": 46, "y": 9}, {"x": 45, "y": 75}], "deviations": [{"x": 45, "y": 36}], "feedback": "hook"},
        {"bitmapId": 153, "corners": [{"x": 29, "y": 21}, {"x": 18.61582275728056, "y": 359.76835448543886}, {"x": 88, "y": 305}], "deviations": [{"x": 30, "y": 293}, {"x": 23, "y": 353}]},
        {"bitmapId": 154, "corners": [{"x": 45, "y": 22}, {"x": 19, "y": 292.3671750294021}, {"x": 117, "y": 239}], "deviations": [{"x": 44, "y": 125}, {"x": 18, "y": 296}]},
        {"bitmapId": 155, "corners": [{"x": 52, "y": 20}, {"x": 31, "y": 258.564740632088}, {"x": 140, "y": 197}], "deviations": [{"x": 53, "y": 157}, {"x": 44, "y": 248}]},
        {"bitmapId": 156, "corners": [{"x": 37, "y": 19}, {"x": 31, "y": 187.77102392093067}, {"x": 153, "y": 81}], "deviations": [{"x": 33, "y": 177}, {"x": 112, "y": 124}]},
        {"bitmapId": 157, "corners": [{"x": 37, "y": 17}, {"x": 27, "y": 174.88718348448256}, {"x": 96, "y": 129}], "deviations": [{"x": 36, "y": 137}, {"x": 70, "y": 141}]},
        {"bitmapId": 158, "corners": [{"x": 40, "y": 20}, {"x": 35, "y": 146.48772377314444}, {"x": 126, "y": 92}], "deviations": [{"x": 41, "y": 117}, {"x": 118, "y": 98}]},
        {"bitmapId": 159, "corners": [{"x": 34, "y": 17}, {"x": 35, "y": 150.93050372311586}, {"x": 124, "y": 112}], "deviations": [{"x": 39, "y": 49}, {"x": 73, "y": 130}]},
        {"bitmapId": 160, "corners": [{"x": 19, "y": 17}, {"x": 22, "y": 147.61309015412363}, {"x": 91, "y": 99}], "deviations": [{"x": 19, "y": 117}, {"x": 38, "y": 139}]},
        {"bitmapId": 161, "corners": [{"x": 45, "y": 22}, {"x": 34, "y": 345.36683401222035}, {"x": 319, "y": 324}], "deviations": [{"x": 46, "y": 212}, {"x": 37, "y": 349}]},
        {"bitmapId": 162, "corners": [{"x": 26, "y": 15}, {"x": 43.50991818934711, "y": 277.74504090532645}, {"x": 258, "y": 251}], "deviations": [{"x": 37, "y": 278}, {"x": 153, "y": 258}]},
        {"bitmapId": 163, "corners": [{"x": 32, "y": 21}, {"x": 28, "y": 305.0594159864779}, {"x": 167, "y": 272}], "deviations": [{"x": 36, "y": 121}, {"x": 28, "y": 308}]},
        {"bitmapId": 164, "corners": [{"x": 22, "y": 10}, {"x": 25.05404418657408, "y": 155}, {"x": 137, "y": 139}], "deviations": [{"x": 23, "y": 155}, {"x": 44, "y": 149}]},
        {"bitmapId": 165, "corners": [{"x": 17, "y": 14}, {"x": 26, "y": 221.49490630228613}, {"x": 119, "y": 207}], "deviations": [{"x": 23, "y": 50}, {"x": 29, "y": 223}]},
        {"bitmapId": 166, "corners": [{"x": 86, "y": 25}, {"x": 28, "y": 269.22527964162646}, {"x": 300, "y": 277}], "deviations": [{"x": 54, "y": 187}, {"x": 232, "y": 262}]},
        {"bitmapId": 167, "corners": [{"x": 90, "y": 24}, {"x": 38.05084397153728, "y": 216}, {"x": 287, "y": 223}], "deviations": [{"x": 87, "y": 24}, {"x": 230, "y": 214}]},
        {"bitmapId": 168, "corners": [{"x": 32, "y": 18}, {"x": 39.70223561628606, "y": 143}, {"x": 310, "y": 97}], "deviations": [{"x": 38, "y": 50}, {"x": 162, "y": 112}]},
        {"bitmapId": 169, "corners": [{"x": 31, "y": 18}, {"x": 25.054225043423827, "y": 106}, {"x": 274, "y": 65}], "deviations": [{"x": 33, "y": 51}, {"x": 152, "y": 77}]},
        {"bitmapId": 170, "corners": [{"x": 32, "y": 11}, {"x": 22.275683470047817, "y": 75}, {"x": 258, "y": 43}], "deviations": [{"x": 23, "y": 58}, {"x": 121, "y": 65}]},
        {"bitmapId": 171, "corners": [{"x": 29, "y": 15}, {"x": 30.54302627967627, "y": 104}, {"x": 208, "y": 74}], "deviations": [{"x": 29, "y": 103}, {"x": 187, "y": 74}]},
        {"bitmapId": 172, "corners": [{"x": 36, "y": 17}, {"x": 20, "y": 76.18282102658914}, {"x": 207, "y": 50}], "deviations": [{"x": 23, "y": 71}, {"x": 46, "y": 79}]},
        {"bitmapId": 173, "corners": [{"x": 21, "y": 9}, {"x": 17.198548553429184, "y": 62}, {"x": 103, "y": 36}], "deviations": [{"x": 20, "y": 36}, {"x": 68, "y": 43}]},
        {"bitmapId": 174, "corners": [{"x": 31, "y": 17}, {"x": 31, "y": 144.24111462102175}, {"x": 150, "y": 112}], "deviations": [{"x": 31, "y": 82.814369631563}, {"x": 99, "y": 118}]},
        {"bitmapId": 175, "corners": [{"x": 26, "y": 12}, {"x": 11.862294297708242, "y": 123}, {"x": 113, "y": 115}], "deviations": [{"x": 26, "y": 62}, {"x": 38, "y": 123}]},
        {"bitmapId": 176, "corners": [{"x": 26, "y": 20}, {"x": 40.28424446290882, "y": 186.1421222314544}, {"x": 103, "y": 195}], "deviations": [{"x": 27, "y": 152}, {"x": 61, "y": 194}]},
        {"bitmapId": 177, "corners": [{"x": 30, "y": 19}, {"x": 37.019228326256425, "y": 122}, {"x": 102, "y": 131}], "deviations": [{"x": 27, "y": 105}, {"x": 58, "y": 129}]},
        {"bitmapId": 178, "corners": [{"x": 20, "y": 15}, {"x": 28.959005578564284, "y": 65.95900557856429}, {"x": 176, "y": 61}], "deviations": [{"x": 20, "y": 37}, {"x": 131, "y": 73}]},
        {"bitmapId": 179, "corners": [{"x": 83, "y": 24}, {"x": 21.776193494807544, "y": 254.1642902422113}, {"x": 210, "y": 367}], "deviations": [{"x": 21, "y": 237}, {"x": 117, "y": 299}]},
        {"bitmapId": 180, "corners": [{"x": 68, "y": 26}, {"x": 13, "y": 262.4411078958435}, {"x": 129, "y": 338}], "deviations": [{"x": 60, "y": 87}, {"x": 42, "y": 288}]},
        {"bitmapId": 181, "corners": [{"x": 65, "y": 25}, {"x": 13.31291499744991, "y": 159.68708500255008}, {"x": 84, "y": 230}], "deviations": [{"x": 57, "y": 56}, {"x": 42, "y": 179}]},
        {"bitmapId": 182, "corners": [{"x": 48, "y": 18}, {"x": 13, "y": 88.40991331121197}, {"x": 57, "y": 130}], "deviations": [{"x": 32, "y": 40}, {"x": 46, "y": 116}]},
        {"bitmapId": 183, "corners": [{"x": 38, "y": 17}, {"x": 14.501993808258533, "y": 98.25099690412927}, {"x": 145, "y": 173}], "deviations": [{"x": 13, "y": 95}, {"x": 53, "y": 115}]},
        {"bitmapId": 184, "corners": [{"x": 119, "y": 17}, {"x": 19, "y": 250.12440990787903}, {"x": 217, "y": 234}], "deviations": [{"x": 110, "y": 56}, {"x": 47, "y": 252}]},
        {"bitmapId": 185, "corners": [{"x": 221, "y": 22}, {"x": 27.77441236033469, "y": 254.22558763966532}, {"x": 249, "y": 223}], "deviations": [{"x": 172, "y": 93}, {"x": 119, "y": 234}]},
        {"bitmapId": 186, "corners": [{"x": 170, "y": 26}, {"x": 20.072227974050502, "y": 194.9277720259495}, {"x": 293, "y": 155}], "deviations": [{"x": 90, "y": 106}, {"x": 171, "y": 170}]},
        {"bitmapId": 187, "corners": [{"x": 111, "y": 21}, {"x": 33.345669870261446, "y": 159.96299038921566}, {"x": 212, "y": 129}], "deviations": [{"x": 79, "y": 73}, {"x": 114, "y": 141}]},
        {"bitmapId": 188, "corners": [{"x": 123, "y": 21}, {"x": 39.75284482413547, "y": 153.24715517586452}, {"x": 229, "y": 112}], "deviations": [{"x": 65, "y": 120}, {"x": 171, "y": 129}]},
        {"bitmapId": 189, "corners": [{"x": 108, "y": 18}, {"x": 35, "y": 119.43846196206465}, {"x": 228, "y": 93}], "deviations": [{"x": 95, "y": 42}, {"x": 91, "y": 116}]},
        {"bitmapId": 190, "corners": [{"x": 143, "y": 30}, {"x": 28, "y": 211.71831900445486}, {"x": 169, "y": 199}], "deviations": [{"x": 108, "y": 98}, {"x": 66, "y": 213}]},
        {"bitmapId": 191, "corners": [{"x": 85, "y": 22}, {"x": 24.156136655579097, "y": 207}, {"x": 142, "y": 185}], "deviations": [{"x": 75, "y": 75}, {"x": 99, "y": 189}]},
        {"bitmapId": 192, "corners": [{"x": 85, "y": 21}, {"x": 17.110774738774694, "y": 150}, {"x": 93, "y": 132}], "deviations": [{"x": 37, "y": 105}, {"x": 32, "y": 150}]},
        {"bitmapId": 193, "corners": [{"x": 68, "y": 17}, {"x": 28, "y": 143.76114962040964}, {"x": 118, "y": 112}], "deviations": [{"x": 53, "y": 82}, {"x": 83, "y": 129}]},
        {"bitmapId": 194, "corners": [{"x": 72, "y": 16}, {"x": 20.41811219111986, "y": 112}, {"x": 97, "y": 112}], "deviations": [{"x": 65, "y": 37}, {"x": 59, "y": 111}]},
        {"bitmapId": 195, "corners": [{"x": 80, "y": 12}, {"x": 32.06729609447371, "y": 123}, {"x": 176, "y": 92}], "deviations": [{"x": 70, "y": 48}, {"x": 75, "y": 110}]},
        {"bitmapId": 196, "corners": [{"x": 175, "y": 23}, {"x": 26, "y": 146.23471698875312}, {"x": 205, "y": 129}], "deviations": [{"x": 150, "y": 54}, {"x": 34, "y": 148}]},
        {"bitmapId": 197, "corners": [{"x": 144, "y": 22}, {"x": 17.16516780858318, "y": 125}, {"x": 174, "y": 105}], "deviations": [{"x": 96, "y": 72}, {"x": 126, "y": 108}]},
        {"bitmapId": 198, "corners": [{"x": 116, "y": 15}, {"x": 19, "y": 167.31488237748752}, {"x": 102, "y": 137}], "deviations": [{"x": 49, "y": 113}, {"x": 32, "y": 158}]},
        {"bitmapId": 199, "corners": [{"x": 103, "y": 20}, {"x": 18.262635602454573, "y": 142.47472879509084}, {"x": 152, "y": 105}], "deviations": [{"x": 29, "y": 122}, {"x": 89, "y": 119}]},
        {"bitmapId": 200, "corners": [{"x": 89, "y": 18}, {"x": 24.38252803905029, "y": 122}, {"x": 152, "y": 92}], "deviations": [{"x": 73, "y": 52}, {"x": 88, "y": 113}]},
        {"bitmapId": 201, "corners": [{"x": 90, "y": 28}, {"x": 19.22342771383248, "y": 82.88828614308377}, {"x": 105, "y": 95}], "deviations": [{"x": 43, "y": 62}, {"x": 26, "y": 87}]},
        {"bitmapId": 202, "corners": [{"x": 20, "y": 13}, {"x": 21.314802332371084, "y": 103}, {"x": 121, "y": 50}], "deviations": [{"x": 20, "y": 103}, {"x": 52, "y": 83}]},
        {"bitmapId": 203, "corners": [{"x": 15, "y": 8}, {"x": 16, "y": 82.46875638015537}, {"x": 60, "y": 50}], "deviations": [{"x": 15, "y": 83}, {"x": 42, "y": 61}]},
        {"bitmapId": 204, "corners": [{"x": 23, "y": 19}, {"x": 23, "y": 85.67635450442683}, {"x": 86, "y": 52}], "deviations": [{"x": 23, "y": 58.08613884742259}, {"x": 45, "y": 67}]},
        {"bitmapId": 205, "corners": [{"x": 23, "y": 21}, {"x": 192.6425252468284, "y": 387.64252524682837}, {"x": 204, "y": 343}], "deviations": [{"x": 73, "y": 266}, {"x": 200, "y": 370}]},
        {"bitmapId": 206, "corners": [{"x": 22, "y": 21}, {"x": 153.82299473608126, "y": 265.8229947360813}, {"x": 166, "y": 207}], "deviations": [{"x": 65, "y": 181}, {"x": 156, "y": 247}]},
        {"bitmapId": 207, "corners": [{"x": 28, "y": 9}, {"x": 225.39757253179482, "y": 198}, {"x": 222, "y": 156}], "deviations": [{"x": 107, "y": 136}, {"x": 224, "y": 168}]},
        {"bitmapId": 208, "corners": [{"x": 14, "y": 14}, {"x": 37.287936304037096, "y": 328}, {"x": 13, "y": 306}], "deviations": [{"x": 68, "y": 101}, {"x": 32, "y": 321}]},
        {"bitmapId": 209, "corners": [{"x": 67, "y": 17}, {"x": 55.908156290546856, "y": 358.95407814527346}, {"x": 19, "y": 330}], "deviations": [{"x": 89, "y": 249}, {"x": 24, "y": 336}]},
        {"bitmapId": 210, "corners": [{"x": 8, "y": 6}, {"x": 65.98873871702868, "y": 235}, {"x": 20, "y": 212}], "deviations": [{"x": 87, "y": 95}, {"x": 57, "y": 233}]},
        {"bitmapId": 211, "corners": [{"x": 70, "y": 14}, {"x": 72.64771297613271, "y": 202.82385648806635}, {"x": 27, "y": 169}], "deviations": [{"x": 85, "y": 90}, {"x": 59, "y": 191}]},
        {"bitmapId": 212, "corners": [{"x": 45, "y": 11}, {"x": 64.8247272605026, "y": 179}, {"x": 18, "y": 155}], "deviations": [{"x": 71, "y": 53}, {"x": 28, "y": 162}]},
        {"bitmapId": 213, "corners": [{"x": 31, "y": 8}, {"x": 43.98078831672929, "y": 143}, {"x": 8, "y": 120}], "deviations": [{"x": 52, "y": 37}, {"x": 31, "y": 139}]},
        {"bitmapId": 214, "corners": [{"x": 18, "y": 10}, {"x": 65, "y": 156.4312858757338}, {"x": 24, "y": 142}], "deviations": [{"x": 72, "y": 79}, {"x": 63, "y": 158}]},
        {"bitmapId": 215, "corners": [{"x": 23, "y": 8}, {"x": 64.08495431689092, "y": 104}, {"x": 15, "y": 82}], "deviations": [{"x": 62, "y": 50}, {"x": 52, "y": 100}]},
        {"bitmapId": 216, "corners": [{"x": 36, "y": 9}, {"x": 63, "y": 81.86579312561075}, {"x": 19, "y": 74}], "deviations": [{"x": 57, "y": 41}, {"x": 53, "y": 84}]},
        {"bitmapId": 217, "corners": [{"x": 12, "y": 12}, {"x": 245.9593811920934, "y": 127}, {"x": 200, "y": 52}], "deviations": [{"x": 79, "y": 122}, {"x": 245, "y": 120}]},
        {"bitmapId": 218, "corners": [{"x": 8, "y": 5}, {"x": 210, "y": 91.86673069459982}, {"x": 187, "y": 32}], "deviations": [{"x": 62, "y": 85}, {"x": 211, "y": 86}]},
        {"bitmapId": 219, "corners": [{"x": 9, "y": 7}, {"x": 234, "y": 92.48417686631883}, {"x": 189, "y": 33}], "deviations": [{"x": 90, "y": 95}, {"x": 212, "y": 70}]},
        {"bitmapId": 220, "corners": [{"x": 3, "y": 5}, {"x": 151, "y": 74.9629787103277}, {"x": 128, "y": 16}], "deviations": [{"x": 62, "y": 60}, {"x": 142, "y": 62}]},
        {"bitmapId": 221, "corners": [{"x": 8, "y": 52}, {"x": 246, "y": 22.580923162103772}, {"x": 260.232830261199, "y": 381}, {"x": 209, "y": 352}], "deviations": [{"x": 178, "y": 26}, {"x": 259, "y": 250}, {"x": 236, "y": 363}]},
        {"bitmapId": 222, "corners": [{"x": 12, "y": 45}, {"x": 268.624409882519, "y": 32.45853003916034}, {"x": 277.37229126942105, "y": 369.5292184520658}, {"x": 237, "y": 341}], "deviations": [{"x": 109, "y": 34}, {"x": 280, "y": 146}, {"x": 242, "y": 343}]},
        {"bitmapId": 223, "corners": [{"x": 12, "y": 42}, {"x": 226.38760928451723, "y": 19.775218569034465}, {"x": 233.98442106191007, "y": 369.99221053095505}, {"x": 162, "y": 337}], "deviations": [{"x": 200, "y": 19}, {"x": 234, "y": 63}, {"x": 222, "y": 363}]},
        {"bitmapId": 224, "corners": [{"x": 14, "y": 49}, {"x": 258, "y": 29.189447374997876}, {"x": 265.03383067058144, "y": 336.96616932941856}, {"x": 208, "y": 313}], "deviations": [{"x": 141, "y": 28}, {"x": 267, "y": 107}, {"x": 254, "y": 336}]},
        {"bitmapId": 225, "corners": [{"x": 6, "y": 48}, {"x": 205.37387893333613, "y": 21}, {"x": 208.35817284442567, "y": 264}, {"x": 152, "y": 247}], "deviations": [{"x": 72, "y": 31}, {"x": 209, "y": 78}, {"x": 199, "y": 263}]},
        {"bitmapId": 226, "corners": [{"x": 8, "y": 38}, {"x": 165.75004305525124, "y": 18}, {"x": 113, "y": 386.08930249318956}, {"x": 68, "y": 359}], "deviations": [{"x": 131, "y": 18}, {"x": 167, "y": 207}, {"x": 108, "y": 387}]},
        {"bitmapId": 227, "corners": [{"x": 19, "y": 33}, {"x": 144.74309891982585, "y": 20}, {"x": 157.2287026635626, "y": 389}, {"x": 100, "y": 344}], "deviations": [{"x": 49, "y": 33}, {"x": 154, "y": 49}, {"x": 147, "y": 384}]},
        {"bitmapId": 228, "corners": [{"x": 6, "y": 41}, {"x": 180.0761795924941, "y": 22.304718369976364}, {"x": 192.21086491430694, "y": 348.6054324571535}, {"x": 148, "y": 313}], "deviations": [{"x": 125, "y": 22}, {"x": 196, "y": 117}, {"x": 184, "y": 344}]},
        {"bitmapId": 229, "corners": [{"x": 15, "y": 23}, {"x": 103.84689081491868, "y": 19}, {"x": 108.72405481271512, "y": 328}, {"x": 55, "y": 310}], "deviations": [{"x": 55, "y": 19}, {"x": 115, "y": 68}, {"x": 104, "y": 328}]},
        {"bitmapId": 230, "corners": [{"x": 8, "y": 36}, {"x": 130, "y": 20.635484542437457}, {"x": 140, "y": 266.8765054406953}, {"x": 88, "y": 241}], "deviations": [{"x": 42, "y": 35}, {"x": 140, "y": 155}, {"x": 128, "y": 265}]},
        {"bitmapId": 231, "corners": [{"x": 12, "y": 60}, {"x": 322.3810179108045, "y": 26.563502985134082}, {"x": 292, "y": 280.58478336123545}, {"x": 238, "y": 257}], "deviations": [{"x": 183, "y": 31}, {"x": 328, "y": 31}, {"x": 286, "y": 282}]},
        {"bitmapId": 232, "corners": [{"x": 11, "y": 60}, {"x": 318, "y": 33.19703704226673}, {"x": 297.19932815448703, "y": 242}, {"x": 270, "y": 221}], "deviations": [{"x": 203, "y": 29}, {"x": 307, "y": 193}, {"x": 293, "y": 241}]},
        {"bitmapId": 233, "corners": [{"x": 9, "y": 57}, {"x": 285.8161910541067, "y": 26}, {"x": 248.25010393078253, "y": 260}, {"x": 223, "y": 219}], "deviations": [{"x": 192, "y": 26}, {"x": 286, "y": 61}, {"x": 241, "y": 251}]},
        {"bitmapId": 234, "corners": [{"x": 10, "y": 57}, {"x": 335, "y": 33.34928252554787}, {"x": 294.9578219881523, "y": 208.95782198815232}, {"x": 254, "y": 174}], "deviations": [{"x": 113, "y": 37}, {"x": 305, "y": 188}, {"x": 281, "y": 195}]},
        {"bitmapId": 235, "corners": [{"x": 10, "y": 50}, {"x": 296.80070073688256, "y": 19}, {"x": 290.43179561822654, "y": 204.56820438177346}, {"x": 224, "y": 182}], "deviations": [{"x": 251, "y": 20}, {"x": 297, "y": 182}, {"x": 239, "y": 184}]},
        {"bitmapId": 236, "corners": [{"x": 16, "y": 43}, {"x": 280.7041629158495, "y": 21}, {"x": 229.56572493496867, "y": 177}, {"x": 188, "y": 138}], "deviations": [{"x": 197, "y": 18}, {"x": 260, "y": 114}, {"x": 199, "y": 143}]},
        {"bitmapId": 237, "corners": [{"x": 17, "y": 42}, {"x": 222, "y": 16.83363509871001}, {"x": 199, "y": 99.84191391768978}, {"x": 152, "y": 77}], "deviations": [{"x": 178, "y": 16}, {"x": 201, "y": 96}, {"x": 173, "y": 90}]},
        {"bitmapId": 238, "corners": [{"x": 21, "y": 57}, {"x": 253, "y": 22.177142706393585}, {"x": 209.14047325298804, "y": 198.5785802410358}, {"x": 150, "y": 169}], "deviations": [{"x": 142, "y": 33}, {"x": 247, "y": 83}, {"x": 201, "y": 199}]},
        {"bitmapId": 239, "corners": [{"x": 14, "y": 50}, {"x": 243.79134298119342, "y": 24.417314037613153}, {"x": 207, "y": 176.8247869348205}, {"x": 183, "y": 164}], "deviations": [{"x": 167, "y": 23}, {"x": 231, "y": 64}, {"x": 206, "y": 178}]},
        {"bitmapId": 240, "corners": [{"x": 7, "y": 51}, {"x": 217, "y": 19.910869931183072}, {"x": 186.9794722846835, "y": 140.98631485645566}, {"x": 161, "y": 122}], "deviations": [{"x": 154, "y": 17}, {"x": 214, "y": 57}, {"x": 170, "y": 127}]},
        {"bitmapId": 241, "corners": [{"x": 12, "y": 45}, {"x": 209, "y": 25.378557732998583}, {"x": 189.51738002850453, "y": 156.75869001425227}, {"x": 162, "y": 139}], "deviations": [{"x": 130, "y": 27}, {"x": 209, "y": 45}, {"x": 166, "y": 139}]},
        {"bitmapId": 242, "corners": [{"x": 9, "y": 47}, {"x": 204.50182487023685, "y": 17}, {"x": 207, "y": 222.70183087407935}, {"x": 172, "y": 197}], "deviations": [{"x": 168, "y": 19}, {"x": 207, "y": 17}, {"x": 204, "y": 225}]},
        {"bitmapId": 243, "corners": [{"x": 10, "y": 48}, {"x": 211.4272990168189, "y": 20}, {"x": 195.0098338749882, "y": 194}, {"x": 163, "y": 164}], "deviations": [{"x": 81, "y": 32}, {"x": 215, "y": 57}, {"x": 167, "y": 165}]},
        {"bitmapId": 244, "corners": [{"x": 14, "y": 43}, {"x": 206.21014822930076, "y": 24.420296458601513}, {"x": 213.4211599244557, "y": 151.71057996222785}, {"x": 173, "y": 138}], "deviations": [{"x": 166, "y": 23}, {"x": 215, "y": 130}, {"x": 188, "y": 141}]},
        {"bitmapId": 245, "corners": [{"x": 8, "y": 37}, {"x": 215, "y": 22.280766075463298}, {"x": 198.1954827826234, "y": 120.39849426087447}, {"x": 172, "y": 106}], "deviations": [{"x": 146, "y": 19}, {"x": 202, "y": 119}, {"x": 177, "y": 106}]},
        {"bitmapId": 246, "corners": [{"x": 10, "y": 27}, {"x": 178, "y": 14.082304535811385}, {"x": 159.69429499444755, "y": 67}, {"x": 134, "y": 51}], "deviations": [{"x": 60, "y": 28}, {"x": 176, "y": 27}, {"x": 145, "y": 57}]},
        {"bitmapId": 247, "corners": [{"x": 17, "y": 37}, {"x": 148, "y": 21.587967022274604}, {"x": 110.6268062885925, "y": 127}, {"x": 80, "y": 105}], "deviations": [{"x": 75, "y": 27}, {"x": 131, "y": 95}, {"x": 101, "y": 125}]},
        {"bitmapId": 248, "corners": [{"x": 11, "y": 40}, {"x": 197, "y": 29.554803195266132}, {"x": 167.43588071193284, "y": 238.43588071193284}, {"x": 143, "y": 220}], "deviations": [{"x": 196, "y": 27}, {"x": 189, "y": 168}, {"x": 152, "y": 225}]},
        {"bitmapId": 249, "corners": [{"x": 5, "y": 46}, {"x": 197.64278603182828, "y": 18}, {"x": 179.6192059299158, "y": 222}, {"x": 141, "y": 198}], "deviations": [{"x": 77, "y": 32}, {"x": 192, "y": 162}, {"x": 171, "y": 220}]},
        {"bitmapId": 250, "corners": [{"x": 17, "y": 52}, {"x": 251.7844158164897, "y": 20}, {"x": 207.76988047960288, "y": 263}, {"x": 145, "y": 242}], "deviations": [{"x": 180, "y": 25}, {"x": 256, "y": 106}, {"x": 202, "y": 264}]},
        {"bitmapId": 251, "corners": [{"x": 35, "y": 41}, {"x": 229, "y": 21.61186408760127}, {"x": 149.02790965634864, "y": 347}, {"x": 99, "y": 313}], "deviations": [{"x": 164, "y": 20}, {"x": 197, "y": 254}, {"x": 115, "y": 320}]},
        {"bitmapId": 252, "corners": [{"x": 13, "y": 33}, {"x": 183.7415075150705, "y": 24.258492484929505}, {"x": 133.75681691009117, "y": 230}, {"x": 100, "y": 203}], "deviations": [{"x": 93, "y": 24}, {"x": 171, "y": 134}, {"x": 119, "y": 221}]},
        {"bitmapId": 253, "corners": [{"x": 12, "y": 39}, {"x": 134.03838947318425, "y": 14}, {"x": 111.76976414502256, "y": 196.8848820725113}, {"x": 69, "y": 160}], "deviations": [{"x": 65, "y": 24}, {"x": 130, "y": 126}, {"x": 88, "y": 173}]},
        {"bitmapId": 254, "corners": [{"x": 19, "y": 46}, {"x": 173, "y": 27.842560670294308}, {"x": 113.66806119544357, "y": 234}, {"x": 69, "y": 206}], "deviations": [{"x": 171, "y": 23}, {"x": 154, "y": 137}, {"x": 109, "y": 236}]},
        {"bitmapId": 255, "corners": [{"x": 21, "y": 41}, {"x": 170.28641560408772, "y": 22}, {"x": 116.47390180610684, "y": 188.7369509030534}, {"x": 91, "y": 161}], "deviations": [{"x": 38, "y": 36}, {"x": 156, "y": 113}, {"x": 93, "y": 162}]},
        {"bitmapId": 256, "corners": [{"x": 20, "y": 37}, {"x": 142.01004804013024, "y": 19}, {"x": 99.39275442240397, "y": 272}, {"x": 63, "y": 257}], "deviations": [{"x": 97, "y": 22}, {"x": 129, "y": 191}, {"x": 76, "y": 264}]},
        {"bitmapId": 257, "corners": [{"x": 7, "y": 36}, {"x": 116.24255414199234, "y": 17}, {"x": 126, "y": 220.83857782389305}, {"x": 85, "y": 204}], "deviations": [{"x": 24, "y": 35}, {"x": 127, "y": 92}, {"x": 120, "y": 223}]},
        {"bitmapId": 258, "corners": [{"x": 11, "y": 34}, {"x": 96, "y": 16.28715416814739}, {"x": 98.80930149780038, "y": 199}, {"x": 62, "y": 176}], "deviations": [{"x": 93, "y": 14}, {"x": 100, "y": 95}, {"x": 92, "y": 196}]},
        {"bitmapId": 259, "corners": [{"x": 14, "y": 38}, {"x": 150, "y": 19.93846587846126}, {"x": 152.85806493705996, "y": 227}, {"x": 125, "y": 193}], "deviations": [{"x": 88, "y": 23}, {"x": 153, "y": 37}, {"x": 149, "y": 227}]},
        {"bitmapId": 260, "corners": [{"x": 2, "y": 32}, {"x": 139, "y": 19.888979992712514}, {"x": 139.1543423379353, "y": 155}, {"x": 117, "y": 147}], "deviations": [{"x": 69, "y": 31}, {"x": 139, "y": 120}, {"x": 132, "y": 155}]},
        {"bitmapId": 261, "corners": [{"x": 8, "y": 33}, {"x": 111, "y": 20.692380241722145}, {"x": 95.4199823904062, "y": 198.5800176095938}, {"x": 71, "y": 180}], "deviations": [{"x": 63, "y": 29}, {"x": 110, "y": 135}, {"x": 92, "y": 199}]},
        {"bitmapId": 262, "corners": [{"x": 7, "y": 27}, {"x": 92.31970702026689, "y": 16}, {"x": 82.76428451546131, "y": 253}, {"x": 64, "y": 236}], "deviations": [{"x": 53, "y": 20}, {"x": 93, "y": 128}, {"x": 78, "y": 253}]},
        {"bitmapId": 263, "corners": [{"x": 9, "y": 25}, {"x": 93, "y": 14.876544819424602}, {"x": 86.62840936096345, "y": 159.8142046804817}, {"x": 62, "y": 136}], "deviations": [{"x": 38, "y": 23}, {"x": 90, "y": 33}, {"x": 78, "y": 154}]},
        {"bitmapId": 264, "corners": [{"x": 9, "y": 37}, {"x": 135.3741537314827, "y": 19}, {"x": 123.61178149017768, "y": 113}, {"x": 106, "y": 104}], "deviations": [{"x": 54, "y": 26}, {"x": 136, "y": 57}, {"x": 116, "y": 111}]},
        {"bitmapId": 265, "corners": [{"x": 7, "y": 25}, {"x": 71.48234110558344, "y": 13}, {"x": 73.09742543288328, "y": 124}, {"x": 52, "y": 108}], "deviations": [{"x": 27, "y": 24}, {"x": 75, "y": 77}, {"x": 61, "y": 118}]},
        {"bitmapId": 266, "corners": [{"x": 7, "y": 37}, {"x": 130, "y": 21.551838731581256}, {"x": 96.99078289826373, "y": 132.66359429942122}, {"x": 79, "y": 119}], "deviations": [{"x": 70, "y": 23}, {"x": 114, "y": 85}, {"x": 84, "y": 121}]},
        {"bitmapId": 267, "corners": [{"x": 12, "y": 19}, {"x": 76, "y": 21.72312592794416}, {"x": 54.16643168979278, "y": 118.83356831020723}, {"x": 34, "y": 106}], "deviations": [{"x": 57, "y": 19}, {"x": 58, "y": 94}, {"x": 50, "y": 118}]},
        {"bitmapId": 268, "corners": [{"x": 8, "y": 33}, {"x": 119.17677357964222, "y": 13}, {"x": 104.63573064313984, "y": 126}, {"x": 72, "y": 105}], "deviations": [{"x": 68, "y": 20}, {"x": 121, "y": 42}, {"x": 93, "y": 123}]},
        {"bitmapId": 269, "corners": [{"x": 11, "y": 34}, {"x": 110.05284715769751, "y": 13}, {"x": 86.69305594296084, "y": 112}, {"x": 52, "y": 95}], "deviations": [{"x": 57, "y": 20}, {"x": 105, "y": 83}, {"x": 84, "y": 112}]},
        {"bitmapId": 270, "corners": [{"x": 11, "y": 37}, {"x": 108, "y": 22.565506192268806}, {"x": 66.14327917328781, "y": 142.5716395866439}, {"x": 40, "y": 123}], "deviations": [{"x": 29, "y": 36}, {"x": 96, "y": 90}, {"x": 50, "y": 129}]},
        {"bitmapId": 271, "corners": [{"x": 27, "y": 7}, {"x": 145, "y": 24.0961829007521}, {"x": 63.657876449467054, "y": 226}, {"x": 20, "y": 192}], "deviations": [{"x": 120, "y": 17}, {"x": 116, "y": 136}, {"x": 29, "y": 202}]},
        {"bitmapId": 272, "corners": [{"x": 44, "y": 12}, {"x": 133, "y": 39.49138927666331}, {"x": 65.10849301710277, "y": 212}, {"x": 11, "y": 181}], "deviations": [{"x": 59, "y": 19}, {"x": 108, "y": 146}, {"x": 55, "y": 209}]},
        {"bitmapId": 273, "corners": [{"x": 56, "y": 9}, {"x": 105, "y": 23.236639530872672}, {"x": 43.91674781900948, "y": 179}, {"x": 7, "y": 151}], "deviations": [{"x": 69, "y": 10}, {"x": 79, "y": 118}, {"x": 18, "y": 158}]},
        {"bitmapId": 274, "corners": [{"x": 33, "y": 9}, {"x": 109, "y": 28.066271772815824}, {"x": 47.551359876913146, "y": 161.55135987691315}, {"x": 20, "y": 129}], "deviations": [{"x": 69, "y": 15}, {"x": 76, "y": 117}, {"x": 25, "y": 135}]},
        {"bitmapId": 275, "corners": [{"x": 24, "y": 143}, {"x": 307, "y": 12.131595593131793}, {"x": 270, "y": 163.76005576600014}, {"x": 241, "y": 145}], "deviations": [{"x": 138, "y": 97}, {"x": 274, "y": 139}, {"x": 267, "y": 164}]},
        {"bitmapId": 276, "corners": [{"x": 22, "y": 114}, {"x": 230, "y": 18.66870690500215}, {"x": 206, "y": 150.5453250968367}, {"x": 168, "y": 132}], "deviations": [{"x": 140, "y": 56}, {"x": 214, "y": 120}, {"x": 200, "y": 151}]},
        {"bitmapId": 277, "corners": [{"x": 19, "y": 46}, {"x": 120.17268545308198, "y": 20.413657273459005}, {"x": 106, "y": 198.9892365324689}, {"x": 175, "y": 151}], "deviations": [{"x": 49, "y": 43}, {"x": 116, "y": 46}, {"x": 121, "y": 182}]},
        {"bitmapId": 278, "corners": [{"x": 11, "y": 30}, {"x": 62.29328717819362, "y": 14}, {"x": 64, "y": 124.3448935923812}, {"x": 110, "y": 75}], "deviations": [{"x": 26, "y": 28}, {"x": 64, "y": 14}, {"x": 101, "y": 84}]},
        {"bitmapId": 279, "corners": [{"x": 10, "y": 36}, {"x": 116, "y": 19.28628214264874}, {"x": 117.8479906919841, "y": 131.8479906919841}, {"x": 198, "y": 139}], "deviations": [{"x": 59, "y": 25}, {"x": 110, "y": 114}, {"x": 128, "y": 137}]},
        {"bitmapId": 280, "corners": [{"x": 32, "y": 28}, {"x": 51.83929883656983, "y": 365.4196494182849}, {"x": 238, "y": 361.0726437884156}, {"x": 238, "y": 299}], "deviations": [{"x": 25, "y": 309}, {"x": 185, "y": 378}, {"x": 239, "y": 361}]},
        {"bitmapId": 281, "corners": [{"x": 35, "y": 21}, {"x": 38.07576330867518, "y": 321}, {"x": 190.13773997622576, "y": 333}, {"x": 196, "y": 251}], "deviations": [{"x": 31, "y": 308}, {"x": 75, "y": 337}, {"x": 193, "y": 332}]},
        {"bitmapId": 282, "corners": [{"x": 32, "y": 29}, {"x": 57.15985554854505, "y": 290.15985554854507}, {"x": 279.6461407879463, "y": 286.53078881808057}, {"x": 282, "y": 225}], "deviations": [{"x": 38, "y": 226}, {"x": 223, "y": 306}, {"x": 282, "y": 265}], "contains": [121, 179]},
        {"bitmapId": 283, "corners": [{"x": 15, "y": 15}, {"x": 29.98246116650804, "y": 199.9649223330161}, {"x": 327.0004196177853, "y": 193.9995803822147}, {"x": 333, "y": 148}], "deviations": [{"x": 13, "y": 151}, {"x": 236, "y": 229}, {"x": 333, "y": 166}], "contains": [121, 179]},
        {"bitmapId": 284, "corners": [{"x": 29, "y": 17}, {"x": 40, "y": 198.35230961767027}, {"x": 324, "y": 221.51201165376727}, {"x": 325, "y": 167}], "deviations": [{"x": 30, "y": 169}, {"x": 150, "y": 239}, {"x": 324, "y": 188}], "contains": [249, 60]},
        {"bitmapId": 285, "corners": [{"x": 17, "y": 22}, {"x": 27.3957637896545, "y": 163.3957637896545}, {"x": 232.8808704328404, "y": 171.55956478357982}, {"x": 239, "y": 124}], "deviations": [{"x": 13, "y": 130}, {"x": 102, "y": 189}, {"x": 239, "y": 152}], "contains": [249, 61]},
        {"bitmapId": 286, "corners": [{"x": 22, "y": 28}, {"x": 39.021492965260805, "y": 167.5053732413152}, {"x": 200.67827659523041, "y": 169}, {"x": 206, "y": 96}], "deviations": [{"x": 18, "y": 140}, {"x": 80, "y": 178}, {"x": 205, "y": 148}], "contains": [118, 60]},
        {"bitmapId": 287, "corners": [{"x": 15, "y": 22}, {"x": 28.834617589225807, "y": 102}, {"x": 169.60969210970887, "y": 94.39030789029114}, {"x": 168, "y": 31}], "deviations": [{"x": 16, "y": 72}, {"x": 119, "y": 110}, {"x": 171, "y": 31}], "contains": [70, 35]},
        {"bitmapId": 288, "corners": [{"x": 14, "y": 15}, {"x": 26, "y": 92.34332083240749}, {"x": 125.20646995838717, "y": 99.79353004161283}, {"x": 131, "y": 54}], "deviations": [{"x": 14, "y": 62}, {"x": 62, "y": 106}, {"x": 130, "y": 78}]},
        {"bitmapId": 289, "corners": [{"x": 17, "y": 13}, {"x": 22.851468520778106, "y": 169.85146852077813}, {"x": 128.46799606491888, "y": 171.06400787016224}, {"x": 130, "y": 135}], "deviations": [{"x": 11, "y": 153}, {"x": 59, "y": 180}, {"x": 130, "y": 170}], "contains": [50, 172]},
        {"bitmapId": 290, "corners": [{"x": 25, "y": 17}, {"x": 13, "y": 138.1936624296488}, {"x": 71.36973314082864, "y": 138.63026685917134}, {"x": 51, "y": 274}], "deviations": [{"x": 22, "y": 19}, {"x": 13, "y": 139}, {"x": 55, "y": 224}], "contains": [162, 159]},
        {"bitmapId": 291, "corners": [{"x": 24, "y": 18}, {"x": 15, "y": 118.62208310505868}, {"x": 112, "y": 109.91257111585712}, {"x": 96, "y": 152}], "deviations": [{"x": 21, "y": 79}, {"x": 30, "y": 123}, {"x": 110, "y": 118}], "contains": [162, 167]},
        {"bitmapId": 292, "corners": [{"x": 20, "y": 12}, {"x": 33.94833891537602, "y": 74.94833891537601}, {"x": 102, "y": 64.1784580446039}, {"x": 100, "y": 113}], "deviations": [{"x": 27, "y": 36}, {"x": 76, "y": 63}, {"x": 100, "y": 90}], "contains": [165, 169]},
        {"bitmapId": 293, "corners": [{"x": 61, "y": 25}, {"x": 17, "y": 270.6373325021897}, {"x": 134.44976502026103, "y": 253}, {"x": 84, "y": 355}], "deviations": [{"x": 42, "y": 182}, {"x": 64, "y": 260}, {"x": 100, "y": 331}], "contains": [165, 169]},
        {"bitmapId": 294, "corners": [{"x": 17, "y": 35}, {"x": 98.94566381928456, "y": 18}, {"x": 106, "y": 166}], "deviations": [{"x": 38, "y": 34}, {"x": 86, "y": 103}]},
        {"bitmapId": 295, "corners": [{"x": 8, "y": 56}, {"x": 213.658084835276, "y": 20}, {"x": 305.4160757277176, "y": 346.4160757277176}, {"x": 317, "y": 278}], "deviations": [{"x": 119, "y": 30}, {"x": 216, "y": 225}, {"x": 312, "y": 349}], "contains": [165, 169]},
        {"bitmapId": 296, "corners": [{"x": 16, "y": 45}, {"x": 147.1303260733646, "y": 21}, {"x": 218.88060001787494, "y": 312}, {"x": 232, "y": 252}], "deviations": [{"x": 135, "y": 26}, {"x": 141, "y": 221}, {"x": 231, "y": 270}]},
        {"bitmapId": 297, "corners": [{"x": 9, "y": 47}, {"x": 129.57524402236717, "y": 25.474918659210935}, {"x": 134.59063901492138, "y": 326}, {"x": 284.4467375458711, "y": 321}, {"x": 285, "y": 275}], "deviations": [{"x": 77, "y": 39}, {"x": 111, "y": 285}, {"x": 224, "y": 336}, {"x": 286, "y": 321}]},
        {"bitmapId": 298, "corners": [{"x": 4, "y": 44}, {"x": 101, "y": 17.77410892824584}, {"x": 204.58293285775738, "y": 273}, {"x": 209, "y": 230}], "deviations": [{"x": 90, "y": 16}, {"x": 83, "y": 223}, {"x": 207, "y": 273}]},
        {"bitmapId": 299, "corners": [{"x": 27, "y": 63}, {"x": 217.7936095451139, "y": 20}, {"x": 346.3130840873614, "y": 286.37383182527714}, {"x": 349, "y": 235}], "deviations": [{"x": 115, "y": 35}, {"x": 220, "y": 223}, {"x": 348, "y": 274}]},
        {"bitmapId": 300, "corners": [{"x": 29, "y": 73}, {"x": 243.8843216830884, "y": 25.115678316911588}, {"x": 231, "y": 249.36716881844538}, {"x": 380.18624185240077, "y": 263.81375814759923}, {"x": 390, "y": 209}], "deviations": [{"x": 70, "y": 70}, {"x": 214, "y": 144}, {"x": 297, "y": 276}, {"x": 384, "y": 261}]},
        {"bitmapId": 301, "corners": [{"x": 19, "y": 60}, {"x": 240.88762737377712, "y": 17}, {"x": 354, "y": 230.82614042330698}, {"x": 356, "y": 177}], "deviations": [{"x": 135, "y": 33}, {"x": 227, "y": 177}, {"x": 354, "y": 200}]},
        {"bitmapId": 302, "corners": [{"x": 15, "y": 54}, {"x": 168.94312865211776, "y": 18.94312865211775}, {"x": 278, "y": 234.59546822419125}, {"x": 278, "y": 195}], "deviations": [{"x": 128, "y": 33}, {"x": 163, "y": 163}, {"x": 278, "y": 196}]},
        {"bitmapId": 303, "corners": [{"x": 22, "y": 41}, {"x": 190.13602367531078, "y": 19}, {"x": 184, "y": 116.24070997838791}, {"x": 294, "y": 137.96064727854895}, {"x": 296, "y": 90}], "deviations": [{"x": 73, "y": 30}, {"x": 172, "y": 52}, {"x": 225, "y": 139}, {"x": 296, "y": 123}]},
        {"bitmapId": 304, "corners": [{"x": 12, "y": 31}, {"x": 95.12036552766185, "y": 17}, {"x": 109.40305000096939, "y": 157.4030500009694}, {"x": 232.78115175171524, "y": 157.0875392993139}, {"x": 235, "y": 111}], "deviations": [{"x": 36, "y": 30}, {"x": 85, "y": 110}, {"x": 194, "y": 165}, {"x": 235, "y": 157}]},
        {"bitmapId": 305, "corners": [{"x": 13, "y": 33}, {"x": 95.43869889334387, "y": 15}, {"x": 162.5728858591285, "y": 204}, {"x": 173, "y": 156}], "deviations": [{"x": 52, "y": 29}, {"x": 96, "y": 154}, {"x": 166, "y": 196}]},
        {"bitmapId": 306, "corners": [{"x": 8, "y": 47}, {"x": 129, "y": 21.900465923890287}, {"x": 204.0176915375054, "y": 183}, {"x": 209, "y": 129}], "deviations": [{"x": 128, "y": 19}, {"x": 117, "y": 122}, {"x": 211, "y": 159}]},
        {"bitmapId": 307, "corners": [{"x": 25, "y": 41}, {"x": 186.882399507992, "y": 25}, {"x": 11.270492360699848, "y": 297.27049236069985}, {"x": 316.8033445244534, "y": 307.1966554755466}, {"x": 308, "y": 239}], "deviations": [{"x": 121, "y": 35}, {"x": 51, "y": 180}, {"x": 87, "y": 338}, {"x": 311, "y": 240}]},
        {"bitmapId": 308, "corners": [{"x": 17, "y": 34}, {"x": 133.9178312560648, "y": 21}, {"x": 19.738377595416303, "y": 228.9535103816652}, {"x": 242.02863098123876, "y": 256.19427380375225}, {"x": 245, "y": 206}], "deviations": [{"x": 124, "y": 24}, {"x": 38, "y": 150}, {"x": 84, "y": 274}, {"x": 245, "y": 255}]},
        {"bitmapId": 309, "corners": [{"x": 18, "y": 40}, {"x": 102, "y": 17.572813654888584}, {"x": 33.810838003301335, "y": 193.20722533553422}, {"x": 247, "y": 184.26433093389508}, {"x": 247, "y": 118}], "deviations": [{"x": 29, "y": 40}, {"x": 32, "y": 126}, {"x": 145, "y": 212}, {"x": 247, "y": 119}]},
        {"bitmapId": 310, "corners": [{"x": 22, "y": 19}, {"x": 14.017230693847065, "y": 190}, {"x": 258, "y": 181.45345877428662}, {"x": 218, "y": 348.88811251600333}, {"x": 179, "y": 325}], "deviations": [{"x": 21, "y": 122}, {"x": 141, "y": 182}, {"x": 256, "y": 232}, {"x": 214, "y": 350}]},
        {"bitmapId": 311, "corners": [{"x": 45, "y": 10}, {"x": 27.018418477049106, "y": 147.9815815229509}, {"x": 221.58027525050736, "y": 129}, {"x": 188.27793652886479, "y": 309.72206347113524}, {"x": 116, "y": 271}], "deviations": [{"x": 25, "y": 144}, {"x": 153, "y": 129}, {"x": 207, "y": 262}, {"x": 181, "y": 310}]},
        {"bitmapId": 312, "corners": [{"x": 18, "y": 14}, {"x": 19.887598608032434, "y": 169}, {"x": 188.07117154054913, "y": 169.07117154054913}, {"x": 149.4921171647042, "y": 320.0157656705916}, {"x": 89, "y": 287}], "deviations": [{"x": 16, "y": 163}, {"x": 188, "y": 169}, {"x": 187, "y": 190}, {"x": 146, "y": 323}]},
        {"bitmapId": 313, "corners": [{"x": 20, "y": 16}, {"x": 18, "y": 141.5016959655128}, {"x": 196, "y": 131.3352411638544}, {"x": 151.88313476346727, "y": 329.94156738173365}, {"x": 110, "y": 302}], "deviations": [{"x": 18, "y": 23}, {"x": 128, "y": 126}, {"x": 157, "y": 326}, {"x": 113, "y": 302}]},
        {"bitmapId": 314, "corners": [{"x": 17, "y": 7}, {"x": 20.179959991908014, "y": 132}, {"x": 115.15638022795572, "y": 116}, {"x": 82.95770254710757, "y": 289}, {"x": 44, "y": 263}], "deviations": [{"x": 17, "y": 131}, {"x": 60, "y": 120}, {"x": 110, "y": 202}, {"x": 57, "y": 275}]},
        {"bitmapId": 315, "corners": [{"x": 70, "y": 23}, {"x": 26, "y": 129.07969167357547}, {"x": 152, "y": 119.62291615588929}, {"x": 82.60499448264127, "y": 309.1975027586794}, {"x": 38, "y": 281}], "deviations": [{"x": 70, "y": 27}, {"x": 111, "y": 116}, {"x": 140, "y": 214}, {"x": 78, "y": 311}]},
        {"bitmapId": 316, "corners": [{"x": 34, "y": 14}, {"x": 25.274082406959945, "y": 76}, {"x": 124.76805663205684, "y": 65.76805663205684}, {"x": 76.84170041524129, "y": 265}, {"x": 44, "y": 244}], "deviations": [{"x": 35, "y": 34}, {"x": 79, "y": 66}, {"x": 115, "y": 138}, {"x": 70, "y": 262}]},
        {"bitmapId": 317, "corners": [{"x": 40, "y": 19}, {"x": 23.285051595772952, "y": 97}, {"x": 120, "y": 96.54030598873884}, {"x": 70.19216647960252, "y": 252}, {"x": 28, "y": 227}], "deviations": [{"x": 38, "y": 41}, {"x": 80, "y": 93}, {"x": 100, "y": 193}, {"x": 62, "y": 249}]},
        {"bitmapId": 318, "corners": [{"x": 54, "y": 23}, {"x": 30.836718653684734, "y": 94}, {"x": 145.39628969146057, "y": 74}, {"x": 108.09293339406975, "y": 214}, {"x": 71, "y": 195}], "deviations": [{"x": 47, "y": 53}, {"x": 73, "y": 84}, {"x": 139, "y": 145}, {"x": 78, "y": 196}]},
        {"bitmapId": 319, "corners": [{"x": 23, "y": 16}, {"x": 22.48581313822596, "y": 82.25709343088702}, {"x": 208, "y": 70.32176974313936}, {"x": 172, "y": 193.9280112270105}, {"x": 134, "y": 179}], "deviations": [{"x": 19, "y": 83}, {"x": 87, "y": 71}, {"x": 196, "y": 123}, {"x": 166, "y": 196}]},
        {"bitmapId": 320, "corners": [{"x": 33, "y": 13}, {"x": 16, "y": 68.83211099670224}, {"x": 181, "y": 49.2003435624534}, {"x": 125.98278765595865, "y": 167}, {"x": 88, "y": 147}], "deviations": [{"x": 17, "y": 58}, {"x": 73, "y": 51}, {"x": 167, "y": 108}, {"x": 121, "y": 166}]},
        {"bitmapId": 321, "corners": [{"x": 32, "y": 18}, {"x": 26, "y": 83.0186733726407}, {"x": 278.1348899507889, "y": 52}, {"x": 251.88234951398374, "y": 172.11765048601626}, {"x": 212, "y": 141}], "deviations": [{"x": 32, "y": 51}, {"x": 171, "y": 57}, {"x": 274, "y": 87}, {"x": 230, "y": 150}]},
        {"bitmapId": 322, "corners": [{"x": 30, "y": 13}, {"x": 18.191495468021174, "y": 72}, {"x": 312.19001093049934, "y": 38.619978139001375}, {"x": 279.1052692001438, "y": 115}, {"x": 242, "y": 94}], "deviations": [{"x": 27, "y": 35}, {"x": 236, "y": 38}, {"x": 301, "y": 59}, {"x": 269, "y": 113}]},
        {"bitmapId": 323, "corners": [{"x": 25, "y": 44}, {"x": 206.91604019757324, "y": 23.33583920970699}, {"x": 149, "y": 140.1787037715095}, {"x": 231, "y": 150.93672723035633}, {"x": 63, "y": 346}], "deviations": [{"x": 189, "y": 19}, {"x": 162, "y": 103}, {"x": 188, "y": 148}, {"x": 165, "y": 274}], "contains": [359, 360]},
        {"bitmapId": 324, "corners": [{"x": 31, "y": 45}, {"x": 159.32098046561032, "y": 12}, {"x": 114.15733441017464, "y": 137.38577813672487}, {"x": 175, "y": 141.21661191804188}, {"x": 18, "y": 337}], "deviations": [{"x": 46, "y": 44}, {"x": 119, "y": 99}, {"x": 175, "y": 139}, {"x": 135, "y": 251}], "contains": [359, 260]},
        {"bitmapId": 325, "corners": [{"x": 18, "y": 31}, {"x": 66, "y": 14.181493120428478}, {"x": 39, "y": 121.95440747212686}, {"x": 82, "y": 125.52216724216521}, {"x": 13, "y": 271}], "deviations": [{"x": 37, "y": 29}, {"x": 65, "y": 38}, {"x": 39, "y": 123}, {"x": 44, "y": 224}], "contains": [361, 362]},
        {"bitmapId": 326, "corners": [{"x": 11, "y": 43}, {"x": 108.49353805031492, "y": 21.506461949685082}, {"x": 63.1718343652262, "y": 107.8281656347738}, {"x": 104, "y": 269.88147368075914}, {"x": 42, "y": 234}], "deviations": [{"x": 55, "y": 30}, {"x": 93, "y": 47}, {"x": 114, "y": 192}, {"x": 99, "y": 270}], "contains": [146, 214]},
        {"bitmapId": 327, "corners": [{"x": 6, "y": 35}, {"x": 100, "y": 18.33733389953487}, {"x": 68, "y": 75.2062396583169}, {"x": 102.06582222259826, "y": 178}, {"x": 55, "y": 150}], "deviations": [{"x": 62, "y": 18}, {"x": 93, "y": 35}, {"x": 104, "y": 125}, {"x": 95, "y": 176}], "contains": [147, 215]},
        {"bitmapId": 328, "corners": [{"x": 9, "y": 40}, {"x": 106.31523164893949, "y": 16}, {"x": 74.1614027630305, "y": 90.75789585545425}, {"x": 105.5348138135144, "y": 156.2325930932428}, {"x": 50, "y": 157}], "deviations": [{"x": 24, "y": 40}, {"x": 80, "y": 62}, {"x": 87, "y": 100}, {"x": 104, "y": 157}], "contains": [148, 216]},
        {"bitmapId": 329, "corners": [{"x": 18, "y": 23}, {"x": 125.63988821594548, "y": 13.680055892027267}, {"x": 25.116021484580564, "y": 150}, {"x": 205.54374702134467, "y": 131.684379467983}, {"x": 133.36089576207075, "y": 366}, {"x": 93, "y": 318}], "deviations": [{"x": 31, "y": 24}, {"x": 129, "y": 13}, {"x": 142, "y": 127}, {"x": 174, "y": 286}, {"x": 129, "y": 366}]},
        {"bitmapId": 330, "corners": [{"x": 20, "y": 24}, {"x": 90, "y": 12.101674096837607}, {"x": 27.51392417534025, "y": 91.48607582465975}, {"x": 173, "y": 104.75014235084787}, {"x": 120.1834537394768, "y": 212.90827313026162}, {"x": 104, "y": 186}], "deviations": [{"x": 90, "y": 8}, {"x": 70, "y": 45}, {"x": 44, "y": 98}, {"x": 141, "y": 183}, {"x": 119, "y": 214}]},
        {"bitmapId": 331, "corners": [{"x": 12, "y": 45}, {"x": 162.48488616021604, "y": 15.147175382795423}, {"x": 124, "y": 129.47415180146828}, {"x": 188, "y": 134.17669906137718}, {"x": 131.42678197186228, "y": 307.5732180281377}, {"x": 98, "y": 284}], "deviations": [{"x": 128, "y": 20}, {"x": 165, "y": 22}, {"x": 188, "y": 130}, {"x": 180, "y": 213}, {"x": 114, "y": 300}]},
        {"bitmapId": 332, "corners": [{"x": 18, "y": 44}, {"x": 147.04227690288621, "y": 8}, {"x": 116.44174246176992, "y": 74}, {"x": 188, "y": 77.85015386202394}, {"x": 131.1183137276768, "y": 183.9408431361616}, {"x": 112, "y": 156}], "deviations": [{"x": 57, "y": 39}, {"x": 114, "y": 72}, {"x": 184, "y": 74}, {"x": 141, "y": 171}, {"x": 131, "y": 186}]},
        {"bitmapId": 333, "corners": [{"x": 8, "y": 38}, {"x": 128.5332913697257, "y": 16}, {"x": 128.27557952153808, "y": 188}, {"x": 232.344415258474, "y": 187}, {"x": 206.5369566295252, "y": 367}, {"x": 173, "y": 328}], "deviations": [{"x": 61, "y": 24}, {"x": 125, "y": 127}, {"x": 222, "y": 188}, {"x": 220, "y": 323}, {"x": 190, "y": 353}]},
        {"bitmapId": 334, "corners": [{"x": 30, "y": 46}, {"x": 191, "y": 24.991886928590233}, {"x": 112, "y": 111.07572210208522}, {"x": 91.65120236383285, "y": 384.3487976361671}, {"x": 51, "y": 338}], "deviations": [{"x": 78, "y": 31}, {"x": 172, "y": 49}, {"x": 116, "y": 277}, {"x": 82, "y": 379}], "contains": [141, 209]},
        {"bitmapId": 335, "corners": [{"x": 23, "y": 37}, {"x": 132.5965826528119, "y": 19.8068346943762}, {"x": 84.46735610115604, "y": 87}, {"x": 75.35999117760555, "y": 306}, {"x": 33, "y": 274}], "deviations": [{"x": 49, "y": 36}, {"x": 121, "y": 40}, {"x": 100, "y": 239}, {"x": 56, "y": 289}], "contains": [143, 211]},
        {"bitmapId": 336, "corners": [{"x": 16, "y": 34}, {"x": 110.56703897833037, "y": 12.432961021669623}, {"x": 75, "y": 65.00563242140743}, {"x": 65, "y": 194.61180581000195}, {"x": 14, "y": 178}], "deviations": [{"x": 40, "y": 32}, {"x": 105, "y": 30}, {"x": 81, "y": 152}, {"x": 55, "y": 196}], "contains": [143, 211]},
        {"bitmapId": 337, "corners": [{"x": 14, "y": 38}, {"x": 112, "y": 20.203640274878836}, {"x": 88, "y": 89.87449747262646}, {"x": 92.03536735228975, "y": 184.96463264771026}, {"x": 41.30003087383408, "y": 201}, {"x": 314, "y": 244}], "deviations": [{"x": 72, "y": 31}, {"x": 111, "y": 33}, {"x": 106, "y": 132}, {"x": 84, "y": 190}, {"x": 159, "y": 207}], "contains": [294, 76]},
        {"bitmapId": 338, "corners": [{"x": 11, "y": 30}, {"x": 89.92810752319701, "y": 18}, {"x": 69, "y": 62.28518564475437}, {"x": 78.03750718006671, "y": 143.4437392298999}, {"x": 30.49640112458686, "y": 154}, {"x": 219, "y": 191}], "deviations": [{"x": 71, "y": 23}, {"x": 72, "y": 41}, {"x": 84, "y": 100}, {"x": 63, "y": 152}, {"x": 93, "y": 157}]},
        {"bitmapId": 339, "corners": [{"x": 85, "y": 71}, {"x": 298.756092167179, "y": 21.48781566564195}, {"x": 11.28829077982476, "y": 212.71170922017524}, {"x": 343, "y": 266}], "deviations": [{"x": 125, "y": 66}, {"x": 242, "y": 71}, {"x": 135, "y": 202}], "contains": [140, 76]},
        {"bitmapId": 340, "corners": [{"x": 24, "y": 69}, {"x": 186.34472117017128, "y": 33.37888468068518}, {"x": 87.10325871483612, "y": 219.8967412851639}, {"x": 75, "y": 227}], "deviations": [{"x": 163, "y": 33}, {"x": 164, "y": 132}, {"x": 78, "y": 226}], "contains": [46, 87]},
        {"bitmapId": 341, "corners": [{"x": 272, "y": 21}, {"x": 104.43286602424911, "y": 86.92785566262515}, {"x": 15, "y": 341}], "deviations": [{"x": 232, "y": 44}, {"x": 69, "y": 270}], "contains": [66, 37]},
        {"bitmapId": 342, "corners": [{"x": 165, "y": 22}, {"x": 78.32825258873731, "y": 82.67174741126269}, {"x": 11, "y": 357}], "deviations": [{"x": 148, "y": 42}, {"x": 52, "y": 272}], "contains": [66, 31]},
        {"bitmapId": 343, "corners": [{"x": 143, "y": 27}, {"x": 36, "y": 117.71289362745304}, {"x": 26, "y": 302.33051829431906}, {"x": 85, "y": 255}], "deviations": [{"x": 55, "y": 99}, {"x": 27, "y": 231}, {"x": 50, "y": 288}], "contains": [61, 155]},
        {"bitmapId": 344, "corners": [{"x": 103, "y": 19}, {"x": 28, "y": 88.70840613304804}, {"x": 24.187104810769682, "y": 220}, {"x": 98, "y": 175}], "deviations": [{"x": 80, "y": 45}, {"x": 24, "y": 95}, {"x": 73, "y": 197}], "contains": [61, 160]},
        {"bitmapId": 345, "corners": [{"x": 106, "y": 22}, {"x": 23.22055529734347, "y": 74.77944470265653}, {"x": 22, "y": 150.34653101776735}, {"x": 100, "y": 115}], "deviations": [{"x": 83, "y": 39}, {"x": 24, "y": 131}, {"x": 55, "y": 133}]},
        {"bitmapId": 346, "corners": [{"x": 142, "y": 25}, {"x": 28.64222653997493, "y": 205}, {"x": 164.9977699305232, "y": 203.0022300694768}, {"x": 219.58815353923154, "y": 135.23553938230535}, {"x": 33.34955925632072, "y": 342.3008814873586}, {"x": 259, "y": 323}], "deviations": [{"x": 102, "y": 99}, {"x": 156, "y": 207}, {"x": 200, "y": 163}, {"x": 97, "y": 256}, {"x": 157, "y": 342}]},
        {"bitmapId": 347, "corners": [{"x": 101, "y": 22}, {"x": 30.419166677945313, "y": 90}, {"x": 116.62364999113859, "y": 93.37635000886141}, {"x": 174.6326272073994, "y": 52.1836863963003}, {"x": 36.018497531494035, "y": 158.990751234253}, {"x": 183, "y": 132}], "deviations": [{"x": 42, "y": 74}, {"x": 105, "y": 96}, {"x": 161, "y": 64}, {"x": 98, "y": 102}, {"x": 109, "y": 139}], "contains": [201, 196]},
        {"bitmapId": 348, "corners": [{"x": 85, "y": 20}, {"x": 16.030618479058667, "y": 145.908144562824}, {"x": 98, "y": 134.27368011418955}, {"x": 139, "y": 81.05525128861761}, {"x": 26.420866604410172, "y": 231.57913339558982}, {"x": 115, "y": 202}], "deviations": [{"x": 61, "y": 76}, {"x": 71, "y": 136}, {"x": 121, "y": 113}, {"x": 99, "y": 147}, {"x": 90, "y": 207}]},
        {"bitmapId": 349, "corners": [{"x": 94, "y": 26}, {"x": 24.193040590659496, "y": 156.42087822802154}, {"x": 102.38610811934824, "y": 153.30694594032587}, {"x": 142, "y": 94.59090592218703}, {"x": 46.08755963847365, "y": 229}, {"x": 136, "y": 204}], "deviations": [{"x": 94, "y": 33}, {"x": 46, "y": 158}, {"x": 111, "y": 150}, {"x": 121, "y": 133}, {"x": 70, "y": 225}], "contains": [192, 198]},
        {"bitmapId": 350, "corners": [{"x": 56, "y": 13}, {"x": 14.403408086166953, "y": 86}, {"x": 67.0970735066301, "y": 83.9029264933699}, {"x": 109, "y": 40.040601547931686}, {"x": 19.848375567106135, "y": 147}, {"x": 86, "y": 132}], "deviations": [{"x": 24, "y": 64}, {"x": 36, "y": 85}, {"x": 83, "y": 71}, {"x": 71, "y": 91}, {"x": 29, "y": 147}], "contains": [192, 198]},
        {"bitmapId": 351, "corners": [{"x": 63, "y": 16}, {"x": 19, "y": 120.48783445170388}, {"x": 70.03890404238871, "y": 114}, {"x": 105, "y": 77.86895250284937}, {"x": 19.151769116554036, "y": 208}, {"x": 105, "y": 179}], "deviations": [{"x": 49, "y": 60}, {"x": 48, "y": 114}, {"x": 90, "y": 97}, {"x": 93, "y": 102}, {"x": 25, "y": 209}], "contains": [192, 198]},
        {"bitmapId": 352, "corners": [{"x": 18, "y": 15}, {"x": 22, "y": 171}], "deviations": [{"x": 22, "y": 31}]},
        {"bitmapId": 353, "corners": [{"x": 8, "y": 7}, {"x": 19, "y": 122}], "deviations": [{"x": 16, "y": 44}]},
        {"bitmapId": 354, "corners": [{"x": 18, "y": 20}, {"x": 109, "y": 20.212612203576313}, {"x": 70.455420985004, "y": 167.455420985004}, {"x": 50, "y": 141}], "deviations": [{"x": 109, "y": 20}, {"x": 81, "y": 139}, {"x": 59, "y": 151}]},
        {"bitmapId": 355, "corners": [{"x": 14, "y": 50}, {"x": 237.6427632497172, "y": 21}, {"x": 212.00076543405942, "y": 187.99923456594058}, {"x": 37, "y": 224}], "deviations": [{"x": 113, "y": 34}, {"x": 240, "y": 53}, {"x": 115, "y": 212}], "contains": [377, 378]},
        {"bitmapId": 356, "corners": [{"x": 9, "y": 37}, {"x": 89.80876218099775, "y": 18}, {"x": 85.10842957527841, "y": 102.89157042472159}, {"x": 30, "y": 126}], "deviations": [{"x": 35, "y": 33}, {"x": 92, "y": 68}, {"x": 41, "y": 122}], "contains": [111, 370]},
        {"bitmapId": 357, "corners": [{"x": 24, "y": 42}, {"x": 209, "y": 14.115591451029973}, {"x": 158, "y": 132}], "deviations": [{"x": 47, "y": 42}, {"x": 192, "y": 60}]},
        {"bitmapId": 358, "corners": [{"x": 148, "y": 21}, {"x": 215.38092016828432, "y": 23.61907983171568}, {"x": 22, "y": 218}], "deviations": [{"x": 191, "y": 21}, {"x": 162, "y": 135}]},
        {"bitmapId": 359, "corners": [{"x": 12, "y": 32}, {"x": 59.583461315760296, "y": 13}, {"x": 22, "y": 128}], "deviations": [{"x": 47, "y": 17}, {"x": 46, "y": 50}]},
        {"bitmapId": 360, "corners": [{"x": 40, "y": 10}, {"x": 74.90108701072153, "y": 11.901087010721527}, {"x": 9, "y": 153}], "deviations": [{"x": 65, "y": 10}, {"x": 52, "y": 98}]},
        {"bitmapId": 361, "corners": [{"x": 13, "y": 47}, {"x": 125.40256526922118, "y": 24.40256526922119}, {"x": 121, "y": 152.6018262739719}, {"x": 209, "y": 139}], "deviations": [{"x": 45, "y": 39}, {"x": 121, "y": 71}, {"x": 169, "y": 141}]},
        {"bitmapId": 362, "corners": [{"x": 28, "y": 23}, {"x": 17, "y": 208}], "deviations": [{"x": 31, "y": 94}]},
        {"bitmapId": 363, "corners": [{"x": 15, "y": 41}, {"x": 265.2165007577314, "y": 10.78349924226859}, {"x": 208, "y": 215.8309625507448}, {"x": 166, "y": 190}], "deviations": [{"x": 193, "y": 11}, {"x": 257, "y": 83}, {"x": 206, "y": 217}]},
        {"bitmapId": 364, "corners": [{"x": 19, "y": 15}, {"x": 15, "y": 187}], "deviations": [{"x": 19, "y": 112}]},
        {"bitmapId": 365, "corners": [{"x": 7, "y": 29}, {"x": 114, "y": 22.670168916139325}, {"x": 79.9555717587139, "y": 169.9555717587139}, {"x": 53, "y": 143}], "deviations": [{"x": 95, "y": 21}, {"x": 105, "y": 89}, {"x": 59, "y": 146}], "contains": [117, 370]},
        {"bitmapId": 366, "corners": [{"x": 23, "y": 15}, {"x": 19, "y": 108}], "deviations": [{"x": 21, "y": 28}]},
        {"bitmapId": 367, "corners": [{"x": 12, "y": 32}, {"x": 176, "y": 15.806362447998719}, {"x": 144.50322974568255, "y": 139.50322974568255}, {"x": 108, "y": 122}], "deviations": [{"x": 147, "y": 15}, {"x": 170, "y": 74}, {"x": 130, "y": 130}]},
        {"bitmapId": 368, "corners": [{"x": 11, "y": 31}, {"x": 180, "y": 18.982455378686645}, {"x": 174, "y": 59.31075390601886}, {"x": 28, "y": 96}], "deviations": [{"x": 64, "y": 31}, {"x": 179, "y": 35}, {"x": 46, "y": 95}], "contains": [119, 1]},
        {"bitmapId": 369, "corners": [{"x": 14, "y": 34}, {"x": 154, "y": 19.28887037693616}, {"x": 139.01124955283785, "y": 103}, {"x": 38, "y": 124}], "deviations": [{"x": 116, "y": 18}, {"x": 145, "y": 65}, {"x": 124, "y": 103}], "contains": [117, 370]},
        {"bitmapId": 370, "corners": [{"x": 14, "y": 31}, {"x": 119, "y": 13}], "deviations": [{"x": 68, "y": 19}]},
        {"bitmapId": 371, "corners": [{"x": 13, "y": 35}, {"x": 154.05620392967344, "y": 16}, {"x": 143.2578778628892, "y": 97.8710610685554}, {"x": 19, "y": 129}], "deviations": [{"x": 116, "y": 18}, {"x": 150, "y": 69}, {"x": 60, "y": 123}], "contains": [117, 370]},
        {"bitmapId": 372, "corners": [{"x": 12, "y": 9}, {"x": 57, "y": 61}], "deviations": [{"x": 15, "y": 52}]},
        {"bitmapId": 373, "corners": [{"x": 24, "y": 13}, {"x": 14, "y": 80.74197953834812}, {"x": 167.18757312877034, "y": 63}, {"x": 154, "y": 118}], "deviations": [{"x": 15, "y": 64}, {"x": 97, "y": 63}, {"x": 167, "y": 73}]},
        {"bitmapId": 374, "corners": [{"x": 29, "y": 11}, {"x": 32, "y": 144.71222092722414}, {"x": 321, "y": 111}], "deviations": [{"x": 34, "y": 51}, {"x": 72, "y": 133}]},
        {"bitmapId": 375, "corners": [{"x": 22, "y": 41}, {"x": 126.64564157863207, "y": 17.645641578632066}, {"x": 127.29730425719602, "y": 97}, {"x": 166.50741243696137, "y": 101.74629378151931}, {"x": 169, "y": 76}], "deviations": [{"x": 68, "y": 28}, {"x": 119, "y": 82}, {"x": 135, "y": 102}, {"x": 169, "y": 100}]},
        {"bitmapId": 376, "corners": [{"x": 18, "y": 22}, {"x": 28.340278189759562, "y": 161.34027818975957}, {"x": 211, "y": 177}], "deviations": [{"x": 20, "y": 142}, {"x": 68, "y": 174}]},
        {"bitmapId": 377, "corners": [{"x": 14, "y": 46}, {"x": 240, "y": 24.735078749843204}, {"x": 208, "y": 188}], "deviations": [{"x": 192, "y": 25}, {"x": 225, "y": 88}]},
        {"bitmapId": 378, "corners": [{"x": 18, "y": 37}, {"x": 191, "y": 13}], "deviations": [{"x": 150, "y": 16}]},
        {"bitmapId": 379, "corners": [{"x": 6, "y": 19}, {"x": 61, "y": 12.562117732263495}, {"x": 53, "y": 49.291810095175244}, {"x": 19, "y": 60}], "deviations": [{"x": 36, "y": 18}, {"x": 61, "y": 18}, {"x": 53, "y": 51}], "contains": [112, 8]},
        {"bitmapId": 380, "corners": [{"x": 5, "y": 39}, {"x": 222, "y": 13.96413803786999}, {"x": 212, "y": 64.35768231791121}, {"x": 28, "y": 101}], "deviations": [{"x": 104, "y": 24}, {"x": 215, "y": 40}, {"x": 148, "y": 86}], "contains": [381, 1]},
        {"bitmapId": 381, "corners": [{"x": 9, "y": 36}, {"x": 227.75663985851367, "y": 13.48672028297267}, {"x": 211, "y": 64}], "deviations": [{"x": 176, "y": 13}, {"x": 216, "y": 43}]},
        {"bitmapId": 382, "corners": [{"x": 9, "y": 19}, {"x": 131, "y": 26.800071699225004}, {"x": 18, "y": 169}], "deviations": [{"x": 45, "y": 26}, {"x": 68, "y": 125}]},
        {"bitmapId": 383, "corners": [{"x": 34, "y": 27}, {"x": 304, "y": 26}], "deviations": [{"x": 160, "y": 22}]},
        {"bitmapId": 384, "corners": [{"x": 23, "y": 312}, {"x": 255, "y": 27}], "deviations": [{"x": 61, "y": 250}]},
        {"bitmapId": 385, "corners": [{"x": 36, "y": 24}, {"x": 171.3501888811492, "y": 252.13358517486557}, {"x": 302, "y": 30}], "deviations": [{"x": 108, "y": 172}, {"x": 199, "y": 195}]},
        {"bitmapId": 386, "corners": [{"x": 25, "y": 24}, {"x": 289, "y": 289}], "deviations": [{"x": 112, "y": 177}]},
        {"bitmapId": 387, "corners": [{"x": 26, "y": 15}, {"x": 56, "y": 55}], "deviations": [{"x": 29, "y": 14}]}
    ];

    return params;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param Params
 * @param StudyParam
 * @author Joshua McFarland
 */
define('collections/StudyParams',[
    'Params',
    'models/StudyParam',
    'backbone'
], function(Params, StudyParam) {
    /**
     * @class StudyParams
     */
    var StudyParams = Backbone.Collection.extend({
        /**
         * @property {StudyParam} model
         */
        model: StudyParam,
        /**
         * @method loadAll
         * @param {Callback} callback
         */
        loadAll: function(callback) {
            skritter.data.params.add(Params);
            callback(null, Params);
        }
    });

    return StudyParams;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param StudyReview
 * @author Joshua McFarland
 */
define('collections/StudyReviews',[
    'models/StudyReview',
    'backbone'
], function(StudyReview) {
    /**
     * @class StudyReviews
     */
    var StudyReviews = Backbone.Collection.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.on('add', function(review) {
                review.cache();
            });
            this.on('change', function(review) {
                review.cache();
            });
            this.on('remove', function(review) {
                skritter.storage.removeItems('reviews', [[review.get('itemId'), review.get('submitTime')]]);
            });
        },
        /**
         * @property {StudyReview} model
         */
        model: StudyReview,
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('reviews', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method comparator
         * @param {Backbone.Model} review
         */
        comparator: function(review) {
            return -review.get('submitTime');
        },
        /**
         * @method getTotalTime
         * @returns {Number}
         */
        getTotalTime: function() {
            var time = 0;
            for (var i in this.models)
                if (this.models[i].get('bearTime') && skritter.moment(this.models[0].submitTime).format('YYYY[-]MM[-]DD') === skritter.settings.get('date'))
                    time += parseInt(this.models[i].get('reviewTime'), 10);
            return time * 1000;
        },
        /**
         * @method loadAll
         * @param {Function} callback
         */
        loadAll: function(callback) {
            skritter.storage.getAll('reviews', function(reviews) {
                skritter.data.reviews.add(reviews, {silent: true});
                callback(null, reviews);
            });
        },
        /**
         * Posts the reviews to the server and then removes them from the local database.
         * 
         * @method sync
         * @param {Function} callback
         */
        sync: function(callback) {
            if (this.length > 0) {
                skritter.api.postReviews(this.toJSON(), function(reviews) {
                    console.log('submitted reviews', reviews);
                    skritter.data.reviews.remove(reviews);
                    callback();
                });
            } else {
                callback();
            }
        }
    });

    return StudyReviews;
});
/**
 * @module Skritter
 * @submodule Model
 * @author Joshua McFarland
 */
define('models/StudySRSConfig',[
    'backbone'
], function() {
    /**
     * @class StudySRSConfigs
     */
    var StudySRSConfigs = Backbone.Model.extend({
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('srsconfigs', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        }
    });

    return StudySRSConfigs;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param {Model} StudySRSConfig
 * @author Joshua McFarland
 */
define('collections/StudySRSConfigs',[
    'models/StudySRSConfig',
    'backbone'
], function(StudySRSConfig) {
    /**
     * @class StudySRSConfigs
     */
    var StudySRSConfigs = Backbone.Collection.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.on('change', function(srsconfig) {
                srsconfig.cache();
            });
        },
        /**
         * @property {StudySRSConfig} model
         */
        model: StudySRSConfig,
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('srsconfigs', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method insert
         * @param {Array} srsconfigs
         * @param {Function} callback
         * @returns {Backbone.Collection}
         */
        insert: function(srsconfigs, callback) {
            this.add(srsconfigs, {merge: true});
            skritter.storage.setItems('srsconfigs', srsconfigs, callback);
            return this;
        },
        /**
         * @method loadAll
         * @param {Function} callback
         */
        loadAll: function(callback) {
            skritter.storage.getAll('srsconfigs', function(srsconfigs) {
                skritter.data.srsconfigs.add(srsconfigs, {silent: true});
                callback(null, srsconfigs);
            });
        }
    });

    return StudySRSConfigs;
});
/**
 * @module Skritter
 * @submodule Model
 * @author Joshua McFarland
 */
define('models/StudySentence',[
    'backbone'
], function() {
    /**
     * @class StudySentence
     */
    var StudySentence = Backbone.Model.extend({
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('sentences', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method noWhiteSpaces
         * @returns {undefined}
         */
        noWhiteSpaces: function() {
            return this.get('writing').replace(/ /g,'');
        }
    });

    return StudySentence;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param StudySentence
 * @author Joshua McFarland
 */
define('collections/StudySentences',[
    'models/StudySentence',
    'backbone'
], function(StudySentence) {
    /**
     * @class StudySentences
     */
    var StudySentences = Backbone.Collection.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.on('change', function(sentence) {
                sentence.cache();
            });
        },
        /**
         * @property {StudySentence} model
         */
        model: StudySentence,
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('sentences', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method insert
         * @param {Array} sentences
         * @param {Function} callback
         * @returns {Backbone.Collection}
         */
        insert: function(sentences, callback) {
            this.add(sentences, {merge: true});
            skritter.storage.setItems('sentences', sentences, callback);
            return this;
        },
        /**
         * @method loadAll
         * @param {Function} callback
         */
        loadAll: function(callback) {
            skritter.storage.getAll('sentences', function(sentences) {
                skritter.data.sentences.add(sentences, {silent: true});
                callback(null, sentences);
            });
        }
    });

    return StudySentences;
});
/**
 * @module Skritter
 * @submodule Model
 * @author Joshua McFarland
 */
define('models/StudyStroke',[
    'backbone'
], function() {
    /**
     * @class StudyStroke
     */
    var StudyStroke = Backbone.Model.extend({
        /**
         * @property {String} idAttribute
         */
        idAttribute: 'rune',
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('strokes', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        }
    });

    return StudyStroke;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param StudyStroke
 * @author Joshua McFarland
 */
define('collections/StudyStrokes',[
    'models/StudyStroke',
    'backbone'
], function(StudyStroke) {
    /**
     * @class StudyStrokes
     */
    var StudyStrokes = Backbone.Collection.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.loadTones();
            this.on('change', function(item) {
                item.cache();
            });
        },
        /**
         * @property {StudyStroke} model
         */
        model: StudyStroke,
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('strokes', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method insert
         * @param {Array} strokes
         * @param {Function} callback
         * @returns {Backbone.Collection}
         */
        insert: function(strokes, callback) {
            this.add(strokes, {merge: true});
            skritter.storage.setItems('strokes', strokes, callback);
            return this;
        },
        /**
         * @method loadAll
         * @param {Function} callback
         */
        loadAll: function(callback) {
            skritter.storage.getAll('strokes', function(strokes) {
                skritter.data.strokes.add(strokes, {silent: true});
                callback(null, strokes);
            });
        },
        /**
         * @method loadTones
         */
        loadTones: function() {
            this.add(new StudyStroke().set({
                lang: 'zh',
                rune: 'tone1',
                strokes: [
                    [383, 0.20, 0.20, 0.6, 0.1, 0.0]
                ]
            }));
            this.add(new StudyStroke().set({
                lang: 'zh',
                rune: 'tone2',
                strokes: [
                    [384, 0.25, 0.25, 0.5, 0.5, 0.0]
                ]
            }));
            this.add(new StudyStroke().set({
                lang: 'zh',
                rune: 'tone3',
                strokes: [
                    [385, 0.15, 0.20, 0.7, 0.6, 0.0]
                ]
            }));
            this.add(new StudyStroke().set({
                lang: 'zh',
                rune: 'tone4',
                strokes: [
                    [386, 0.25, 0.25, 0.5, 0.5, 0.0]
                ]
            }));
            this.add(new StudyStroke().set({
                lang: 'zh',
                rune: 'tone5',
                strokes: [
                    [387, 0.40, 0.40, 0.20, 0.20, 0.0]
                ]
            }));
        }
    });

    return StudyStrokes;
});
/**
 * @module Skritter
 * @submodule Model
 * @param PinyinConverter
 * @param CanvasCharacter
 * @param CanvasStroke
 * @author Joshua McFarland
 */
define('models/StudyVocab',[
    'PinyinConverter',
    'collections/CanvasCharacter',
    'models/CanvasStroke',
    'backbone'
], function(PinyinConverter, CanvasCharacter, CanvasStroke) {
    /**
     * @class StudyVocab
     */
    var StudyVocab = Backbone.Model.extend({
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('vocabs', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method getCanvasCharacters
         * @param {Number} index
         * @param {String} part
         * @return {Array}
         */
        getCanvasCharacters: function(index, part) {
            var characters = [];
            var variations = [];
            var tones = [];
            part = (part) ? part : 'rune';
            index = (index) ? index : 0;
            //loads the selected characters stroke data
            var rune = this.getCharacterAt(index);
            if (part === 'rune') {
                variations = skritter.data.strokes.findWhere({rune: rune}).get('strokes');
            } else {
                tones = this.getPinyinAt(index).tone.split(',');
                for (var t in tones)
                {
                    var tone = 'tone' + tones[t].replace(' ', '');
                    variations.push(skritter.data.strokes.findWhere({rune: tone}).get('strokes'));
                }
            }
            //loops through the possible alternate variations
            for (var v in variations)
            {
                var character = new CanvasCharacter();
                var strokes = variations[v];
                var position = 1;
                for (var s in strokes)
                {
                    var stroke = new CanvasStroke();
                    var bitmapId = parseInt(strokes[s][0], 10);
                    var params = skritter.data.params.findWhere({bitmapId: bitmapId});
                    character.name = (part === 'rune') ? rune : 'tone' + tones[v].trim();
                    stroke.set({
                       bitmapId: bitmapId,
                       data: strokes[s],
                       id: position + '|' + bitmapId,
                       part: part,
                       position: position,
                       rune: rune,
                       sprite: skritter.assets.getStroke(bitmapId)
                    });

                    //adjusts the relative position for double strokes and sets contained strokes
                    if (params.has('contains')) {
                        stroke.set('contains', params.get('contains'));
                        position++;
                    }
                    position++;

                    character.add(stroke);
                }
                characters.push(character);
            }
            return characters;
        },
        /**
         * @method getCharacterAt
         * @param {Number} index
         * @return {String}
         */
        getCharacterAt: function(index) {
            return this.getCharacters()[index];
        },
        /**
         * @method getCharacterCount
         * @return {Number}
         */
        getCharacterCount: function() {
            return this.getCharacters().length;
        },
        /**
         * @method getCharacters
         * @return {Array}
         */
        getCharacters: function() {
            //ISSUE #27: skips kana characters in the vocabs writing string
            //ISSUE #30: skips japanese characters with leading kana
            return this.get('writing').split('').filter(function(a) {
                return !skritter.fn.isKana(a);
            });
        },
        /**
         * Returns an array of a single character vocab items decompositions. It can optionally return
         * duplicates if that is so desired.
         * 
         * @method getDecomps
         * @param {Boolean} returnDuplicates
         * @returns {Array}
         */
        getDecomps: function(returnDuplicates) {
            if (this.getCharacterCount() > 1)
                return false;
            var writings = [];
            var decomp = skritter.data.decomps.findWhere({writing: this.getCharacterAt(0)});
            if (decomp && decomp.has('atomic')) {
                var children = decomp.get('Children');
                if (returnDuplicates)
                    return children;
                return children.filter(function(child) {
                    for (var i in writings)
                        if (writings[i] === child.writing)
                            return false;
                    writings.push(child.writing);
                    return true;
                });
            }
        },
        /**
         * @method getPinyinAt
         * @param {Number} index
         * @return {Object}
         */
        getPinyinAt: function(index) {
            index = (index) ? index : 0;
            var reading = _.clone(this.get('reading').toLowerCase());
            var syllable = _.clone(reading);
            var tone = _.clone(reading);
            if (this.getCharacterCount() === 1) {
                syllable = syllable.replace(/[0-9]+/g, '');
                tone = tone.replace(/[a-z]+/g, '');
                return {syllable: syllable, tone: tone, reading: reading};
            }
            reading = reading.split(',');
            syllable = syllable.split(/\d+/g);
            tone = _.without(tone.split(/[a-z]+/g), '');
            return {syllable: syllable[index], tone: tone[index]};
        },
        /**
         * @method getReadingDisplayAt
         * @param {Number} index
         * @return {String}
         */
        getReadingDisplayAt: function(index) {
            var element = '';
            for (var i = 0; i < this.getCharacterCount(); i++) {
                if (index > i) {
                    //checks for characters with multiple tone answers
                    if (this.getPinyinAt(i).syllable.split(',').length > 1) {
                        element += "<div class='prompt-tone-display'>" + PinyinConverter.toTone(this.getPinyinAt(i).reading) + "</div>";
                    } else {
                        element += "<div class='prompt-tone-display'>" + PinyinConverter.toTone(this.getPinyinAt(i).syllable + this.getPinyinAt(i).tone) + "</div>";
                    }
                } else if (index === i) {
                    element += "<div class='prompt-tone-hidden'>" + this.getPinyinAt(i).syllable + "</div>";
                } else {
                    element += "<div class='prompt-tone-display'>" + this.getPinyinAt(i).syllable + "</div>";
                }
            }
            return element;
        },
        /**
         * @method getSentence
         * @return {String}
         */
        getSentence: function() {
            var sentence = skritter.data.sentences.findWhere({id: this.get('sentenceId')});
            return (sentence) ? sentence : '';
        },
        /**
         * @method getWritingDisplayAt
         * @param {Number} index
         * @return {String}
         */
        getWritingDisplayAt: function(index) {
            var element = '';
            var characterIndex = 0;
            var characters = this.get('writing').split('');
            for (var i = 0; i < characters.length; i++) {
                var character = characters[i];
                if (skritter.fn.isKana(character)) {
                    element += "<div class='prompt-rune-display'>" + character + "</div>";
                } else {
                    if (index > characterIndex) {
                        element += "<div class='prompt-rune-display'>" + character + "</div>";
                    } else {
                        element += "<div class='prompt-rune-hidden'></div>";
                    }
                    characterIndex++;
                }
            }
            return element;
        },
        /**
         * @method play
         */
        play: function() {
            if (this.has('audio'))
                skritter.assets.getAudio(this.get('audio').replace('/sounds?file=', ''));
        },
        /**
         * @method validate
         * @param {Object} attributes
         */
        validate: function(attributes) {
            if (!this.has('changed') || attributes.changed <= this.get('changed')) {
                return 'Changed timestamp must be greater than current to update vocab.';
            }
        }
    });

    return StudyVocab;
});
/**
 * @module Skritter
 * @submodule Collection
 * @param StudyVocab
 * @author Joshua McFarland
 */
define('collections/StudyVocabs',[
    'models/StudyVocab',
    'backbone'
], function(StudyVocab) {
    /**
     * @class StudyVocabs
     */
    var StudyVocabs = Backbone.Collection.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            this.on('change', function(vocab) {
                vocab.cache();
            });
        },
        /**
         * @property {StudyVocab} model
         */
        model: StudyVocab,
        /**
         * @method cache
         * @param {Function} callback
         */
        cache: function(callback) {
            skritter.storage.setItems('vocabs', this.toJSON(), function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method insert
         * @param {Array} vocabs
         * @param {Function} callback
         * @returns {Backbone.Collection}
         */
        insert: function(vocabs, callback) {
            this.add(vocabs, {merge: true});
            skritter.storage.setItems('vocabs', vocabs, callback);
            return this;
        },
        /**
         * @method loadAll
         * @param {Function} callback
         */
        loadAll: function(callback) {
            skritter.storage.getAll('vocabs', function(vocabs) {
                skritter.data.vocabs.add(vocabs, {silent: true});
                callback(null, vocabs);
            });
        }
    });

    return StudyVocabs;
});
// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.3.3
var LZString = {
  
  
  // private property
  _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  _f : String.fromCharCode,
  
  compressToBase64 : function (input) {
    if (input == null) return "";
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;
    
    input = LZString.compress(input);
    
    while (i < input.length*2) {
      
      if (i%2==0) {
        chr1 = input.charCodeAt(i/2) >> 8;
        chr2 = input.charCodeAt(i/2) & 255;
        if (i/2+1 < input.length) 
          chr3 = input.charCodeAt(i/2+1) >> 8;
        else 
          chr3 = NaN;
      } else {
        chr1 = input.charCodeAt((i-1)/2) & 255;
        if ((i+1)/2 < input.length) {
          chr2 = input.charCodeAt((i+1)/2) >> 8;
          chr3 = input.charCodeAt((i+1)/2) & 255;
        } else 
          chr2=chr3=NaN;
      }
      i+=3;
      
      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;
      
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
      
      output = output +
        LZString._keyStr.charAt(enc1) + LZString._keyStr.charAt(enc2) +
          LZString._keyStr.charAt(enc3) + LZString._keyStr.charAt(enc4);
      
    }
    
    return output;
  },
  
  decompressFromBase64 : function (input) {
    if (input == null) return "";
    var output = "",
        ol = 0, 
        output_,
        chr1, chr2, chr3,
        enc1, enc2, enc3, enc4,
        i = 0, f=LZString._f;
    
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    
    while (i < input.length) {
      
      enc1 = LZString._keyStr.indexOf(input.charAt(i++));
      enc2 = LZString._keyStr.indexOf(input.charAt(i++));
      enc3 = LZString._keyStr.indexOf(input.charAt(i++));
      enc4 = LZString._keyStr.indexOf(input.charAt(i++));
      
      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;
      
      if (ol%2==0) {
        output_ = chr1 << 8;
        
        if (enc3 != 64) {
          output += f(output_ | chr2);
        }
        if (enc4 != 64) {
          output_ = chr3 << 8;
        }
      } else {
        output = output + f(output_ | chr1);
        
        if (enc3 != 64) {
          output_ = chr2 << 8;
        }
        if (enc4 != 64) {
          output += f(output_ | chr3);
        }
      }
      ol+=3;
    }
    
    return LZString.decompress(output);
    
  },

  compressToUTF16 : function (input) {
    if (input == null) return "";
    var output = "",
        i,c,
        current,
        status = 0,
        f = LZString._f;
    
    input = LZString.compress(input);
    
    for (i=0 ; i<input.length ; i++) {
      c = input.charCodeAt(i);
      switch (status++) {
        case 0:
          output += f((c >> 1)+32);
          current = (c & 1) << 14;
          break;
        case 1:
          output += f((current + (c >> 2))+32);
          current = (c & 3) << 13;
          break;
        case 2:
          output += f((current + (c >> 3))+32);
          current = (c & 7) << 12;
          break;
        case 3:
          output += f((current + (c >> 4))+32);
          current = (c & 15) << 11;
          break;
        case 4:
          output += f((current + (c >> 5))+32);
          current = (c & 31) << 10;
          break;
        case 5:
          output += f((current + (c >> 6))+32);
          current = (c & 63) << 9;
          break;
        case 6:
          output += f((current + (c >> 7))+32);
          current = (c & 127) << 8;
          break;
        case 7:
          output += f((current + (c >> 8))+32);
          current = (c & 255) << 7;
          break;
        case 8:
          output += f((current + (c >> 9))+32);
          current = (c & 511) << 6;
          break;
        case 9:
          output += f((current + (c >> 10))+32);
          current = (c & 1023) << 5;
          break;
        case 10:
          output += f((current + (c >> 11))+32);
          current = (c & 2047) << 4;
          break;
        case 11:
          output += f((current + (c >> 12))+32);
          current = (c & 4095) << 3;
          break;
        case 12:
          output += f((current + (c >> 13))+32);
          current = (c & 8191) << 2;
          break;
        case 13:
          output += f((current + (c >> 14))+32);
          current = (c & 16383) << 1;
          break;
        case 14:
          output += f((current + (c >> 15))+32, (c & 32767)+32);
          status = 0;
          break;
      }
    }
    
    return output + f(current + 32);
  },
  

  decompressFromUTF16 : function (input) {
    if (input == null) return "";
    var output = "",
        current,c,
        status=0,
        i = 0,
        f = LZString._f;
    
    while (i < input.length) {
      c = input.charCodeAt(i) - 32;
      
      switch (status++) {
        case 0:
          current = c << 1;
          break;
        case 1:
          output += f(current | (c >> 14));
          current = (c&16383) << 2;
          break;
        case 2:
          output += f(current | (c >> 13));
          current = (c&8191) << 3;
          break;
        case 3:
          output += f(current | (c >> 12));
          current = (c&4095) << 4;
          break;
        case 4:
          output += f(current | (c >> 11));
          current = (c&2047) << 5;
          break;
        case 5:
          output += f(current | (c >> 10));
          current = (c&1023) << 6;
          break;
        case 6:
          output += f(current | (c >> 9));
          current = (c&511) << 7;
          break;
        case 7:
          output += f(current | (c >> 8));
          current = (c&255) << 8;
          break;
        case 8:
          output += f(current | (c >> 7));
          current = (c&127) << 9;
          break;
        case 9:
          output += f(current | (c >> 6));
          current = (c&63) << 10;
          break;
        case 10:
          output += f(current | (c >> 5));
          current = (c&31) << 11;
          break;
        case 11:
          output += f(current | (c >> 4));
          current = (c&15) << 12;
          break;
        case 12:
          output += f(current | (c >> 3));
          current = (c&7) << 13;
          break;
        case 13:
          output += f(current | (c >> 2));
          current = (c&3) << 14;
          break;
        case 14:
          output += f(current | (c >> 1));
          current = (c&1) << 15;
          break;
        case 15:
          output += f(current | c);
          status=0;
          break;
      }
      
      
      i++;
    }
    
    return LZString.decompress(output);
    //return output;
    
  },


  
  compress: function (uncompressed) {
    if (uncompressed == null) return "";
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_data_string="", 
        context_data_val=0, 
        context_data_position=0,
        ii,
        f=LZString._f;
    
    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }
      
      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += f(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          
          
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }
    
    // Output the code for w.
    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += f(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += f(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += f(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += f(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == 15) {
            context_data_position = 0;
            context_data_string += f(context_data_val);
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }
        
        
      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }
    
    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == 15) {
        context_data_position = 0;
        context_data_string += f(context_data_val);
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }
    
    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == 15) {
        context_data_string += f(context_data_val);
        break;
      }
      else context_data_position++;
    }
    return context_data_string;
  },
  
  decompress: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = "",
        i,
        w,
        bits, resb, maxpower, power,
        c,
        f = LZString._f,
        data = {string:compressed, val:compressed.charCodeAt(0), position:32768, index:1};
    
    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }
    
    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = 32768;
        data.val = data.string.charCodeAt(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }
    
    switch (next = bits) {
      case 0: 
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = 32768;
              data.val = data.string.charCodeAt(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 1: 
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = 32768;
              data.val = data.string.charCodeAt(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 2: 
        return "";
    }
    dictionary[3] = c;
    w = result = c;
    while (true) {
      if (data.index > data.string.length) {
        return "";
      }
      
      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = 32768;
          data.val = data.string.charCodeAt(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0: 
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = 32768;
              data.val = data.string.charCodeAt(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1: 
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = 32768;
              data.val = data.string.charCodeAt(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2: 
          return result;
      }
      
      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }
      
      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result += entry;
      
      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;
      
      w = entry;
      
      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }
      
    }
  }
};

if( typeof module !== 'undefined' && module != null ) {
  module.exports = LZString
}
;
define("lz-string", function(){});

/**
 * @module Skritter
 * @submodule Model
 * @param Sync
 * @param StudyDecomps
 * @param StudyItems
 * @param StudyParams
 * @param StudyReviews
 * @param StudySRSConfigs
 * @param StudySentences
 * @param StudyStrokes
 * @param StudyVocabs
 * @author Joshua McFarland
 */
define('models/User',[
    'Sync',
    'collections/StudyDecomps',
    'collections/StudyItems',
    'collections/StudyParams',
    'collections/StudyReviews',
    'collections/StudySRSConfigs',
    'collections/StudySentences',
    'collections/StudyStrokes',
    'collections/StudyVocabs',
    'backbone',
    'lz-string'
], function(Sync, StudyDecomps, StudyItems, StudyParams, StudyReviews, StudySRSConfigs, StudySentences, StudyStrokes, StudyVocabs) {
    /**
     * @class User
     */
    var User = Backbone.Model.extend({
        /**
         * @method initialize
         */
        initialize: function() {
            //initializes all of the required data collections
            skritter.data = {
                decomps: new StudyDecomps(),
                items: new StudyItems(),
                params: new StudyParams(),
                reviews: new StudyReviews(),
                srsconfigs: new StudySRSConfigs(),
                sentences: new StudySentences(),
                strokes: new StudyStrokes(),
                vocabs: new StudyVocabs()
            };
            //loads the user from localStorage if exists
            if (localStorage.getItem('activeUser'))
                this.set(JSON.parse(LZString.decompress(localStorage.getItem(localStorage.getItem('activeUser')))));
            //perform tasks based login status
            if (this.isLoggedIn()) {
                //sets the api token required for calls
                skritter.api.token = this.get('access_token');
            }
            //stores user settings to localStorage as they are changed
            this.on('change', this.cache);
        },
        /**
         * @property {Object} defaults
         */
        defaults: {
            access_token: null,
            addOffset: 0,
            audio: true,
            expires_in: null,
            lastLogin: null,
            lastSyncChinese: null,
            lastSyncJapanese: null,
            refresh_token: null,
            settings: null,
            syncMethod: 'full',
            token_type: null,
            user_id: null
        },
        /**
         * @method cache
         */
        cache: function() {
            if (this.isLoggedIn())
                localStorage.setItem(this.get('user_id'), LZString.compress(JSON.stringify(this)));
        },
        /**
         * @method addItems
         * @param {Number} limit
         * @param {Function} callback
         */
        addItems: function(limit, callback) {
            var self = this;
            var offset = this.get('addOffset');
            limit = (limit) ? limit : 1;
            var requests = [
                {
                    path: 'api/v' + skritter.api.version + '/items/add',
                    method: 'POST',
                    cache: false,
                    params: {
                        lang: this.getSetting('targetLang'),
                        limit: limit,
                        offset: offset
                    }
                }
            ];
            skritter.async.waterfall([
                //request the new items using a batch request
                function(callback) {
                    skritter.modal.setProgress(100, 'Requesting Items');
                    skritter.api.requestBatch(requests, function(result) {
                        callback(null, result);
                    });
                },
                //start fetching the new items as they are completed
                function(result, callback) {
                    skritter.modal.setProgress(100, 'Getting Items');
                    skritter.api.getBatchCombined(result.id, function(result) {
                        console.log('added items', result);
                    }, function() {
                        callback();
                    });
                },
                //run a fresh sync to get the new items and update
                function(callback) {
                    self.set('addOffset', offset + 1);
                    self.sync(callback);
                }
            ], function() {
                if (typeof callback === 'function')
                    callback();
            });
        },
        /**
         * @method checkReviewErrors
         * @param {Number} offset
         * @param {Function} callback
         */
        checkReviewErrors: function(callback, offset) {
            offset = (offset && offset > -1) ? offset : this.getLastSync();
            skritter.api.getReviewErrors(offset, function(errors) {
                console.log('Review Errors', errors);
                if (typeof callback === 'function')
                    callback(errors);
            });
        },
        /**
         * Gets the current users properties and settings from the server then saves it.
         * 
         * @method fetch
         * @param {Function} callback
         */
        fetch: function(callback) {
            var self = this;
            if (this.isLoggedIn()) {
                skritter.api.getUser(this.get('user_id'), function(data) {
                    self.set('settings', data);
                    callback(data);
                });
            }
        },
        /**
         * Gets the users current avatar and returns it as an image tag using base64 data.
         * 
         * @method getAvatar
         * @param {String} classes
         * @returns {Image} Returns a base64 image tag
         */
        getAvatar: function(classes) {
            if (classes)
                return "<img src='data:image/png;base64," + this.getSetting('avatar') + "' + class='" + classes + "' />";
            return "<img src='data:image/png;base64," + this.getSetting('avatar') + "' />";
        },
        /**
         * Returns an array of active study parts based on the current language being studied.
         * 
         * @method getActiveStudyParts
         * @returns {Array}
         */
        getActiveStudyParts: function() {
            if (this.isChinese())
                return this.get('settings').chineseStudyParts;
            return this.get('settings').japaneseStudyParts;
        },
        /**
         * @method getDatabaseId
         * @returns {undefined}
         */
        getDatabaseName: function() {
            return this.get('user_id');
        },
        /**
         * Mainly used on tone prompts to determine which font to draw the character from, but
         * it returns the name of the font based on the current target language.
         * 
         * @method getFontName
         * @returns {String}
         */
        getFontName: function() {
            if (this.isChinese())
                return 'simkai';
            return 'kaisho';
        },
        /**
         * Returns the last sync based on the current active language. This is needed so we don't
         * have to delete all of the data when switching languages.
         * 
         * @method getLastSync
         * @returns {Number}
         */
        getLastSync: function() {
            var lastSync = (this.isChinese()) ? this.get('lastSyncChinese') : this.get('lastSyncJapanese');
            if (lastSync)
                return lastSync;
            return 0;
        },
        /**
         * A shortcut method for getting user server settings.
         * 
         * @method getSetting
         * @param {String} name
         * @return {Object}
         */
        getSetting: function(name) {
            return this.get('settings')[name];
        },
        /**
         * Returns the current style which really only applies to Chinese as both,
         * simplified or traditional.
         * 
         * @method getStyle
         * @returns {String}
         */
        getStyle: function() {
            if (this.isJapanese()) {
                return 'ja';
            } else if (this.isChinese() && this.getSetting('addSimplified') && this.getSetting('addTraditional')) {
                return 'zh-both';
            } else if (this.isChinese() && this.getSetting('addSimplified') && !this.getSetting('addTraditional')) {
                return 'zh-simp';
            } else {
                return 'zh-trad';
            }
        },
        /**
         * @method getTextStyle
         * @returns {String}
         */
        getTextStyle: function() {
            if (this.isChinese())
                return 'chinese-text';
            return 'japanese-text';
        },
        /**
         * Returns true if the target language is set to Chinese.
         * 
         * @method isChinese
         * @returns {Boolean}
         */
        isChinese: function() {
            if (this.getSetting('targetLang') === 'zh')
                return true;
            return false;
        },
        /**
         * Returns true if the target language is set to Japanese.
         * 
         * @method isJapanese
         * @returns {Boolean}
         */
        isJapanese: function() {
            if (this.getSetting('targetLang') === 'ja')
                return true;
            return false;
        },
        /**
         * Checks to see if the user is logged in by seeing if a token exists. This might not always work
         * in situations where the token as expired.
         * 
         * @method isLoggedIn
         * @returns {Boolean} True or false pending the users login status
         */
        isLoggedIn: function() {
            if (this.get('access_token'))
                return true;
            return false;
        },
        /**
         * Loads all of the data for the current active user into memory. For small to medium size accounts this is
         * fairly quick, but larger accounts might need to do loading in logical chunks.
         * 
         * @method loadAllData
         * @param {Function} callback
         */
        loadAllData: function(callback) {
            skritter.async.series([
                skritter.async.apply(skritter.data.decomps.loadAll),
                skritter.async.apply(skritter.data.params.loadAll),
                skritter.async.apply(skritter.data.reviews.loadAll),
                skritter.async.apply(skritter.data.srsconfigs.loadAll),
                skritter.async.apply(skritter.data.sentences.loadAll),
                skritter.async.apply(skritter.data.strokes.loadAll),
                skritter.async.apply(skritter.data.vocabs.loadAll),
                skritter.async.apply(skritter.data.items.loadAll)
            ], callback);
        },
        /**
         * @method login
         * @param {String} username
         * @param {String} password
         * @param {Function} callback
         */
        login: function(username, password, callback) {
            var self = this;
            skritter.api.authenticateUser(username, password, function(result) {
                if (result.statusCode === 200) {
                    self.set(result);
                    skritter.api.token = result.access_token;
                    self.fetch(function() {
                        skritter.storage.openDatabase(skritter.user.get('user_id'), function() {
                            localStorage.setItem('activeUser', result.user_id);
                            self.set('lastLogin', skritter.fn.getUnixTime());
                            callback(result);
                        });
                    });
                } else {
                    callback(result);
                }
            });
        },
        /**
         * Automatically logs the user out and returns them to home.
         * 
         * @method logout
         */
        logout: function() {
            if (this.isLoggedIn()) {
                skritter.modal.show().setBody('Logging Out').noHeader();
                skritter.storage.deleteAllDatabases(function() {
                    localStorage.removeItem('activeUser');
                    skritter.router.navigate('', {trigger: true, replace: true});
                    document.location.reload();
                });
            }
        },
        /**
         * @method setLastSync
         * @param {Number} time
         * @returns {Number}
         */
        setLastSync: function(time) {
            time = (time) ? time : skritter.fn.getUnixTime();
            if (this.isChinese()) {
                this.set('lastSyncChinese', time);
            } else {
                this.set('lastSyncJapanese', time);
            }
            return time;
        },
        /**
         * A shortcut method for changing user server settings.
         * 
         * @method setSetting
         * @param {String} name
         * @param {String} value
         * @return {Backbone.Model}
         */
        setSetting: function(name, value) {
            var settings = this.get('settings');
            settings[name] = value;
            this.set('settings', settings);
            return this;
        },
        /**
         * @method sync
         * @param {Function} callback
         */
        sync: function(callback) {
            var self = this;
            console.log('syncing from', skritter.moment(this.getLastSync() * 1000).format('YYYY[-]MM[-]DD h:mm:ss a'));
            skritter.async.waterfall([
                /*function(callback) {
                 skritter.modal.setProgress(100, 'Getting Schedule');
                 skritter.api.getItemsCondensed(function(result) {
                 console.log('condensed', result);
                 callback(null, result);
                 });
                 },
                 function(result, callback) {
                 skritter.modal.setProgress(100, 'Saving Schedule');
                 skritter.data.items.add(result.Items, {merge: true});
                 skritter.data.items.cache(callback);
                 },*/
                function() {
                    switch (self.get('syncMethod')) {
                        case 'flash':
                            Sync.methodFlash(callback);
                            break;
                        case 'full':
                            Sync.methodFull(callback);
                            break;
                        case 'partial':
                            Sync.methodPartial(callback);
                            break;
                    }
                }
            ], function() {
                self.setLastSync();
                callback();
            });

            /*skritter.api.getItemsCondensed(function(items) {
             console.log('condensed items', items);
             switch (self.get('syncMethod')) {
             case 'flash':
             Sync.methodFlash(callback);
             break;
             case 'full':
             Sync.methodFull(callback);
             break;
             case 'partial':
             Sync.methodPartial(callback);
             break;
             }
             }, this.getLastSync());*/
        },
        /**
         * A shortcut method for removing user server settings.
         * 
         * @method unsetSetting
         * @param {String} name
         * return {Object}
         */
        unsetSetting: function(name) {
            var settings = this.get('settings');
            delete settings[name];
            this.set('settings', settings);
            return settings;
        }
    });

    return User;
});
(function($, undefined) {
	
	var indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
	var IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;
	var IDBCursor = window.IDBCursor || window.webkitIDBCursor || {};
	if (typeof IDBCursor.PREV === "undefined") {
        IDBCursor.PREV = "prev";
    }
	if (typeof IDBCursor.NEXT === "undefined") {
        IDBCursor.NEXT = "next";
    }

	/**
	 * Best to use the constant IDBTransaction since older version support numeric types while the latest spec
	 * supports strings
	 */
	var IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;

	function getDefaultTransaction(mode) {
		var result = null;
		switch (mode) {
			case 0:
			case 1:
			case "readwrite":
			case "readonly":
				result = mode;
				break;
			default:
				result = IDBTransaction.READ_WRITE || "readwrite";
		}
		return result;
	}

	$.extend({
		/**
		 * The IndexedDB object used to open databases
		 * @param {Object} dbName - name of the database
		 * @param {Object} config - version, onupgradeneeded, onversionchange, schema
		 */
		"indexedDB": function(dbName, config) {
			if (config) {
				// Parse the config argument
				if (typeof config === "number") config = {
					"version": config
				};

				var version = config.version;
				if (config.schema && !version) {
					var max = -1;
					for (var key in config.schema) {
						max = max > key ? max : key;
					}
					version = config.version || max;
				}
			}


			var wrap = {
				"request": function(req, args) {
					return $.Deferred(function(dfd) {
						try {
							var idbRequest = typeof req === "function" ? req(args) : req;
							idbRequest.onsuccess = function(e) {
								
								dfd.resolveWith(idbRequest, [idbRequest.result, e]);
							};
							idbRequest.onerror = function(e) {
								
								dfd.rejectWith(idbRequest, [idbRequest.error, e]);
							};
							if (typeof idbRequest.onblocked !== "undefined" && idbRequest.onblocked === null) {
								idbRequest.onblocked = function(e) {
									
									var res;
									try {
										res = idbRequest.result;
									} catch (e) {
										res = null; // Required for Older Chrome versions, accessing result causes error 
									}
									dfd.notifyWith(idbRequest, [res, e]);
								};
							}
							if (typeof idbRequest.onupgradeneeded !== "undefined" && idbRequest.onupgradeneeded === null) {
								idbRequest.onupgradeneeded = function(e) {
									
									dfd.notifyWith(idbRequest, [idbRequest.result, e]);
								};
							}
						} catch (e) {
							e.name = "exception";
							dfd.rejectWith(idbRequest, ["exception", e]);
						}
					});
				},
				// Wraps the IDBTransaction to return promises, and other dependent methods
				"transaction": function(idbTransaction) {
					return {
						"objectStore": function(storeName) {
							try {
								return wrap.objectStore(idbTransaction.objectStore(storeName));
							} catch (e) {
								idbTransaction.readyState !== idbTransaction.DONE && idbTransaction.abort();
								return wrap.objectStore(null);
							}
						},
						"createObjectStore": function(storeName, storeParams) {
							try {
								return wrap.objectStore(idbTransaction.db.createObjectStore(storeName, storeParams));
							} catch (e) {
								idbTransaction.readyState !== idbTransaction.DONE && idbTransaction.abort();
							}
						},
						"deleteObjectStore": function(storeName) {
							try {
								idbTransaction.db.deleteObjectStore(storeName);
							} catch (e) {
								idbTransaction.readyState !== idbTransaction.DONE && idbTransaction.abort();
							}
						},
						"abort": function() {
							idbTransaction.abort();
						}
					};
				},
				"objectStore": function(idbObjectStore) {
					var result = {};
					// Define CRUD operations
					var crudOps = ["add", "put", "get", "delete", "clear", "count"];
					for (var i = 0; i < crudOps.length; i++) {
						result[crudOps[i]] = (function(op) {
							return function() {
								return wrap.request(function(args) {
									return idbObjectStore[op].apply(idbObjectStore, args);
								}, arguments);
							};
						})(crudOps[i]);
					}

					result.each = function(callback, range, direction) {
						return wrap.cursor(function() {
							if (direction) {
								return idbObjectStore.openCursor(wrap.range(range), direction);
							} else {
								return idbObjectStore.openCursor(wrap.range(range));
							}
						}, callback);
					};

					result.index = function(name) {
						return wrap.index(function() {
							return idbObjectStore.index(name);
						});
					};

					result.createIndex = function(prop, options, indexName) {
						if (arguments.length === 2 && typeof options === "string") {
							indexName = arguments[1];
							options = null;
						}
						if (!indexName) {
							indexName = prop;
						}
						return wrap.index(function() {
							return idbObjectStore.createIndex(indexName, prop, options);
						});
					};

					result.deleteIndex = function(indexName) {
						return idbObjectStore.deleteIndex(indexName);
					};

					return result;
				},

				"range": function(r) {
					if ($.isArray(r)) {
						if (r.length === 1) {
							return IDBKeyRange.only(r[0]);
						} else {
							return IDBKeyRange.bound(r[0], r[1], (typeof r[2] === 'undefined') ? false : r[2], (typeof r[3] === 'undefined') ? false : r[3]);
						}
					} else if (typeof r === "undefined") {
						return null;
					} else {
						return r;
					}
				},

				"cursor": function(idbCursor, callback) {
					return $.Deferred(function(dfd) {
						try {
							
							var cursorReq = typeof idbCursor === "function" ? idbCursor() : idbCursor;
							cursorReq.onsuccess = function(e) {
								
								if (!cursorReq.result) {
									dfd.resolveWith(cursorReq, [null, e]);
									return;
								}
								var elem = {
									// Delete, update do not move 
									"delete": function() {
										return wrap.request(function() {
											return cursorReq.result["delete"]();
										});
									},
									"update": function(data) {
										return wrap.request(function() {
											return cursorReq.result["update"](data);
										});
									},
									"next": function(key) {
										this.data = key;
									},
									"key": cursorReq.result.key,
									"value": cursorReq.result.value
								};
								
								dfd.notifyWith(cursorReq, [elem, e]);
								var result = callback.apply(cursorReq, [elem]);
								
								try {
									if (result === false) {
										dfd.resolveWith(cursorReq, [null, e]);
									} else if (typeof result === "number") {
										cursorReq.result["advance"].apply(cursorReq.result, [result]);
									} else {
										if (elem.data) cursorReq.result["continue"].apply(cursorReq.result, [elem.data]);
										else cursorReq.result["continue"]();
									}
								} catch (e) {
									
									dfd.rejectWith(cursorReq, [cursorReq.result, e]);
								}
							};
							cursorReq.onerror = function(e) {
								
								dfd.rejectWith(cursorReq, [cursorReq.result, e]);
							};
						} catch (e) {
							
							e.type = "exception";
							dfd.rejectWith(cursorReq, [null, e]);
						}
					});
				},

				"index": function(index) {
					try {
						var idbIndex = (typeof index === "function" ? index() : index);
					} catch (e) {
						idbIndex = null;
					}
					
					return {
						"each": function(callback, range, direction) {
							return wrap.cursor(function() {
								if (direction) {
									return idbIndex.openCursor(wrap.range(range), direction);
								} else {
									return idbIndex.openCursor(wrap.range(range));
								}

							}, callback);
						},
						"eachKey": function(callback, range, direction) {
							return wrap.cursor(function() {
								if (direction) {
									return idbIndex.openKeyCursor(wrap.range(range), direction);
								} else {
									return idbIndex.openKeyCursor(wrap.range(range));
								}
							}, callback);
						},
						"get": function(key) {
							if (typeof idbIndex.get === "function") {
								return wrap.request(idbIndex.get(key));
							} else {
								return idbIndex.openCursor(wrap.range(key));
							}
						},
						"count": function() {
							if (typeof idbIndex.count === "function") {
								return wrap.request(idbIndex.count());
							} else {
								throw "Count not implemented for cursors";
							}
						},
						"getKey": function(key) {
							if (typeof idbIndex.getKey === "function") {
								return wrap.request(idbIndex.getKey(key));
							} else {
								return idbIndex.openKeyCursor(wrap.range(key));
							}
						}
					};
				}
			};


			// Start with opening the database
			var dbPromise = wrap.request(function() {
				
				return version ? indexedDB.open(dbName, parseInt(version)) : indexedDB.open(dbName);
			});
			dbPromise.then(function(db, e) {
				
				db.onversionchange = function() {
					// Try to automatically close the database if there is a version change request
					if (!(config && config.onversionchange && config.onversionchange() !== false)) {
						db.close();
					}
				};
			}, function(error, e) {
				
				// Nothing much to do if an error occurs
			}, function(db, e) {
				if (e && e.type === "upgradeneeded") {
					if (config && config.schema) {
						// Assuming that version is always an integer 
						
						for (var i = e.oldVersion + 1; i <= e.newVersion; i++) {
							typeof config.schema[i] === "function" && config.schema[i].call(this, wrap.transaction(this.transaction));
						}
					}
					if (config && typeof config.upgrade === "function") {
						config.upgrade.call(this, wrap.transaction(this.transaction));
					}
				}
			});

			return $.extend(dbPromise, {
				"cmp": function(key1, key2) {
					return indexedDB.cmp(key1, key2);
				},
				"deleteDatabase": function() {
					// Kinda looks ugly coz DB is opened before it needs to be deleted. 
					// Blame it on the API 
					return $.Deferred(function(dfd) {
						dbPromise.then(function(db, e) {
							db.close();
							wrap.request(function() {
								return indexedDB.deleteDatabase(dbName);
							}).then(function(result, e) {
								dfd.resolveWith(this, [result, e]);
							}, function(error, e) {
								dfd.rejectWith(this, [error, e]);
							}, function(db, e) {
								dfd.notifyWith(this, [db, e]);
							});
						}, function(error, e) {
							dfd.rejectWith(this, [error, e]);
						}, function(db, e) {
							dfd.notifyWith(this, [db, e]);
						});
					});
				},
				"transaction": function(storeNames, mode) {
					!$.isArray(storeNames) && (storeNames = [storeNames]);
					mode = getDefaultTransaction(mode);
					return $.Deferred(function(dfd) {
						dbPromise.then(function(db, e) {
							var idbTransaction;
							try {
								
								idbTransaction = db.transaction(storeNames, mode);
								
								idbTransaction.onabort = idbTransaction.onerror = function(e) {
									dfd.rejectWith(idbTransaction, [e]);
								};
								idbTransaction.oncomplete = function(e) {
									dfd.resolveWith(idbTransaction, [e]);
								};
							} catch (e) {
								
								e.type = "exception";
								dfd.rejectWith(this, [e]);
								return;
							}
							try {
								dfd.notifyWith(idbTransaction, [wrap.transaction(idbTransaction)]);
							} catch (e) {
								e.type = "exception";
								dfd.rejectWith(this, [e]);
							}
						}, function(err, e) {
							dfd.rejectWith(this, [e, err]);
						}, function(res, e) {
							
							//dfd.notifyWith(this, ["", e]);
						});

					});
				},
				"objectStore": function(storeName, mode) {
					var me = this,
						result = {};

					function op(callback) {
						return $.Deferred(function(dfd) {
							function onTransactionProgress(trans, callback) {
								try {
									
									callback(trans.objectStore(storeName)).then(function(result, e) {
										dfd.resolveWith(this, [result, e]);
									}, function(err, e) {
										dfd.rejectWith(this, [err, e]);
									});
								} catch (e) {
									
									e.name = "exception";
									dfd.rejectWith(trans, [e, e]);
								}
							}
							me.transaction(storeName, getDefaultTransaction(mode)).then(function() {
								
								// Nothing to do when transaction is complete
							}, function(err, e) {
								// If transaction fails, CrudOp fails
								if (err.code === err.NOT_FOUND_ERR && (mode === true || typeof mode === "object")) {
									
									var db = this.result;
									db.close();
									dbPromise = wrap.request(function() {
										
										return indexedDB.open(dbName, (parseInt(db.version, 10) || 1) + 1);
									});
									dbPromise.then(function(db, e) {
										
										db.onversionchange = function() {
											// Try to automatically close the database if there is a version change request
											if (!(config && config.onversionchange && config.onversionchange() !== false)) {
												db.close();
											}
										};
										me.transaction(storeName, getDefaultTransaction(mode)).then(function() {
											
											// Nothing much to do
										}, function(err, e) {
											dfd.rejectWith(this, [err, e]);
										}, function(trans, e) {
											
											onTransactionProgress(trans, callback);
										});
									}, function(err, e) {
										dfd.rejectWith(this, [err, e]);
									}, function(db, e) {
										if (e.type === "upgradeneeded") {
											try {
												
												db.createObjectStore(storeName, mode === true ? {
													"autoIncrement": true
												} : mode);
												
											} catch (ex) {
												
												dfd.rejectWith(this, [ex, e]);
											}
										}
									});
								} else {
									dfd.rejectWith(this, [err, e]);
								}
							}, function(trans) {
								
								onTransactionProgress(trans, callback);
							});
						});
					}

					function crudOp(opName, args) {
						return op(function(wrappedObjectStore) {
							return wrappedObjectStore[opName].apply(wrappedObjectStore, args);
						});
					}

					function indexOp(opName, indexName, args) {
						return op(function(wrappedObjectStore) {
							var index = wrappedObjectStore.index(indexName);
							return index[opName].apply(index[opName], args);
						});
					}

					var crud = ["add", "delete", "get", "put", "clear", "count", "each"];
					for (var i = 0; i < crud.length; i++) {
						result[crud[i]] = (function(op) {
							return function() {
								return crudOp(op, arguments);
							};
						})(crud[i]);
					}

					result.index = function(indexName) {
						return {
							"each": function(callback, range, direction) {
								return indexOp("each", indexName, [callback, range, direction]);
							},
							"eachKey": function(callback, range, direction) {
								return indexOp("eachKey", indexName, [callback, range, direction]);
							},
							"get": function(key) {
								return indexOp("get", indexName, [key]);
							},
							"count": function() {
								return indexOp("count", indexName, []);
							},
							"getKey": function(key) {
								return indexOp("getKey", indexName, [key]);
							}
						};
					};

					return result;
				}
			});
		}
	});

	$.indexedDB.IDBCursor = IDBCursor;
	$.indexedDB.IDBTransaction = IDBTransaction;
	$.idb = $.indexedDB;
})(jQuery);
define("jquery.indexeddb", function(){});

/**
 * @module Skritter
 * @submodule Storage
 * @author Joshua McFarland
 */
define('storage/IndexedDBAdapter',[
    'jquery.indexeddb'
], function() {
    /**
     * @class IndexedDBAdapter
     * @constructor
     */
    function IndexedDBAdapter() {
        this.database = null;
        this.databaseName = null;
        this.databaseVersion = 1;
    }
    
    /**
     * @method count
     * @param {String} tableName
     * @param {Function} callback
     * @returns {undefined}
     */
    IndexedDBAdapter.prototype.count = function(tableName, callback) {
        var promise = $.indexedDB(this.databaseName).objectStore(tableName).count();
        promise.done(function(count) {
            callback(count);
        });
        promise.fail(function(error) {
            console.error(tableName, error);
        });
    };
    
    /**
     * @method deleteAllDatabases
     * @param {Function} callback
     * @returns {undefined}
     */
    IndexedDBAdapter.prototype.deleteAllDatabases = function(callback) {
        var position = 0;
        var request = window.indexedDB.webkitGetDatabaseNames();
        request.onsuccess = function(event) {
            next();
            function next() {
                var promise = $.indexedDB(event.target.result[position]).deleteDatabase();
                promise.done(function() {
                    if (position < event.target.result.length) {
                        position++;
                        next();
                    } else {
                        callback();
                    }
                });
                promise.fail(function(error) {
                    console.error(error);
                });
            }
        };
    };
    
    /**
     * @method deleteDatabase
     * @param {Function} callback
     * @returns {undefined}
     */
    IndexedDBAdapter.prototype.deleteDatabase = function(callback) {
        var promise = this.database.deleteDatabase();
        promise.done(function() {
            if (typeof callback === 'function')
                callback();
        });
        promise.fail(function(error) {
            console.error(error);
        });
    };
    
    /**
     * @method openDatabase
     * @param {String} databaseName
     * @param {Function} callback
     * @returns {undefined}
     */
    IndexedDBAdapter.prototype.openDatabase = function(databaseName, callback) {
        var self = this;
        this.databaseName = databaseName;
        var promise = $.indexedDB(this.databaseName, {
            version: 1,
            schema: {
                1: function(transaction) {
                    transaction.createObjectStore('decomps', {keyPath: 'writing'});
                    transaction.createObjectStore('items', {keyPath: 'id'});
                    transaction.createObjectStore('reviews', {keyPath: ['itemId', 'submitTime']});
                    transaction.createObjectStore('sentences', {keyPath: 'id'});
                    transaction.createObjectStore('strokes', {keyPath: 'rune'});
                    transaction.createObjectStore('srsconfigs', {keyPath: ['part', 'lang']});
                    transaction.createObjectStore('vocabs', {keyPath: 'id'});
                }
            }
        });
        promise.done(function(event) {
            if (event.objectStoreNames.length === 0) {
                self.deleteAllDatabases(callback);
            } else {
                self.database = promise;
                callback();
            }
        });
        promise.fail(function(error) {
            console.error(databaseName, error);
        });
    };
    
    /**
     * @method getAll
     * @param {String} tableName
     * @param {Function} callback
     * @returns {undefined}
     */
    IndexedDBAdapter.prototype.getAll = function(tableName, callback) {
        var items = [];
        var table = this.database.objectStore(tableName);
        var promise = table.each(function(item) {
            items.push(item.value);
        });
        promise.done(function() {
            callback(items);
        });
        promise.fail(function(error) {
            console.error(tableName, error);
        });
    };
    
    /**
     * @method getItems
     * @param {String} tableName
     * @param {Arrau} keys
     * @param {Function} callback
     * @returns {undefined}
     */
    IndexedDBAdapter.prototype.getItems = function(tableName, keys, callback) {
        var position = 0;
        var items = [];
        var table = this.database.objectStore(tableName);
        keys = Array.isArray(keys) ? keys : [keys];
        getNext();
        function getNext() {
            if (position < keys.length) {
                var promise = table.get(keys[position]);
                promise.done(function(item) {
                    position++;
                    items.push(item);
                    getNext();
                });
                promise.fail(function(error) {
                    console.error(tableName, keys[position], error);
                });
            } else {
                callback(items);
            }
        }
    };
    
    /**
     * @method removeItems
     * @param {String} tableName
     * @param {Array} keys
     * @param {Function} callback
     * @returns {undefined}
     */
    IndexedDBAdapter.prototype.removeItems = function(tableName, keys, callback) {
        var position = 0;
        var table = this.database.objectStore(tableName);
        keys = Array.isArray(keys) ? keys : [keys];
        removeNext();
        function removeNext() {
            if (position < keys.length) {
                var promise = table.delete(keys[position]);
                promise.done(function() {
                    position++;
                    removeNext();
                });
                promise.fail(function(error) {
                    console.error(tableName, keys[position], error);
                });
            } else {
                if (typeof callback === 'function')
                    callback();
            }
        }
    };
    
    /**
     * @method setItems
     * @param {String} tableName
     * @param {Array} items
     * @param {Function} callback
     * @returns {undefined}
     */
    IndexedDBAdapter.prototype.setItems = function(tableName, items, callback) {
        var position = 0;
        var table = this.database.objectStore(tableName);
        var setNext = function() {
            if (position < items.length) {
                var promise = table.put(items[position]);
                promise.done(function() {
                    position++;
                    setNext();
                });
                promise.fail(function(error) {
                    console.error(tableName, items[position], error);
                });
            } else {
                if (typeof callback === 'function')
                    callback();
            }
        };
        
        if (items) {
            items = Array.isArray(items) ? items : [items];
            setNext();
        } else {
            callback();
        }
    };

    return IndexedDBAdapter;
});
/*global setImmediate: false, setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root, previous_async;

    root = this;
    if (root != null) {
      previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        var called = false;
        return function() {
            if (called) throw new Error("Callback was already called.");
            called = true;
            fn.apply(root, arguments);
        }
    }

    //// cross-browser compatiblity functions ////

    var _each = function (arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _each(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _each(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        if (typeof setImmediate === 'function') {
            async.nextTick = function (fn) {
                // not a direct alias for IE10 compatibility
                setImmediate(fn);
            };
            async.setImmediate = async.nextTick;
        }
        else {
            async.nextTick = function (fn) {
                setTimeout(fn, 0);
            };
            async.setImmediate = async.nextTick;
        }
    }
    else {
        async.nextTick = process.nextTick;
        if (typeof setImmediate !== 'undefined') {
            async.setImmediate = setImmediate;
        }
        else {
            async.setImmediate = async.nextTick;
        }
    }

    async.each = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _each(arr, function (x) {
            iterator(x, only_once(function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback(null);
                    }
                }
            }));
        });
    };
    async.forEach = async.each;

    async.eachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback(null);
                    }
                    else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };
    async.forEachSeries = async.eachSeries;

    async.eachLimit = function (arr, limit, iterator, callback) {
        var fn = _eachLimit(limit);
        fn.apply(null, [arr, iterator, callback]);
    };
    async.forEachLimit = async.eachLimit;

    var _eachLimit = function (limit) {

        return function (arr, iterator, callback) {
            callback = callback || function () {};
            if (!arr.length || limit <= 0) {
                return callback();
            }
            var completed = 0;
            var started = 0;
            var running = 0;

            (function replenish () {
                if (completed >= arr.length) {
                    return callback();
                }

                while (running < limit && started < arr.length) {
                    started += 1;
                    running += 1;
                    iterator(arr[started - 1], function (err) {
                        if (err) {
                            callback(err);
                            callback = function () {};
                        }
                        else {
                            completed += 1;
                            running -= 1;
                            if (completed >= arr.length) {
                                callback();
                            }
                            else {
                                replenish();
                            }
                        }
                    });
                }
            })();
        };
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.each].concat(args));
        };
    };
    var doParallelLimit = function(limit, fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [_eachLimit(limit)].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.eachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (err, v) {
                results[x.index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = function (arr, limit, iterator, callback) {
        return _mapLimit(limit)(arr, iterator, callback);
    };

    var _mapLimit = function(limit) {
        return doParallelLimit(limit, _asyncMap);
    };

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {};
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        if (!keys.length) {
            return callback(null);
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            _each(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (_keys(results).length === keys.length) {
                callback(null, results);
                callback = function () {};
            }
        });

        _each(keys, function (k) {
            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];
            var taskCallback = function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _each(_keys(results), function(rkey) {
                        safeResults[rkey] = results[rkey];
                    });
                    safeResults[k] = args;
                    callback(err, safeResults);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {};
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor !== Array) {
          var err = new Error('First argument to waterfall must be an array of functions');
          return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback.apply(null, arguments);
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.setImmediate(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    var _parallel = function(eachfn, tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            eachfn.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            eachfn.each(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.parallel = function (tasks, callback) {
        _parallel({ map: async.map, each: async.each }, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.eachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            if (test()) {
                async.doWhilst(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doUntil = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            if (!test()) {
                async.doUntil(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.queue = function (worker, concurrency) {
        if (concurrency === undefined) {
            concurrency = 1;
        }
        function _insert(q, data, pos, callback) {
          if(data.constructor !== Array) {
              data = [data];
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  callback: typeof callback === 'function' ? callback : null
              };

              if (pos) {
                q.tasks.unshift(item);
              } else {
                q.tasks.push(item);
              }

              if (q.saturated && q.tasks.length === concurrency) {
                  q.saturated();
              }
              async.setImmediate(q.process);
          });
        }

        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
              _insert(q, data, false, callback);
            },
            unshift: function (data, callback) {
              _insert(q, data, true, callback);
            },
            process: function () {
                if (workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if (q.empty && q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    var next = function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if (q.drain && q.tasks.length + workers === 0) {
                            q.drain();
                        }
                        q.process();
                    };
                    var cb = only_once(next);
                    worker(task.data, cb);
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            }
        };
        return q;
    };

    async.cargo = function (worker, payload) {
        var working     = false,
            tasks       = [];

        var cargo = {
            tasks: tasks,
            payload: payload,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
                if(data.constructor !== Array) {
                    data = [data];
                }
                _each(data, function(task) {
                    tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    if (cargo.saturated && tasks.length === payload) {
                        cargo.saturated();
                    }
                });
                async.setImmediate(cargo.process);
            },
            process: function process() {
                if (working) return;
                if (tasks.length === 0) {
                    if(cargo.drain) cargo.drain();
                    return;
                }

                var ts = typeof payload === 'number'
                            ? tasks.splice(0, payload)
                            : tasks.splice(0);

                var ds = _map(ts, function (task) {
                    return task.data;
                });

                if(cargo.empty) cargo.empty();
                working = true;
                worker(ds, function () {
                    working = false;

                    var args = arguments;
                    _each(ts, function (data) {
                        if (data.callback) {
                            data.callback.apply(null, args);
                        }
                    });

                    process();
                });
            },
            length: function () {
                return tasks.length;
            },
            running: function () {
                return working;
            }
        };
        return cargo;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _each(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                callback.apply(null, memo[key]);
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
      return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };

    async.times = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.map(counter, iterator, callback);
    };

    async.timesSeries = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.mapSeries(counter, iterator, callback);
    };

    async.compose = function (/* functions... */) {
        var fns = Array.prototype.reverse.call(arguments);
        return function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([function () {
                    var err = arguments[0];
                    var nextargs = Array.prototype.slice.call(arguments, 1);
                    cb(err, nextargs);
                }]))
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        };
    };

    var _applyEach = function (eachfn, fns /*args...*/) {
        var go = function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            return eachfn(fns, function (fn, cb) {
                fn.apply(that, args.concat([cb]));
            },
            callback);
        };
        if (arguments.length > 2) {
            var args = Array.prototype.slice.call(arguments, 2);
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };
    async.applyEach = doParallel(_applyEach);
    async.applyEachSeries = doSeries(_applyEach);

    async.forever = function (fn, callback) {
        function next(err) {
            if (err) {
                if (callback) {
                    return callback(err);
                }
                throw err;
            }
            fn(next);
        }
        next();
    };

    // AMD / RequireJS
    if (typeof define !== 'undefined' && define.amd) {
        define('async',[], function () {
            return async;
        });
    }
    // Node.js
    else if (typeof module !== 'undefined' && module.exports) {
        module.exports = async;
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

//! moment.js
//! version : 2.4.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {

    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = "2.4.0",
        round = Math.round,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for language config files
        languages = {},

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/i, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO seperator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123

        // preliminary iso regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000)
        isoRegex = /^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d:?\d\d|Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            'YYYY-MM-DD',
            'GGGG-[W]WW',
            'GGGG-[W]WW-E',
            'YYYY-DDD'
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d{1,3}/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.lang().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.lang().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.lang().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.lang().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.lang().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return this.weekYear();
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return this.isoWeekYear();
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.lang().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.lang().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ":" + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(10 * a / 6), 4);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            X    : function () {
                return this.unix();
            }
        },

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.lang().ordinal(func.call(this, a), period);
        };
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    /************************************
        Constructors
    ************************************/

    function Language() {

    }

    // Moment prototype object
    function Moment(config) {
        checkOverflow(config);
        extend(this, config);
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // store reference to input for deterministic cloning
        this._input = duration;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            years * 12;

        this._data = {};

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (b.hasOwnProperty(i)) {
                a[i] = b[i];
            }
        }

        if (b.hasOwnProperty("toString")) {
            a.toString = b.toString;
        }

        if (b.hasOwnProperty("valueOf")) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength) {
        var output = number + '';
        while (output.length < targetLength) {
            output = '0' + output;
        }
        return output;
    }

    // helper function for _.addTime and _.subtractTime
    function addOrSubtractDurationFromMoment(mom, duration, isAdding, ignoreUpdateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months,
            minutes,
            hours;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        // store the minutes and hours so we can restore them
        if (days || months) {
            minutes = mom.minute();
            hours = mom.hour();
        }
        if (days) {
            mom.date(mom.date() + days * isAdding);
        }
        if (months) {
            mom.month(mom.month() + months * isAdding);
        }
        if (milliseconds && !ignoreUpdateOffset) {
            moment.updateOffset(mom);
        }
        // restore the minutes and hours after possibly changing dst
        if (days || months) {
            mom.minute(minutes);
            mom.hour(hours);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return  Object.prototype.toString.call(input) === '[object Date]' ||
                input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop,
            index;

        for (prop in inputObject) {
            if (inputObject.hasOwnProperty(prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment.fn._lang[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment.fn._lang, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function initializeParsingFlags(config) {
        config._pf = {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0;
            }
        }
        return m._isValid;
    }

    function normalizeLanguage(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    /************************************
        Languages
    ************************************/


    extend(Language.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        },

        _months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                if (!this._monthsParse[i]) {
                    mom = moment.utc([2000, i]);
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LT : "h:mm A",
            L : "MM/DD/YYYY",
            LL : "MMMM D YYYY",
            LLL : "MMMM D YYYY LT",
            LLLL : "dddd, MMMM D YYYY LT"
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },

        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom) : output;
        },

        _relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },
        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace("%d", number);
        },
        _ordinal : "%d",

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    // Loads a language definition into the `languages` cache.  The function
    // takes a key and optionally values.  If not in the browser and no values
    // are provided, it will load the language file module.  As a convenience,
    // this function also returns the language values.
    function loadLang(key, values) {
        values.abbr = key;
        if (!languages[key]) {
            languages[key] = new Language();
        }
        languages[key].set(values);
        return languages[key];
    }

    // Remove a language from the `languages` cache. Mostly useful in tests.
    function unloadLang(key) {
        delete languages[key];
    }

    // Determines which language definition to use and returns it.
    //
    // With no parameters, it will return the global language.  If you
    // pass in a language key, such as 'en', it will return the
    // definition for 'en', so long as 'en' has already been loaded using
    // moment.lang.
    function getLangDefinition(key) {
        var i = 0, j, lang, next, split,
            get = function (k) {
                if (!languages[k] && hasModule) {
                    try {
                        require('./lang/' + k);
                    } catch (e) { }
                }
                return languages[k];
            };

        if (!key) {
            return moment.fn._lang;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            lang = get(key);
            if (lang) {
                return lang;
            }
            key = [key];
        }

        //pick the language from the array
        //try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        //substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        while (i < key.length) {
            split = normalizeLanguage(key[i]).split('-');
            j = split.length;
            next = normalizeLanguage(key[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                lang = get(split.slice(0, j).join('-'));
                if (lang) {
                    return lang;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return moment.fn._lang;
    }

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = "";
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {

        if (!m.isValid()) {
            return m.lang().invalidDate();
        }

        format = expandFormat(format, m.lang());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, lang) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return lang.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a;
        switch (token) {
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return parseTokenFourDigits;
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return parseTokenSixDigits;
        case 'S':
        case 'SS':
        case 'SSS':
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return getLangDefinition(config._l)._meridiemParse;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), "i"));
            return a;
        }
    }

    function timezoneMinutesFromString(string) {
        var tzchunk = (parseTokenTimezone.exec(string) || [])[0],
            parts = (tzchunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? -minutes : minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = getLangDefinition(config._l).monthsParse(input);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
            break;
        case 'YYYY' :
        case 'YYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._isPm = getLangDefinition(config._l).isPM(input);
            break;
        // 24 HOUR
        case 'H' : // fall through to hh
        case 'HH' : // fall through to hh
        case 'h' : // fall through to hh
        case 'hh' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = timezoneMinutesFromString(input);
            break;
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'dd':
        case 'ddd':
        case 'dddd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gg':
        case 'gggg':
        case 'GG':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = input;
            }
            break;
        }
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate,
            yearToUse, fixYear, w, temp, lang, weekday, week;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            fixYear = function (val) {
                return val ?
                  (val.length < 3 ? (parseInt(val, 10) > 68 ? '19' + val : '20' + val) : val) :
                  (config._a[YEAR] == null ? moment().weekYear() : config._a[YEAR]);
            };

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                temp = dayOfYearFromWeeks(fixYear(w.GG), w.W || 1, w.E, 4, 1);
            }
            else {
                lang = getLangDefinition(config._l);
                weekday = w.d != null ?  parseWeekday(w.d, lang) :
                  (w.e != null ?  parseInt(w.e, 10) + lang._week.dow : 0);

                week = parseInt(w.w, 10) || 1;

                //if we're parsing 'd', then the low day numbers may be next week
                if (w.d != null && weekday < lang._week.dow) {
                    week++;
                }

                temp = dayOfYearFromWeeks(fixYear(w.gg), week, weekday, lang._week.doy, lang._week.dow);
            }

            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = config._a[YEAR] == null ? currentDate[YEAR] : config._a[YEAR];

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // add the offsets to the time to be parsed so that we can have a clean array for checking isValid
        input[HOUR] += toInt((config._tzm || 0) / 60);
        input[MINUTE] += toInt((config._tzm || 0) % 60);

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var lang = getLangDefinition(config._l),
            string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, lang).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // handle am pm
        if (config._isPm && config._a[HOUR] < 12) {
            config._a[HOUR] += 12;
        }
        // if is 12 am, change hours to 0
        if (config._isPm === false && config._a[HOUR] === 12) {
            config._a[HOUR] = 0;
        }

        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = extend({}, config);
            initializeParsingFlags(tempConfig);
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function makeDateFromString(config) {
        var i,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 4; i > 0; i--) {
                if (match[i]) {
                    // match[5] should be "T" or undefined
                    config._f = isoDates[i - 1] + (match[6] || " ");
                    break;
                }
            }
            for (i = 0; i < 4; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (parseTokenTimezone.exec(string)) {
                config._f += "Z";
            }
            makeDateFromStringAndFormat(config);
        }
        else {
            config._d = new Date(string);
        }
    }

    function makeDateFromInput(config) {
        var input = config._i,
            matched = aspNetJsonRegex.exec(input);

        if (input === undefined) {
            config._d = new Date();
        } else if (matched) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = input.slice(0);
            dateFromConfig(config);
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else {
            config._d = new Date(input);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, language) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = language.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {
        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(milliseconds, withoutSuffix, lang) {
        var seconds = round(Math.abs(milliseconds) / 1000),
            minutes = round(seconds / 60),
            hours = round(minutes / 60),
            days = round(hours / 24),
            years = round(days / 365),
            args = seconds < 45 && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < 45 && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < 22 && ['hh', hours] ||
                days === 1 && ['d'] ||
                days <= 25 && ['dd', days] ||
                days <= 45 && ['M'] ||
                days < 345 && ['MM', round(days / 30)] ||
                years === 1 && ['y'] || ['yy', years];
        args[2] = withoutSuffix;
        args[3] = milliseconds > 0;
        args[4] = lang;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = new Date(Date.UTC(year, 0)).getUTCDay(),
            daysToAdd, dayOfYear;

        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f;

        if (typeof config._pf === 'undefined') {
            initializeParsingFlags(config);
        }

        if (input === null) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = getLangDefinition().preparse(input);
        }

        if (moment.isMoment(input)) {
            config = extend({}, input);

            config._d = new Date(+input._d);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        return new Moment(config);
    }

    moment = function (input, format, lang, strict) {
        if (typeof(lang) === "boolean") {
            strict = lang;
            lang = undefined;
        }
        return makeMoment({
            _i : input,
            _f : format,
            _l : lang,
            _strict : strict,
            _isUTC : false
        });
    };

    // creating with utc
    moment.utc = function (input, format, lang, strict) {
        var m;

        if (typeof(lang) === "boolean") {
            strict = lang;
            lang = undefined;
        }
        m = makeMoment({
            _useUTC : true,
            _isUTC : true,
            _l : lang,
            _i : input,
            _f : format,
            _strict : strict
        }).utc();

        return m;
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var isDuration = moment.isDuration(input),
            isNumber = (typeof input === 'number'),
            duration = (isDuration ? input._input : (isNumber ? {} : input)),
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            timeEmpty,
            dateTimeEmpty;

        if (isNumber) {
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === "-") ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === "-") ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        }

        ret = new Duration(duration);

        if (isDuration && input.hasOwnProperty('_lang')) {
            ret._lang = input._lang;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    moment.lang = function (key, values) {
        var r;
        if (!key) {
            return moment.fn._lang._abbr;
        }
        if (values) {
            loadLang(normalizeLanguage(key), values);
        } else if (values === null) {
            unloadLang(key);
            key = 'en';
        } else if (!languages[key]) {
            getLangDefinition(key);
        }
        r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);
        return r._abbr;
    };

    // returns language data
    moment.langData = function (key) {
        if (key && key._lang && key._lang._abbr) {
            key = key._lang._abbr;
        }
        return getLangDefinition(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment;
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function (input) {
        return moment(input).parseZone();
    };

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d + ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().lang('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            return formatMoment(moment(this).utc(), 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {

            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function () {
            return this.zone(0);
        },

        local : function () {
            this.zone(0);
            this._isUTC = false;
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.lang().postformat(output);
        },

        add : function (input, val) {
            var dur;
            // switch args to support add('s', 1) and add(1, 's')
            if (typeof input === 'string') {
                dur = moment.duration(+val, input);
            } else {
                dur = moment.duration(input, val);
            }
            addOrSubtractDurationFromMoment(this, dur, 1);
            return this;
        },

        subtract : function (input, val) {
            var dur;
            // switch args to support subtract('s', 1) and subtract(1, 's')
            if (typeof input === 'string') {
                dur = moment.duration(+val, input);
            } else {
                dur = moment.duration(input, val);
            }
            addOrSubtractDurationFromMoment(this, dur, -1);
            return this;
        },

        diff : function (input, units, asFloat) {
            var that = this._isUTC ? moment(input).zone(this._offset || 0) : moment(input).local(),
                zoneDiff = (this.zone() - that.zone()) * 6e4,
                diff, output;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month') {
                // average number of days in the months in the given dates
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
                // difference in months
                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
                // adjust by taking difference in days, average number of days
                // and dst in the given months.
                output += ((this - moment(this).startOf('month')) -
                        (that - moment(that).startOf('month'))) / diff;
                // same as above but with zones, to negate all dst
                output -= ((this.zone() - moment(this).startOf('month').zone()) -
                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
                if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = (this - that);
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function () {
            var diff = this.diff(moment().zone(this.zone()).startOf('day'), 'days', true),
                format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.lang().calendar(format, this));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.zone() < this.clone().month(0).zone() ||
                this.zone() < this.clone().month(5).zone());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.lang());
                return this.add({ d : input - day });
            } else {
                return day;
            }
        },

        month : function (input) {
            var utc = this._isUTC ? 'UTC' : '',
                dayOfMonth;

            if (input != null) {
                if (typeof input === 'string') {
                    input = this.lang().monthsParse(input);
                    if (typeof input !== 'number') {
                        return this;
                    }
                }

                dayOfMonth = this.date();
                this.date(1);
                this._d['set' + utc + 'Month'](input);
                this.date(Math.min(dayOfMonth, this.daysInMonth()));

                moment.updateOffset(this);
                return this;
            } else {
                return this._d['get' + utc + 'Month']();
            }
        },

        startOf: function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            return this.startOf(units).add((units === 'isoWeek' ? 'week' : units), 1).subtract('ms', 1);
        },

        isAfter: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) > +moment(input).startOf(units);
        },

        isBefore: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) < +moment(input).startOf(units);
        },

        isSame: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) === +moment(input).startOf(units);
        },

        min: function (other) {
            other = moment.apply(null, arguments);
            return other < this ? this : other;
        },

        max: function (other) {
            other = moment.apply(null, arguments);
            return other > this ? this : other;
        },

        zone : function (input) {
            var offset = this._offset || 0;
            if (input != null) {
                if (typeof input === "string") {
                    input = timezoneMinutesFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                this._offset = input;
                this._isUTC = true;
                if (offset !== input) {
                    addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, true);
                }
            } else {
                return this._isUTC ? offset : this._d.getTimezoneOffset();
            }
            return this;
        },

        zoneAbbr : function () {
            return this._isUTC ? "UTC" : "";
        },

        zoneName : function () {
            return this._isUTC ? "Coordinated Universal Time" : "";
        },

        parseZone : function () {
            if (typeof this._i === 'string') {
                this.zone(this._i);
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).zone();
            }

            return (this.zone() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add("d", (input - dayOfYear));
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
            return input == null ? year : this.add("y", (input - year));
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add("y", (input - year));
        },

        week : function (input) {
            var week = this.lang().week(this);
            return input == null ? week : this.add("d", (input - week) * 7);
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add("d", (input - week) * 7);
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;
            return input == null ? weekday : this.add("d", input - weekday);
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                this[units](value);
            }
            return this;
        },

        // If passed a language key, it will set the language for this
        // instance.  Otherwise, it will return the language configuration
        // variables for this instance.
        lang : function (key) {
            if (key === undefined) {
                return this._lang;
            } else {
                this._lang = getLangDefinition(key);
                return this;
            }
        }
    });

    // helper for adding shortcuts
    function makeGetterAndSetter(name, key) {
        moment.fn[name] = moment.fn[name + 's'] = function (input) {
            var utc = this._isUTC ? 'UTC' : '';
            if (input != null) {
                this._d['set' + utc + key](input);
                moment.updateOffset(this);
                return this;
            } else {
                return this._d['get' + utc + key]();
            }
        };
    }

    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)
    for (i = 0; i < proxyGettersAndSetters.length; i ++) {
        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ''), proxyGettersAndSetters[i]);
    }

    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')
    makeGetterAndSetter('year', 'FullYear');

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    /************************************
        Duration Prototype
    ************************************/


    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);
            data.days = days % 30;

            months += absRound(days / 30);
            data.months = months % 12;

            years = absRound(months / 12);
            data.years = years;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var difference = +this,
                output = relativeTime(difference, !withSuffix, this.lang());

            if (withSuffix) {
                output = this.lang().pastFuture(difference, output);
            }

            return this.lang().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            units = normalizeUnits(units);
            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();
        },

        lang : moment.fn.lang,

        toIsoString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        }
    });

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    function makeDurationAsGetter(name, factor) {
        moment.duration.fn['as' + name] = function () {
            return +this / factor;
        };
    }

    for (i in unitMillisecondFactors) {
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationAsGetter(i, unitMillisecondFactors[i]);
            makeDurationGetter(i.toLowerCase());
        }
    }

    makeDurationAsGetter('Weeks', 6048e5);
    moment.duration.fn.asMonths = function () {
        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;
    };


    /************************************
        Default Lang
    ************************************/


    // Set default language, other languages will inherit from English.
    moment.lang('en', {
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // moment.js language configuration
// language : Moroccan Arabic (ar-ma)
// author : ElFadili Yassine : https://github.com/ElFadiliY
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('ar-ma', {
        months : "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        monthsShort : "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        weekdays : "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort : "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "في %s",
            past : "منذ %s",
            s : "ثوان",
            m : "دقيقة",
            mm : "%d دقائق",
            h : "ساعة",
            hh : "%d ساعات",
            d : "يوم",
            dd : "%d أيام",
            M : "شهر",
            MM : "%d أشهر",
            y : "سنة",
            yy : "%d سنوات"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Arabic (ar)
// author : Abdel Said : https://github.com/abdelsaid
// changes in months, weekdays : Ahmed Elkhatib

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('ar', {
        months : "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
        monthsShort : "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
        weekdays : "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort : "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "في %s",
            past : "منذ %s",
            s : "ثوان",
            m : "دقيقة",
            mm : "%d دقائق",
            h : "ساعة",
            hh : "%d ساعات",
            d : "يوم",
            dd : "%d أيام",
            M : "شهر",
            MM : "%d أشهر",
            y : "سنة",
            yy : "%d سنوات"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : bulgarian (bg)
// author : Krasen Borisov : https://github.com/kraz

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('bg', {
        months : "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
        monthsShort : "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
        weekdays : "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
        weekdaysShort : "нед_пон_вто_сря_чет_пет_съб".split("_"),
        weekdaysMin : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "D.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Днес в] LT',
            nextDay : '[Утре в] LT',
            nextWeek : 'dddd [в] LT',
            lastDay : '[Вчера в] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[В изминалата] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "след %s",
            past : "преди %s",
            s : "няколко секунди",
            m : "минута",
            mm : "%d минути",
            h : "час",
            hh : "%d часа",
            d : "ден",
            dd : "%d дни",
            M : "месец",
            MM : "%d месеца",
            y : "година",
            yy : "%d години"
        },
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : breton (br)
// author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

(function (factory) {
    factory(moment);
}(function (moment) {
    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': "munutenn",
            'MM': "miz",
            'dd': "devezh"
        };
        return number + ' ' + mutation(format[key], number);
    }

    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
        }
    }

    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }

    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }

    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    return moment.lang('br', {
        months : "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
        monthsShort : "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
        weekdays : "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
        weekdaysShort : "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
        weekdaysMin : "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
        longDateFormat : {
            LT : "h[e]mm A",
            L : "DD/MM/YYYY",
            LL : "D [a viz] MMMM YYYY",
            LLL : "D [a viz] MMMM YYYY LT",
            LLLL : "dddd, D [a viz] MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Hiziv da] LT',
            nextDay : '[Warc\'hoazh da] LT',
            nextWeek : 'dddd [da] LT',
            lastDay : '[Dec\'h da] LT',
            lastWeek : 'dddd [paset da] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "a-benn %s",
            past : "%s 'zo",
            s : "un nebeud segondennoù",
            m : "ur vunutenn",
            mm : relativeTimeWithMutation,
            h : "un eur",
            hh : "%d eur",
            d : "un devezh",
            dd : relativeTimeWithMutation,
            M : "ur miz",
            MM : relativeTimeWithMutation,
            y : "ur bloaz",
            yy : specialMutationForYears
        },
        ordinal : function (number) {
            var output = (number === 1) ? 'añ' : 'vet';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : bosnian (bs)
// author : Nedim Cholich : https://github.com/frontyard
// based on (hr) translation by Bojan Marković

(function (factory) {
    factory(moment);
}(function (moment) {

    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }

    return moment.lang('bs', {
		months : "januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar".split("_"),
		monthsShort : "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        weekdays : "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort : "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin : "ne_po_ut_sr_če_pe_su".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "za %s",
            past   : "prije %s",
            s      : "par sekundi",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "dan",
            dd     : translate,
            M      : "mjesec",
            MM     : translate,
            y      : "godinu",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : catalan (ca)
// author : Juan G. Hurtado : https://github.com/juanghurtado

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('ca', {
        months : "Gener_Febrer_Març_Abril_Maig_Juny_Juliol_Agost_Setembre_Octubre_Novembre_Desembre".split("_"),
        monthsShort : "Gen._Febr._Mar._Abr._Mai._Jun._Jul._Ag._Set._Oct._Nov._Des.".split("_"),
        weekdays : "Diumenge_Dilluns_Dimarts_Dimecres_Dijous_Divendres_Dissabte".split("_"),
        weekdaysShort : "Dg._Dl._Dt._Dc._Dj._Dv._Ds.".split("_"),
        weekdaysMin : "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextDay : function () {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastDay : function () {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "en %s",
            past : "fa %s",
            s : "uns segons",
            m : "un minut",
            mm : "%d minuts",
            h : "una hora",
            hh : "%d hores",
            d : "un dia",
            dd : "%d dies",
            M : "un mes",
            MM : "%d mesos",
            y : "un any",
            yy : "%d anys"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : czech (cs)
// author : petrbela : https://github.com/petrbela

(function (factory) {
    factory(moment);
}(function (moment) {
    var months = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),
        monthsShort = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");

    function plural(n) {
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár vteřin' : 'pár vteřinami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dní');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'měsíce' : 'měsíců');
            } else {
                return result + 'měsíci';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
        }
    }

    return moment.lang('cs', {
        months : months,
        monthsShort : monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort)),
        weekdays : "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
        weekdaysShort : "ne_po_út_st_čt_pá_so".split("_"),
        weekdaysMin : "ne_po_út_st_čt_pá_so".split("_"),
        longDateFormat : {
            LT: "H:mm",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[dnes v] LT",
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v neděli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve středu v] LT';
                case 4:
                    return '[ve čtvrtek v] LT';
                case 5:
                    return '[v pátek v] LT';
                case 6:
                    return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulou neděli v] LT';
                case 1:
                case 2:
                    return '[minulé] dddd [v] LT';
                case 3:
                    return '[minulou středu v] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
                }
            },
            sameElse: "L"
        },
        relativeTime : {
            future : "za %s",
            past : "před %s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : chuvash (cv)
// author : Anatoly Mironov : https://github.com/mirontoli

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('cv', {
        months : "кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав".split("_"),
        monthsShort : "кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш".split("_"),
        weekdays : "вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун".split("_"),
        weekdaysShort : "выр_тун_ытл_юн_кĕç_эрн_шăм".split("_"),
        weekdaysMin : "вр_тн_ыт_юн_кç_эр_шм".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD-MM-YYYY",
            LL : "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]",
            LLL : "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT",
            LLLL : "dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT"
        },
        calendar : {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ĕнер] LT [сехетре]',
            nextWeek: '[Çитес] dddd LT [сехетре]',
            lastWeek: '[Иртнĕ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (output) {
                var affix = /сехет$/i.exec(output) ? "рен" : /çул$/i.exec(output) ? "тан" : "ран";
                return output + affix;
            },
            past : "%s каялла",
            s : "пĕр-ик çеккунт",
            m : "пĕр минут",
            mm : "%d минут",
            h : "пĕр сехет",
            hh : "%d сехет",
            d : "пĕр кун",
            dd : "%d кун",
            M : "пĕр уйăх",
            MM : "%d уйăх",
            y : "пĕр çул",
            yy : "%d çул"
        },
        ordinal : '%d-мĕш',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Welsh (cy)
// author : Robert Allen

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang("cy", {
        months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
        monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
        weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
        weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
        // time formats are the same as en-gb
        longDateFormat: {
            LT: "HH:mm",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY LT",
            LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: "mewn %s",
            past: "%s yn &#244;l",
            s: "ychydig eiliadau",
            m: "munud",
            mm: "%d munud",
            h: "awr",
            hh: "%d awr",
            d: "diwrnod",
            dd: "%d diwrnod",
            M: "mis",
            MM: "%d mis",
            y: "blwyddyn",
            yy: "%d flynedd"
        },
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];

            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }

            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : danish (da)
// author : Ulrik Nielsen : https://github.com/mrbase

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('da', {
        months : "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays : "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort : "søn_man_tir_ons_tor_fre_lør".split("_"),
        weekdaysMin : "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D. MMMM, YYYY LT"
        },
        calendar : {
            sameDay : '[I dag kl.] LT',
            nextDay : '[I morgen kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[I går kl.] LT',
            lastWeek : '[sidste] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "%s siden",
            s : "få sekunder",
            m : "et minut",
            mm : "%d minutter",
            h : "en time",
            hh : "%d timer",
            d : "en dag",
            dd : "%d dage",
            M : "en måned",
            MM : "%d måneder",
            y : "et år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : german (de)
// author : lluchs : https://github.com/lluchs
// author: Menelion Elensúle: https://github.com/Oire

(function (factory) {
    factory(moment);
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    return moment.lang('de', {
        months : "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort : "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays : "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort : "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin : "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        longDateFormat : {
            LT: "H:mm [Uhr]",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Heute um] LT",
            sameElse: "L",
            nextDay: '[Morgen um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime : {
            future : "in %s",
            past : "vor %s",
            s : "ein paar Sekunden",
            m : processRelativeTime,
            mm : "%d Minuten",
            h : processRelativeTime,
            hh : "%d Stunden",
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : modern greek (el)
// author : Aggelos Karalias : https://github.com/mehiel

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('el', {
        monthsNominativeEl : "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
        monthsGenitiveEl : "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
        months : function (momentToFormat, format) {
            if (/D/.test(format.substring(0, format.indexOf("MMMM")))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort : "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
        weekdays : "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
        weekdaysShort : "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
        weekdaysMin : "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendarEl : {
            sameDay : '[Σήμερα {}] LT',
            nextDay : '[Αύριο {}] LT',
            nextWeek : 'dddd [{}] LT',
            lastDay : '[Χθες {}] LT',
            lastWeek : '[την προηγούμενη] dddd [{}] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();

            return output.replace("{}", (hours % 12 === 1 ? "στη" : "στις"));
        },
        relativeTime : {
            future : "σε %s",
            past : "%s πριν",
            s : "δευτερόλεπτα",
            m : "ένα λεπτό",
            mm : "%d λεπτά",
            h : "μία ώρα",
            hh : "%d ώρες",
            d : "μία μέρα",
            dd : "%d μέρες",
            M : "ένας μήνας",
            MM : "%d μήνες",
            y : "ένας χρόνος",
            yy : "%d χρόνια"
        },
        ordinal : function (number) {
            return number + 'η';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : australian english (en-au)

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('en-au', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : canadian english (en-ca)
// author : Jonathan Abourbih : https://github.com/jonbca

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('en-ca', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "YYYY-MM-DD",
            LL : "D MMMM, YYYY",
            LLL : "D MMMM, YYYY LT",
            LLLL : "dddd, D MMMM, YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });
}));
// moment.js language configuration
// language : great britain english (en-gb)
// author : Chris Gedrim : https://github.com/chrisgedrim

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('en-gb', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : esperanto (eo)
// author : Colin Dean : https://github.com/colindean
// komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
//          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('eo', {
        months : "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
        weekdays : "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),
        weekdaysShort : "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D[-an de] MMMM, YYYY",
            LLL : "D[-an de] MMMM, YYYY LT",
            LLLL : "dddd, [la] D[-an de] MMMM, YYYY LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar : {
            sameDay : '[Hodiaŭ je] LT',
            nextDay : '[Morgaŭ je] LT',
            nextWeek : 'dddd [je] LT',
            lastDay : '[Hieraŭ je] LT',
            lastWeek : '[pasinta] dddd [je] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "je %s",
            past : "antaŭ %s",
            s : "sekundoj",
            m : "minuto",
            mm : "%d minutoj",
            h : "horo",
            hh : "%d horoj",
            d : "tago",//ne 'diurno', ĉar estas uzita por proksimumo
            dd : "%d tagoj",
            M : "monato",
            MM : "%d monatoj",
            y : "jaro",
            yy : "%d jaroj"
        },
        ordinal : "%da",
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : spanish (es)
// author : Julio Napurí : https://github.com/julionc

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('es', {
        months : "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
        monthsShort : "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
        weekdays : "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
        weekdaysShort : "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
        weekdaysMin : "Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [de] YYYY",
            LLL : "D [de] MMMM [de] YYYY LT",
            LLLL : "dddd, D [de] MMMM [de] YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "en %s",
            past : "hace %s",
            s : "unos segundos",
            m : "un minuto",
            mm : "%d minutos",
            h : "una hora",
            hh : "%d horas",
            d : "un día",
            dd : "%d días",
            M : "un mes",
            MM : "%d meses",
            y : "un año",
            yy : "%d años"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : estonian (et)
// author : Henry Kehlmann : https://github.com/madhenry

(function (factory) {
    factory(moment);
}(function (moment) {
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        return (isFuture || withoutSuffix) ? 'paari sekundi' : 'paar sekundit';
    }

    return moment.lang('et', {
        months        : "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
        monthsShort   : "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
        weekdays      : "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
        weekdaysShort : "P_E_T_K_N_R_L".split("_"),
        weekdaysMin   : "P_E_T_K_N_R_L".split("_"),
        longDateFormat : {
            LT   : "H:mm",
            L    : "DD.MM.YYYY",
            LL   : "D. MMMM YYYY",
            LLL  : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[Täna,] LT',
            nextDay  : '[Homme,] LT',
            nextWeek : '[Järgmine] dddd LT',
            lastDay  : '[Eile,] LT',
            lastWeek : '[Eelmine] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s pärast",
            past   : "%s tagasi",
            s      : translateSeconds,
            m      : "minut",
            mm     : "%d minutit",
            h      : "tund",
            hh     : "%d tundi",
            d      : "päev",
            dd     : "%d päeva",
            M      : "kuu",
            MM     : "%d kuud",
            y      : "aasta",
            yy     : "%d aastat"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : euskara (eu)
// author : Eneko Illarramendi : https://github.com/eillarra

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('eu', {
        months : "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
        monthsShort : "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
        weekdays : "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
        weekdaysShort : "ig._al._ar._az._og._ol._lr.".split("_"),
        weekdaysMin : "ig_al_ar_az_og_ol_lr".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "YYYY[ko] MMMM[ren] D[a]",
            LLL : "YYYY[ko] MMMM[ren] D[a] LT",
            LLLL : "dddd, YYYY[ko] MMMM[ren] D[a] LT",
            l : "YYYY-M-D",
            ll : "YYYY[ko] MMM D[a]",
            lll : "YYYY[ko] MMM D[a] LT",
            llll : "ddd, YYYY[ko] MMM D[a] LT"
        },
        calendar : {
            sameDay : '[gaur] LT[etan]',
            nextDay : '[bihar] LT[etan]',
            nextWeek : 'dddd LT[etan]',
            lastDay : '[atzo] LT[etan]',
            lastWeek : '[aurreko] dddd LT[etan]',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s barru",
            past : "duela %s",
            s : "segundo batzuk",
            m : "minutu bat",
            mm : "%d minutu",
            h : "ordu bat",
            hh : "%d ordu",
            d : "egun bat",
            dd : "%d egun",
            M : "hilabete bat",
            MM : "%d hilabete",
            y : "urte bat",
            yy : "%d urte"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Persian Language
// author : Ebrahim Byagowi : https://github.com/ebraminio

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    }, numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    return moment.lang('fa', {
        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY LT',
            LLLL : 'dddd, D MMMM YYYY LT'
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "قبل از ظهر";
            } else {
                return "بعد از ظهر";
            }
        },
        calendar : {
            sameDay : '[امروز ساعت] LT',
            nextDay : '[فردا ساعت] LT',
            nextWeek : 'dddd [ساعت] LT',
            lastDay : '[دیروز ساعت] LT',
            lastWeek : 'dddd [پیش] [ساعت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'در %s',
            past : '%s پیش',
            s : 'چندین ثانیه',
            m : 'یک دقیقه',
            mm : '%d دقیقه',
            h : 'یک ساعت',
            hh : '%d ساعت',
            d : 'یک روز',
            dd : '%d روز',
            M : 'یک ماه',
            MM : '%d ماه',
            y : 'یک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        ordinal : '%dم',
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : finnish (fi)
// author : Tarmo Aidantausta : https://github.com/bleadof

(function (factory) {
    factory(moment);
}(function (moment) {
    var numbers_past = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbers_future = ['nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
                          numbers_past[7], numbers_past[8], numbers_past[9]];

    function translate(number, withoutSuffix, key, isFuture) {
        var result = "";
        switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'päivän' : 'päivä';
        case 'dd':
            result = isFuture ? 'päivän' : 'päivää';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
        }
        result = verbal_number(number, isFuture) + " " + result;
        return result;
    }

    function verbal_number(number, isFuture) {
        return number < 10 ? (isFuture ? numbers_future[number] : numbers_past[number]) : number;
    }

    return moment.lang('fi', {
        months : "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
        monthsShort : "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
        weekdays : "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
        weekdaysShort : "su_ma_ti_ke_to_pe_la".split("_"),
        weekdaysMin : "su_ma_ti_ke_to_pe_la".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD.MM.YYYY",
            LL : "Do MMMM[ta] YYYY",
            LLL : "Do MMMM[ta] YYYY, [klo] LT",
            LLLL : "dddd, Do MMMM[ta] YYYY, [klo] LT",
            l : "D.M.YYYY",
            ll : "Do MMM YYYY",
            lll : "Do MMM YYYY, [klo] LT",
            llll : "ddd, Do MMM YYYY, [klo] LT"
        },
        calendar : {
            sameDay : '[tänään] [klo] LT',
            nextDay : '[huomenna] [klo] LT',
            nextWeek : 'dddd [klo] LT',
            lastDay : '[eilen] [klo] LT',
            lastWeek : '[viime] dddd[na] [klo] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s päästä",
            past : "%s sitten",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : "%d.",
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : faroese (fo)
// author : Ragnar Johannesen : https://github.com/ragnar123

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('fo', {
        months : "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays : "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
        weekdaysShort : "sun_mán_týs_mik_hós_frí_ley".split("_"),
        weekdaysMin : "su_má_tý_mi_hó_fr_le".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D. MMMM, YYYY LT"
        },
        calendar : {
            sameDay : '[Í dag kl.] LT',
            nextDay : '[Í morgin kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[Í gjár kl.] LT',
            lastWeek : '[síðstu] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "um %s",
            past : "%s síðani",
            s : "fá sekund",
            m : "ein minutt",
            mm : "%d minuttir",
            h : "ein tími",
            hh : "%d tímar",
            d : "ein dagur",
            dd : "%d dagar",
            M : "ein mánaði",
            MM : "%d mánaðir",
            y : "eitt ár",
            yy : "%d ár"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : canadian french (fr-ca)
// author : Jonathan Abourbih : https://github.com/jonbca

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('fr-ca', {
        months : "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort : "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        weekdays : "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort : "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dans %s",
            past : "il y a %s",
            s : "quelques secondes",
            m : "une minute",
            mm : "%d minutes",
            h : "une heure",
            hh : "%d heures",
            d : "un jour",
            dd : "%d jours",
            M : "un mois",
            MM : "%d mois",
            y : "un an",
            yy : "%d ans"
        },
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : '');
        }
    });
}));
// moment.js language configuration
// language : french (fr)
// author : John Fischer : https://github.com/jfroffice

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('fr', {
        months : "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort : "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        weekdays : "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort : "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dans %s",
            past : "il y a %s",
            s : "quelques secondes",
            m : "une minute",
            mm : "%d minutes",
            h : "une heure",
            hh : "%d heures",
            d : "un jour",
            dd : "%d jours",
            M : "un mois",
            MM : "%d mois",
            y : "un an",
            yy : "%d ans"
        },
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : '');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : galician (gl)
// author : Juan G. Hurtado : https://github.com/juanghurtado

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('gl', {
        months : "Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),
        monthsShort : "Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),
        weekdays : "Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),
        weekdaysShort : "Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),
        weekdaysMin : "Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextDay : function () {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            lastDay : function () {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
            },
            lastWeek : function () {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : function (str) {
                if (str === "uns segundos") {
                    return "nuns segundos";
                }
                return "en " + str;
            },
            past : "hai %s",
            s : "uns segundos",
            m : "un minuto",
            mm : "%d minutos",
            h : "unha hora",
            hh : "%d horas",
            d : "un día",
            dd : "%d días",
            M : "un mes",
            MM : "%d meses",
            y : "un ano",
            yy : "%d anos"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Hebrew (he)
// author : Tomer Cohen : https://github.com/tomer
// author : Moshe Simantov : https://github.com/DevelopmentIL
// author : Tal Ater : https://github.com/TalAter

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('he', {
        months : "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
        monthsShort : "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
        weekdays : "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
        weekdaysShort : "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
        weekdaysMin : "א_ב_ג_ד_ה_ו_ש".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [ב]MMMM YYYY",
            LLL : "D [ב]MMMM YYYY LT",
            LLLL : "dddd, D [ב]MMMM YYYY LT",
            l : "D/M/YYYY",
            ll : "D MMM YYYY",
            lll : "D MMM YYYY LT",
            llll : "ddd, D MMM YYYY LT"
        },
        calendar : {
            sameDay : '[היום ב־]LT',
            nextDay : '[מחר ב־]LT',
            nextWeek : 'dddd [בשעה] LT',
            lastDay : '[אתמול ב־]LT',
            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "בעוד %s",
            past : "לפני %s",
            s : "מספר שניות",
            m : "דקה",
            mm : "%d דקות",
            h : "שעה",
            hh : function (number) {
                if (number === 2) {
                    return "שעתיים";
                }
                return number + " שעות";
            },
            d : "יום",
            dd : function (number) {
                if (number === 2) {
                    return "יומיים";
                }
                return number + " ימים";
            },
            M : "חודש",
            MM : function (number) {
                if (number === 2) {
                    return "חודשיים";
                }
                return number + " חודשים";
            },
            y : "שנה",
            yy : function (number) {
                if (number === 2) {
                    return "שנתיים";
                }
                return number + " שנים";
            }
        }
    });
}));
// moment.js language configuration
// language : hindi (hi)
// author : Mayank Singhal : https://github.com/mayanksinghal

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.lang('hi', {
        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split("_"),
        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split("_"),
        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split("_"),
        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split("_"),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split("_"),
        longDateFormat : {
            LT : "A h:mm बजे",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[कल] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[कल] LT',
            lastWeek : '[पिछले] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s में",
            past : "%s पहले",
            s : "कुछ ही क्षण",
            m : "एक मिनट",
            mm : "%d मिनट",
            h : "एक घंटा",
            hh : "%d घंटे",
            d : "एक दिन",
            dd : "%d दिन",
            M : "एक महीने",
            MM : "%d महीने",
            y : "एक वर्ष",
            yy : "%d वर्ष"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "रात";
            } else if (hour < 10) {
                return "सुबह";
            } else if (hour < 17) {
                return "दोपहर";
            } else if (hour < 20) {
                return "शाम";
            } else {
                return "रात";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : hrvatski (hr)
// author : Bojan Marković : https://github.com/bmarkovic

// based on (sl) translation by Robert Sedovšek

(function (factory) {
    factory(moment);
}(function (moment) {

    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }

    return moment.lang('hr', {
        months : "sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),
        monthsShort : "sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
        weekdays : "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort : "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin : "ne_po_ut_sr_če_pe_su".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "za %s",
            past   : "prije %s",
            s      : "par sekundi",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "dan",
            dd     : translate,
            M      : "mjesec",
            MM     : translate,
            y      : "godinu",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : hungarian (hu)
// author : Adam Brunner : https://github.com/adambrunner

(function (factory) {
    factory(moment);
}(function (moment) {
    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');

    function translate(number, withoutSuffix, key, isFuture) {
        var num = number,
            suffix;

        switch (key) {
        case 's':
            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }

        return '';
    }

    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    return moment.lang('hu', {
        months : "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
        monthsShort : "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
        weekdays : "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
        weekdaysShort : "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
        weekdaysMin : "v_h_k_sze_cs_p_szo".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "YYYY.MM.DD.",
            LL : "YYYY. MMMM D.",
            LLL : "YYYY. MMMM D., LT",
            LLLL : "YYYY. MMMM D., dddd LT"
        },
        calendar : {
            sameDay : '[ma] LT[-kor]',
            nextDay : '[holnap] LT[-kor]',
            nextWeek : function () {
                return week.call(this, true);
            },
            lastDay : '[tegnap] LT[-kor]',
            lastWeek : function () {
                return week.call(this, false);
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s múlva",
            past : "%s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Bahasa Indonesia (id)
// author : Mohammad Satrio Utomo : https://github.com/tyok
// reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('id', {
        months : "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),
        weekdays : "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
        weekdaysShort : "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
        weekdaysMin : "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY [pukul] LT",
            LLLL : "dddd, D MMMM YYYY [pukul] LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Besok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kemarin pukul] LT',
            lastWeek : 'dddd [lalu pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "dalam %s",
            past : "%s yang lalu",
            s : "beberapa detik",
            m : "semenit",
            mm : "%d menit",
            h : "sejam",
            hh : "%d jam",
            d : "sehari",
            dd : "%d hari",
            M : "sebulan",
            MM : "%d bulan",
            y : "setahun",
            yy : "%d tahun"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : icelandic (is)
// author : Hinrik Örn Sigurðsson : https://github.com/hinrik

(function (factory) {
    factory(moment);
}(function (moment) {
    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
        case 'm':
            return withoutSuffix ? 'mínúta' : 'mínútu';
        case 'mm':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
            } else if (withoutSuffix) {
                return result + 'mínúta';
            }
            return result + 'mínútu';
        case 'hh':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dögum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'mánuður';
            }
            return isFuture ? 'mánuð' : 'mánuði';
        case 'MM':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'mánuðir';
                }
                return result + (isFuture ? 'mánuði' : 'mánuðum');
            } else if (withoutSuffix) {
                return result + 'mánuður';
            }
            return result + (isFuture ? 'mánuð' : 'mánuði');
        case 'y':
            return withoutSuffix || isFuture ? 'ár' : 'ári';
        case 'yy':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
            }
            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    return moment.lang('is', {
        months : "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
        weekdays : "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
        weekdaysShort : "sun_mán_þri_mið_fim_fös_lau".split("_"),
        weekdaysMin : "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY [kl.] LT",
            LLLL : "dddd, D. MMMM YYYY [kl.] LT"
        },
        calendar : {
            sameDay : '[í dag kl.] LT',
            nextDay : '[á morgun kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[í gær kl.] LT',
            lastWeek : '[síðasta] dddd [kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "eftir %s",
            past : "fyrir %s síðan",
            s : translate,
            m : translate,
            mm : translate,
            h : "klukkustund",
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : italian (it)
// author : Lorenzo : https://github.com/aliem
// author: Mattia Larentis: https://github.com/nostalgiaz

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('it', {
        months : "Gennaio_Febbraio_Marzo_Aprile_Maggio_Giugno_Luglio_Agosto_Settembre_Ottobre_Novembre_Dicembre".split("_"),
        monthsShort : "Gen_Feb_Mar_Apr_Mag_Giu_Lug_Ago_Set_Ott_Nov_Dic".split("_"),
        weekdays : "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),
        weekdaysShort : "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),
        weekdaysMin : "D_L_Ma_Me_G_V_S".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: '[lo scorso] dddd [alle] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? "tra" : "in") + " " + s;
            },
            past : "%s fa",
            s : "secondi",
            m : "un minuto",
            mm : "%d minuti",
            h : "un'ora",
            hh : "%d ore",
            d : "un giorno",
            dd : "%d giorni",
            M : "un mese",
            MM : "%d mesi",
            y : "un anno",
            yy : "%d anni"
        },
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : japanese (ja)
// author : LI Long : https://github.com/baryon

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('ja', {
        months : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
        weekdaysShort : "日_月_火_水_木_金_土".split("_"),
        weekdaysMin : "日_月_火_水_木_金_土".split("_"),
        longDateFormat : {
            LT : "Ah時m分",
            L : "YYYY/MM/DD",
            LL : "YYYY年M月D日",
            LLL : "YYYY年M月D日LT",
            LLLL : "YYYY年M月D日LT dddd"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "午前";
            } else {
                return "午後";
            }
        },
        calendar : {
            sameDay : '[今日] LT',
            nextDay : '[明日] LT',
            nextWeek : '[来週]dddd LT',
            lastDay : '[昨日] LT',
            lastWeek : '[前週]dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s後",
            past : "%s前",
            s : "数秒",
            m : "1分",
            mm : "%d分",
            h : "1時間",
            hh : "%d時間",
            d : "1日",
            dd : "%d日",
            M : "1ヶ月",
            MM : "%dヶ月",
            y : "1年",
            yy : "%d年"
        }
    });
}));
// moment.js language configuration
// language : Georgian (ka)
// author : Irakli Janiashvili : https://github.com/irakli-janiashvili

(function (factory) {
    factory(moment);
}(function (moment) {

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            'accusative': 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },

        nounCase = (/D[oD] *MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            'accusative': 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
        },

        nounCase = (/(წინა|შემდეგ)/).test(format) ?
            'accusative' :
            'nominative';

        return weekdays[nounCase][m.day()];
    }

    return moment.lang('ka', {
        months : monthsCaseReplace,
        monthsShort : "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
        weekdaysMin : "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[დღეს] LT[-ზე]',
            nextDay : '[ხვალ] LT[-ზე]',
            lastDay : '[გუშინ] LT[-ზე]',
            nextWeek : '[შემდეგ] dddd LT[-ზე]',
            lastWeek : '[წინა] dddd LT-ზე',
            sameElse : 'L'
        },
        relativeTime : {
            future : function (s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                    s.replace(/ი$/, "ში") :
                    s + "ში";
            },
            past : function (s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                    return s.replace(/(ი|ე)$/, "ის წინ");
                }
                if ((/წელი/).test(s)) {
                    return s.replace(/წელი$/, "წლის წინ");
                }
            },
            s : "რამდენიმე წამი",
            m : "წუთი",
            mm : "%d წუთი",
            h : "საათი",
            hh : "%d საათი",
            d : "დღე",
            dd : "%d დღე",
            M : "თვე",
            MM : "%d თვე",
            y : "წელი",
            yy : "%d წელი"
        },
        ordinal : function (number) {
            if (number === 0) {
                return number;
            }

            if (number === 1) {
                return number + "-ლი";
            }

            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return "მე-" + number;
            }

            return number + "-ე";
        },
        week : {
            dow : 1,
            doy : 7
        }
    });
}));
// moment.js language configuration
// language : korean (ko)
// author : Kyungwook, Park : https://github.com/kyungw00k

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('ko', {
        months : "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        monthsShort : "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        weekdays : "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
        weekdaysShort : "일_월_화_수_목_금_토".split("_"),
        weekdaysMin : "일_월_화_수_목_금_토".split("_"),
        longDateFormat : {
            LT : "A h시 mm분",
            L : "YYYY.MM.DD",
            LL : "YYYY년 MMMM D일",
            LLL : "YYYY년 MMMM D일 LT",
            LLLL : "YYYY년 MMMM D일 dddd LT"
        },
        meridiem : function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        },
        calendar : {
            sameDay : '오늘 LT',
            nextDay : '내일 LT',
            nextWeek : 'dddd LT',
            lastDay : '어제 LT',
            lastWeek : '지난주 dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s 후",
            past : "%s 전",
            s : "몇초",
            ss : "%d초",
            m : "일분",
            mm : "%d분",
            h : "한시간",
            hh : "%d시간",
            d : "하루",
            dd : "%d일",
            M : "한달",
            MM : "%d달",
            y : "일년",
            yy : "%d년"
        },
        ordinal : '%d일'
    });
}));
// moment.js language configuration
// language : Lithuanian (lt)
// author : Mindaugas Mozūras : https://github.com/mmozuras

(function (factory) {
    factory(moment);
}(function (moment) {
    var units = {
        "m" : "minutė_minutės_minutę",
        "mm": "minutės_minučių_minutes",
        "h" : "valanda_valandos_valandą",
        "hh": "valandos_valandų_valandas",
        "d" : "diena_dienos_dieną",
        "dd": "dienos_dienų_dienas",
        "M" : "mėnuo_mėnesio_mėnesį",
        "MM": "mėnesiai_mėnesių_mėnesius",
        "y" : "metai_metų_metus",
        "yy": "metai_metų_metus"
    },
    weekDays = "pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis_sekmadienis".split("_");

    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return "kelios sekundės";
        } else {
            return isFuture ? "kelių sekundžių" : "kelias sekundes";
        }
    }

    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }

    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }

    function forms(key) {
        return units[key].split("_");
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }

    function relativeWeekDay(moment, format) {
        var nominative = format.indexOf('dddd LT') === -1,
            weekDay = weekDays[moment.weekday()];

        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + "į";
    }

    return moment.lang("lt", {
        months : "sausio_vasario_kovo_balandžio_gegužės_biržėlio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
        monthsShort : "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
        weekdays : relativeWeekDay,
        weekdaysShort : "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
        weekdaysMin : "S_P_A_T_K_Pn_Š".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "YYYY [m.] MMMM D [d.]",
            LLL : "YYYY [m.] MMMM D [d.], LT [val.]",
            LLLL : "YYYY [m.] MMMM D [d.], dddd, LT [val.]",
            l : "YYYY-MM-DD",
            ll : "YYYY [m.] MMMM D [d.]",
            lll : "YYYY [m.] MMMM D [d.], LT [val.]",
            llll : "YYYY [m.] MMMM D [d.], ddd, LT [val.]"
        },
        calendar : {
            sameDay : "[Šiandien] LT",
            nextDay : "[Rytoj] LT",
            nextWeek : "dddd LT",
            lastDay : "[Vakar] LT",
            lastWeek : "[Praėjusį] dddd LT",
            sameElse : "L"
        },
        relativeTime : {
            future : "po %s",
            past : "prieš %s",
            s : translateSeconds,
            m : translateSingular,
            mm : translate,
            h : translateSingular,
            hh : translate,
            d : translateSingular,
            dd : translate,
            M : translateSingular,
            MM : translate,
            y : translateSingular,
            yy : translate
        },
        ordinal : function (number) {
            return number + '-oji';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : latvian (lv)
// author : Kristaps Karlsons : https://github.com/skakri

(function (factory) {
    factory(moment);
}(function (moment) {
    var units = {
        'mm': 'minūti_minūtes_minūte_minūtes',
        'hh': 'stundu_stundas_stunda_stundas',
        'dd': 'dienu_dienas_diena_dienas',
        'MM': 'mēnesi_mēnešus_mēnesis_mēneši',
        'yy': 'gadu_gadus_gads_gadi'
    };

    function format(word, number, withoutSuffix) {
        var forms = word.split('_');
        if (withoutSuffix) {
            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
        } else {
            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
        }
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }

    return moment.lang('lv', {
        months : "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
        weekdays : "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
        weekdaysShort : "Sv_P_O_T_C_Pk_S".split("_"),
        weekdaysMin : "Sv_P_O_T_C_Pk_S".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "YYYY. [gada] D. MMMM",
            LLL : "YYYY. [gada] D. MMMM, LT",
            LLLL : "YYYY. [gada] D. MMMM, dddd, LT"
        },
        calendar : {
            sameDay : '[Šodien pulksten] LT',
            nextDay : '[Rīt pulksten] LT',
            nextWeek : 'dddd [pulksten] LT',
            lastDay : '[Vakar pulksten] LT',
            lastWeek : '[Pagājušā] dddd [pulksten] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s vēlāk",
            past : "%s agrāk",
            s : "dažas sekundes",
            m : "minūti",
            mm : relativeTimeWithPlural,
            h : "stundu",
            hh : relativeTimeWithPlural,
            d : "dienu",
            dd : relativeTimeWithPlural,
            M : "mēnesi",
            MM : relativeTimeWithPlural,
            y : "gadu",
            yy : relativeTimeWithPlural
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : malayalam (ml)
// author : Floyd Pink : https://github.com/floydpink

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('ml', {
        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split("_"),
        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split("_"),
        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split("_"),
        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split("_"),
        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split("_"),
        longDateFormat : {
            LT : "A h:mm -നു",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[ഇന്ന്] LT',
            nextDay : '[നാളെ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ഇന്നലെ] LT',
            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s കഴിഞ്ഞ്",
            past : "%s മുൻപ്",
            s : "അൽപ നിമിഷങ്ങൾ",
            m : "ഒരു മിനിറ്റ്",
            mm : "%d മിനിറ്റ്",
            h : "ഒരു മണിക്കൂർ",
            hh : "%d മണിക്കൂർ",
            d : "ഒരു ദിവസം",
            dd : "%d ദിവസം",
            M : "ഒരു മാസം",
            MM : "%d മാസം",
            y : "ഒരു വർഷം",
            yy : "%d വർഷം"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "രാത്രി";
            } else if (hour < 12) {
                return "രാവിലെ";
            } else if (hour < 17) {
                return "ഉച്ച കഴിഞ്ഞ്";
            } else if (hour < 20) {
                return "വൈകുന്നേരം";
            } else {
                return "രാത്രി";
            }
        }
    });
}));
// moment.js language configuration
// language : Marathi (mr)
// author : Harshad Kale : https://github.com/kalehv

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.lang('mr', {
        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split("_"),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split("_"),
        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split("_"),
        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split("_"),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split("_"),
        longDateFormat : {
            LT : "A h:mm वाजता",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[उद्या] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s नंतर",
            past : "%s पूर्वी",
            s : "सेकंद",
            m: "एक मिनिट",
            mm: "%d मिनिटे",
            h : "एक तास",
            hh : "%d तास",
            d : "एक दिवस",
            dd : "%d दिवस",
            M : "एक महिना",
            MM : "%d महिने",
            y : "एक वर्ष",
            yy : "%d वर्षे"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem: function (hour, minute, isLower)
        {
            if (hour < 4) {
                return "रात्री";
            } else if (hour < 10) {
                return "सकाळी";
            } else if (hour < 17) {
                return "दुपारी";
            } else if (hour < 20) {
                return "सायंकाळी";
            } else {
                return "रात्री";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Bahasa Malaysia (ms-MY)
// author : Weldan Jamili : https://github.com/weldan

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('ms-my', {
        months : "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
        monthsShort : "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
        weekdays : "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
        weekdaysShort : "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
        weekdaysMin : "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY [pukul] LT",
            LLLL : "dddd, D MMMM YYYY [pukul] LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "dalam %s",
            past : "%s yang lepas",
            s : "beberapa saat",
            m : "seminit",
            mm : "%d minit",
            h : "sejam",
            hh : "%d jam",
            d : "sehari",
            dd : "%d hari",
            M : "sebulan",
            MM : "%d bulan",
            y : "setahun",
            yy : "%d tahun"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : norwegian bokmål (nb)
// authors : Espen Hovlandsdal : https://github.com/rexxars
//           Sigurd Gartmann : https://github.com/sigurdga

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('nb', {
        months : "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
        weekdays : "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort : "sø._ma._ti._on._to._fr._lø.".split("_"),
        weekdaysMin : "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "H.mm",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY [kl.] LT",
            LLLL : "dddd D. MMMM YYYY [kl.] LT"
        },
        calendar : {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "for %s siden",
            s : "noen sekunder",
            m : "ett minutt",
            mm : "%d minutter",
            h : "en time",
            hh : "%d timer",
            d : "en dag",
            dd : "%d dager",
            M : "en måned",
            MM : "%d måneder",
            y : "ett år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : nepali/nepalese
// author : suvash : https://github.com/suvash

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.lang('ne', {
        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split("_"),
        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split("_"),
        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split("_"),
        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split("_"),
        weekdaysMin : 'आइ._सो._मङ्_बु._बि._शु._श.'.split("_"),
        longDateFormat : {
            LT : "Aको h:mm बजे",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 3) {
                return "राती";
            } else if (hour < 10) {
                return "बिहान";
            } else if (hour < 15) {
                return "दिउँसो";
            } else if (hour < 18) {
                return "बेलुका";
            } else if (hour < 20) {
                return "साँझ";
            } else {
                return "राती";
            }
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[भोली] LT',
            nextWeek : '[आउँदो] dddd[,] LT',
            lastDay : '[हिजो] LT',
            lastWeek : '[गएको] dddd[,] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%sमा",
            past : "%s अगाडी",
            s : "केही समय",
            m : "एक मिनेट",
            mm : "%d मिनेट",
            h : "एक घण्टा",
            hh : "%d घण्टा",
            d : "एक दिन",
            dd : "%d दिन",
            M : "एक महिना",
            MM : "%d महिना",
            y : "एक बर्ष",
            yy : "%d बर्ष"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : dutch (nl)
// author : Joris Röling : https://github.com/jjupiter

(function (factory) {
    factory(moment);
}(function (moment) {
    var monthsShortWithDots = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
        monthsShortWithoutDots = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");

    return moment.lang('nl', {
        months : "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
        monthsShort : function (m, format) {
            if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        weekdays : "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort : "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin : "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD-MM-YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "over %s",
            past : "%s geleden",
            s : "een paar seconden",
            m : "één minuut",
            mm : "%d minuten",
            h : "één uur",
            hh : "%d uur",
            d : "één dag",
            dd : "%d dagen",
            M : "één maand",
            MM : "%d maanden",
            y : "één jaar",
            yy : "%d jaar"
        },
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : norwegian nynorsk (nn)
// author : https://github.com/mechuwind

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('nn', {
        months : "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays : "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
        weekdaysShort : "sun_mån_tys_ons_tor_fre_lau".split("_"),
        weekdaysMin : "su_må_ty_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregående] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "for %s siden",
            s : "noen sekund",
            m : "ett minutt",
            mm : "%d minutt",
            h : "en time",
            hh : "%d timar",
            d : "en dag",
            dd : "%d dagar",
            M : "en månad",
            MM : "%d månader",
            y : "ett år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : polish (pl)
// author : Rafal Hirsz : https://github.com/evoL

(function (factory) {
    factory(moment);
}(function (moment) {
    var monthsNominative = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),
        monthsSubjective = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");

    function plural(n) {
        return (n % 10 < 5) && (n % 10 > 1) && (~~(n / 10) !== 1);
    }

    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'minuta' : 'minutę';
        case 'mm':
            return result + (plural(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix  ? 'godzina'  : 'godzinę';
        case 'hh':
            return result + (plural(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (plural(number) ? 'miesiące' : 'miesięcy');
        case 'yy':
            return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    return moment.lang('pl', {
        months : function (momentToFormat, format) {
            if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort : "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
        weekdays : "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
        weekdaysShort : "nie_pon_wt_śr_czw_pt_sb".split("_"),
        weekdaysMin : "N_Pn_Wt_Śr_Cz_Pt_So".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: '[W] dddd [o] LT',
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[W zeszłą niedzielę o] LT';
                case 3:
                    return '[W zeszłą środę o] LT';
                case 6:
                    return '[W zeszłą sobotę o] LT';
                default:
                    return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "za %s",
            past : "%s temu",
            s : "kilka sekund",
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : "1 dzień",
            dd : '%d dni',
            M : "miesiąc",
            MM : translate,
            y : "rok",
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : brazilian portuguese (pt-br)
// author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('pt-br', {
        months : "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),
        monthsShort : "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
        weekdays : "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
        weekdaysShort : "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
        weekdaysMin : "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [de] YYYY",
            LLL : "D [de] MMMM [de] YYYY LT",
            LLLL : "dddd, D [de] MMMM [de] YYYY LT"
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "em %s",
            past : "%s atrás",
            s : "segundos",
            m : "um minuto",
            mm : "%d minutos",
            h : "uma hora",
            hh : "%d horas",
            d : "um dia",
            dd : "%d dias",
            M : "um mês",
            MM : "%d meses",
            y : "um ano",
            yy : "%d anos"
        },
        ordinal : '%dº'
    });
}));
// moment.js language configuration
// language : portuguese (pt)
// author : Jefferson : https://github.com/jalex79

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('pt', {
        months : "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),
        monthsShort : "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
        weekdays : "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
        weekdaysShort : "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
        weekdaysMin : "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [de] YYYY",
            LLL : "D [de] MMMM [de] YYYY LT",
            LLLL : "dddd, D [de] MMMM [de] YYYY LT"
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "em %s",
            past : "%s atrás",
            s : "segundos",
            m : "um minuto",
            mm : "%d minutos",
            h : "uma hora",
            hh : "%d horas",
            d : "um dia",
            dd : "%d dias",
            M : "um mês",
            MM : "%d meses",
            y : "um ano",
            yy : "%d anos"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : romanian (ro)
// author : Vlad Gurdiga : https://github.com/gurdiga
// author : Valentin Agachi : https://github.com/avaly

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('ro', {
        months : "Ianuarie_Februarie_Martie_Aprilie_Mai_Iunie_Iulie_August_Septembrie_Octombrie_Noiembrie_Decembrie".split("_"),
        monthsShort : "Ian_Feb_Mar_Apr_Mai_Iun_Iul_Aug_Sep_Oct_Noi_Dec".split("_"),
        weekdays : "Duminică_Luni_Marţi_Miercuri_Joi_Vineri_Sâmbătă".split("_"),
        weekdaysShort : "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
        weekdaysMin : "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY H:mm",
            LLLL : "dddd, D MMMM YYYY H:mm"
        },
        calendar : {
            sameDay: "[azi la] LT",
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "peste %s",
            past : "%s în urmă",
            s : "câteva secunde",
            m : "un minut",
            mm : "%d minute",
            h : "o oră",
            hh : "%d ore",
            d : "o zi",
            dd : "%d zile",
            M : "o lună",
            MM : "%d luni",
            y : "un an",
            yy : "%d ani"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : russian (ru)
// author : Viktorminator : https://github.com/Viktorminator
// Author : Menelion Elensúle : https://github.com/Oire

(function (factory) {
    factory(moment);
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'минута_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function monthsShortCaseReplace(m, format) {
        var monthsShort = {
            'nominative': 'янв_фев_мар_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return monthsShort[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
        },

        nounCase = (/\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/).test(format) ?
            'accusative' :
            'nominative';

        return weekdays[nounCase][m.day()];
    }

    return moment.lang('ru', {
        months : monthsCaseReplace,
        monthsShort : monthsShortCaseReplace,
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "вс_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin : "вс_пн_вт_ср_чт_пт_сб".split("_"),
        monthsParse : [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY г.",
            LLL : "D MMMM YYYY г., LT",
            LLLL : "dddd, D MMMM YYYY г., LT"
        },
        calendar : {
            sameDay: '[Сегодня в] LT',
            nextDay: '[Завтра в] LT',
            lastDay: '[Вчера в] LT',
            nextWeek: function () {
                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[В прошлое] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                    return '[В прошлый] dddd [в] LT';
                case 3:
                case 5:
                case 6:
                    return '[В прошлую] dddd [в] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "через %s",
            past : "%s назад",
            s : "несколько секунд",
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : "час",
            hh : relativeTimeWithPlural,
            d : "день",
            dd : relativeTimeWithPlural,
            M : "месяц",
            MM : relativeTimeWithPlural,
            y : "год",
            yy : relativeTimeWithPlural
        },

        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "ночи";
            } else if (hour < 12) {
                return "утра";
            } else if (hour < 17) {
                return "дня";
            } else {
                return "вечера";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-й';
            case 'D':
                return number + '-го';
            case 'w':
            case 'W':
                return number + '-я';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : slovak (sk)
// author : Martin Minka : https://github.com/k2s
// based on work of petrbela : https://github.com/petrbela

(function (factory) {
    factory(moment);
}(function (moment) {
    var months = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),
        monthsShort = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");

    function plural(n) {
        return (n > 1) && (n < 5);
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minúty' : 'minút');
            } else {
                return result + 'minútami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodín');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dní');
            } else {
                return result + 'dňami';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
        }
    }

    return moment.lang('sk', {
        months : months,
        monthsShort : monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort)),
        weekdays : "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
        weekdaysShort : "ne_po_ut_st_št_pi_so".split("_"),
        weekdaysMin : "ne_po_ut_st_št_pi_so".split("_"),
        longDateFormat : {
            LT: "H:mm",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[dnes o] LT",
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v nedeľu o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo štvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulú nedeľu o] LT';
                case 1:
                case 2:
                    return '[minulý] dddd [o] LT';
                case 3:
                    return '[minulú stredu o] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [o] LT';
                case 6:
                    return '[minulú sobotu o] LT';
                }
            },
            sameElse: "L"
        },
        relativeTime : {
            future : "za %s",
            past : "pred %s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : slovenian (sl)
// author : Robert Sedovšek : https://github.com/sedovsek

(function (factory) {
    factory(moment);
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2) {
                result += 'minuti';
            } else if (number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minut';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += 'ura';
            } else if (number === 2) {
                result += 'uri';
            } else if (number === 3 || number === 4) {
                result += 'ure';
            } else {
                result += 'ur';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dni';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mesec';
            } else if (number === 2) {
                result += 'meseca';
            } else if (number === 3 || number === 4) {
                result += 'mesece';
            } else {
                result += 'mesecev';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'leto';
            } else if (number === 2) {
                result += 'leti';
            } else if (number === 3 || number === 4) {
                result += 'leta';
            } else {
                result += 'let';
            }
            return result;
        }
    }

    return moment.lang('sl', {
        months : "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
        monthsShort : "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        weekdays : "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
        weekdaysShort : "ned._pon._tor._sre._čet._pet._sob.".split("_"),
        weekdaysMin : "ne_po_to_sr_če_pe_so".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danes ob] LT',
            nextDay  : '[jutri ob] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
                }
            },
            lastDay  : '[včeraj ob] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[prejšnja] dddd [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "čez %s",
            past   : "%s nazaj",
            s      : "nekaj sekund",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "en dan",
            dd     : translate,
            M      : "en mesec",
            MM     : translate,
            y      : "eno leto",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Albanian (sq)
// author : Flakërim Ismani : https://github.com/flakerimi
// author: Menelion Elensúle: https://github.com/Oire (tests)

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('sq', {
        months : "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
        monthsShort : "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
        weekdays : "E Diel_E Hënë_E Marte_E Mërkure_E Enjte_E Premte_E Shtunë".split("_"),
        weekdaysShort : "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
        weekdaysMin : "D_H_Ma_Më_E_P_Sh".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Sot në] LT',
            nextDay : '[Neser në] LT',
            nextWeek : 'dddd [në] LT',
            lastDay : '[Dje në] LT',
            lastWeek : 'dddd [e kaluar në] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "në %s",
            past : "%s me parë",
            s : "disa seconda",
            m : "një minut",
            mm : "%d minutea",
            h : "një orë",
            hh : "%d orë",
            d : "një ditë",
            dd : "%d ditë",
            M : "një muaj",
            MM : "%d muaj",
            y : "një vit",
            yy : "%d vite"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : swedish (sv)
// author : Jens Alm : https://github.com/ulmus

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('sv', {
        months : "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays : "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
        weekdaysShort : "sön_mån_tis_ons_tor_fre_lör".split("_"),
        weekdaysMin : "sö_må_ti_on_to_fr_lö".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: 'dddd LT',
            lastWeek: '[Förra] dddd[en] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "för %s sedan",
            s : "några sekunder",
            m : "en minut",
            mm : "%d minuter",
            h : "en timme",
            hh : "%d timmar",
            d : "en dag",
            dd : "%d dagar",
            M : "en månad",
            MM : "%d månader",
            y : "ett år",
            yy : "%d år"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~ (number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : thai (th)
// author : Kridsada Thanabulpong : https://github.com/sirn

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('th', {
        months : "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
        monthsShort : "มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),
        weekdays : "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
        weekdaysShort : "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"), // yes, three characters difference
        weekdaysMin : "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
        longDateFormat : {
            LT : "H นาฬิกา m นาที",
            L : "YYYY/MM/DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY เวลา LT",
            LLLL : "วันddddที่ D MMMM YYYY เวลา LT"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "ก่อนเที่ยง";
            } else {
                return "หลังเที่ยง";
            }
        },
        calendar : {
            sameDay : '[วันนี้ เวลา] LT',
            nextDay : '[พรุ่งนี้ เวลา] LT',
            nextWeek : 'dddd[หน้า เวลา] LT',
            lastDay : '[เมื่อวานนี้ เวลา] LT',
            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "อีก %s",
            past : "%sที่แล้ว",
            s : "ไม่กี่วินาที",
            m : "1 นาที",
            mm : "%d นาที",
            h : "1 ชั่วโมง",
            hh : "%d ชั่วโมง",
            d : "1 วัน",
            dd : "%d วัน",
            M : "1 เดือน",
            MM : "%d เดือน",
            y : "1 ปี",
            yy : "%d ปี"
        }
    });
}));
// moment.js language configuration
// language : Tagalog/Filipino (tl-ph)
// author : Dan Hagman

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('tl-ph', {
        months : "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
        monthsShort : "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
        weekdays : "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
        weekdaysShort : "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
        weekdaysMin : "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "MM/D/YYYY",
            LL : "MMMM D, YYYY",
            LLL : "MMMM D, YYYY LT",
            LLLL : "dddd, MMMM DD, YYYY LT"
        },
        calendar : {
            sameDay: "[Ngayon sa] LT",
            nextDay: '[Bukas sa] LT',
            nextWeek: 'dddd [sa] LT',
            lastDay: '[Kahapon sa] LT',
            lastWeek: 'dddd [huling linggo] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "sa loob ng %s",
            past : "%s ang nakalipas",
            s : "ilang segundo",
            m : "isang minuto",
            mm : "%d minuto",
            h : "isang oras",
            hh : "%d oras",
            d : "isang araw",
            dd : "%d araw",
            M : "isang buwan",
            MM : "%d buwan",
            y : "isang taon",
            yy : "%d taon"
        },
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : turkish (tr)
// authors : Erhan Gundogan : https://github.com/erhangundogan,
//           Burak Yiğit Kaya: https://github.com/BYK

(function (factory) {
    factory(moment);
}(function (moment) {

    var suffixes = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",

        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",

        3: "'üncü",
        4: "'üncü",
        100: "'üncü",

        6: "'ncı",

        9: "'uncu",
        10: "'uncu",
        30: "'uncu",

        60: "'ıncı",
        90: "'ıncı"
    };

    return moment.lang('tr', {
        months : "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
        monthsShort : "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
        weekdays : "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
        weekdaysShort : "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
        weekdaysMin : "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[yarın saat] LT',
            nextWeek : '[haftaya] dddd [saat] LT',
            lastDay : '[dün] LT',
            lastWeek : '[geçen hafta] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s sonra",
            past : "%s önce",
            s : "birkaç saniye",
            m : "bir dakika",
            mm : "%d dakika",
            h : "bir saat",
            hh : "%d saat",
            d : "bir gün",
            dd : "%d gün",
            M : "bir ay",
            MM : "%d ay",
            y : "bir yıl",
            yy : "%d yıl"
        },
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + "'ıncı";
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;

            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Morocco Central Atlas Tamaziɣt in Latin (tzm-la)
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('tzm-la', {
        months : "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        monthsShort : "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        weekdays : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysShort : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysMin : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[asdkh g] LT",
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dadkh s yan %s",
            past : "yan %s",
            s : "imik",
            m : "minuḍ",
            mm : "%d minuḍ",
            h : "saɛa",
            hh : "%d tassaɛin",
            d : "ass",
            dd : "%d ossan",
            M : "ayowr",
            MM : "%d iyyirn",
            y : "asgas",
            yy : "%d isgasn"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : Morocco Central Atlas Tamaziɣt (tzm)
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('tzm', {
        months : "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        monthsShort : "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        weekdays : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysShort : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysMin : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
            past : "ⵢⴰⵏ %s",
            s : "ⵉⵎⵉⴽ",
            m : "ⵎⵉⵏⵓⴺ",
            mm : "%d ⵎⵉⵏⵓⴺ",
            h : "ⵙⴰⵄⴰ",
            hh : "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
            d : "ⴰⵙⵙ",
            dd : "%d oⵙⵙⴰⵏ",
            M : "ⴰⵢoⵓⵔ",
            MM : "%d ⵉⵢⵢⵉⵔⵏ",
            y : "ⴰⵙⴳⴰⵙ",
            yy : "%d ⵉⵙⴳⴰⵙⵏ"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : ukrainian (uk)
// author : zemlanin : https://github.com/zemlanin
// Author : Menelion Elensúle : https://github.com/Oire

(function (factory) {
    factory(moment);
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'хвилина_хвилини_хвилин',
            'hh': 'година_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
            'accusative': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
        },

        nounCase = (/D[oD]? *MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        },

        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
            'accusative' :
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');

        return weekdays[nounCase][m.day()];
    }

    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    return moment.lang('uk', {
        months : monthsCaseReplace,
        monthsShort : "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY р.",
            LLL : "D MMMM YYYY р., LT",
            LLLL : "dddd, D MMMM YYYY р., LT"
        },
        calendar : {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[Минулої] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "за %s",
            past : "%s тому",
            s : "декілька секунд",
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : "годину",
            hh : relativeTimeWithPlural,
            d : "день",
            dd : relativeTimeWithPlural,
            M : "місяць",
            MM : relativeTimeWithPlural,
            y : "рік",
            yy : relativeTimeWithPlural
        },

        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "ночі";
            } else if (hour < 12) {
                return "ранку";
            } else if (hour < 17) {
                return "дня";
            } else {
                return "вечора";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-й';
            case 'D':
                return number + '-го';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : uzbek
// author : Sardor Muminov : https://github.com/muminoff

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('uz', {
        months : "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
        monthsShort : "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
        weekdays : "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
        weekdaysShort : "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
        weekdaysMin : "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "D MMMM YYYY, dddd LT"
        },
        calendar : {
            sameDay : '[Бугун соат] LT [да]',
            nextDay : '[Эртага] LT [да]',
            nextWeek : 'dddd [куни соат] LT [да]',
            lastDay : '[Кеча соат] LT [да]',
            lastWeek : '[Утган] dddd [куни соат] LT [да]',
            sameElse : 'L'
        },
        relativeTime : {
            future : "Якин %s ичида",
            past : "Бир неча %s олдин",
            s : "фурсат",
            m : "бир дакика",
            mm : "%d дакика",
            h : "бир соат",
            hh : "%d соат",
            d : "бир кун",
            dd : "%d кун",
            M : "бир ой",
            MM : "%d ой",
            y : "бир йил",
            yy : "%d йил"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : vietnamese (vn)
// author : Bang Nguyen : https://github.com/bangnk

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('vn', {
        months : "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
        monthsShort : "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
        weekdays : "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
        weekdaysShort : "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysMin : "CN_T2_T3_T4_T5_T6_T7".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM [năm] YYYY",
            LLL : "D MMMM [năm] YYYY LT",
            LLLL : "dddd, D MMMM [năm] YYYY LT",
            l : "DD/M/YYYY",
            ll : "D MMM YYYY",
            lll : "D MMM YYYY LT",
            llll : "ddd, D MMM YYYY LT"
        },
        calendar : {
            sameDay: "[Hôm nay lúc] LT",
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "%s tới",
            past : "%s trước",
            s : "vài giây",
            m : "một phút",
            mm : "%d phút",
            h : "một giờ",
            hh : "%d giờ",
            d : "một ngày",
            dd : "%d ngày",
            M : "một tháng",
            MM : "%d tháng",
            y : "một năm",
            yy : "%d năm"
        },
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : chinese
// author : suupic : https://github.com/suupic
// author : Zeno Zeng : https://github.com/zenozeng

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('zh-cn', {
        months : "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort : "周日_周一_周二_周三_周四_周五_周六".split("_"),
        weekdaysMin : "日_一_二_三_四_五_六".split("_"),
        longDateFormat : {
            LT : "Ah点mm",
            L : "YYYY年MMMD日",
            LL : "YYYY年MMMD日",
            LLL : "YYYY年MMMD日LT",
            LLLL : "YYYY年MMMD日ddddLT",
            l : "YYYY年MMMD日",
            ll : "YYYY年MMMD日",
            lll : "YYYY年MMMD日LT",
            llll : "YYYY年MMMD日ddddLT"
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return "凌晨";
            } else if (hm < 900) {
                return "早上";
            } else if (hm < 1130) {
                return "上午";
            } else if (hm < 1230) {
                return "中午";
            } else if (hm < 1800) {
                return "下午";
            } else {
                return "晚上";
            }
        },
        calendar : {
            sameDay : function () {
                return this.minutes() === 0 ? "[今天]Ah[点整]" : "[今天]LT";
            },
            nextDay : function () {
                return this.minutes() === 0 ? "[明天]Ah[点整]" : "[明天]LT";
            },
            lastDay : function () {
                return this.minutes() === 0 ? "[昨天]Ah[点整]" : "[昨天]LT";
            },
            nextWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + "dddAh点整" : prefix + "dddAh点mm";
            },
            lastWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + "dddAh点整" : prefix + "dddAh点mm";
            },
            sameElse : 'L'
        },
        ordinal : function (number, period) {
            switch (period) {
            case "d":
            case "D":
            case "DDD":
                return number + "日";
            case "M":
                return number + "月";
            case "w":
            case "W":
                return number + "周";
            default:
                return number;
            }
        },
        relativeTime : {
            future : "%s内",
            past : "%s前",
            s : "几秒",
            m : "1分钟",
            mm : "%d分钟",
            h : "1小时",
            hh : "%d小时",
            d : "1天",
            dd : "%d天",
            M : "1个月",
            MM : "%d个月",
            y : "1年",
            yy : "%d年"
        },
        week : {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js language configuration
// language : traditional chinese (zh-tw)
// author : Ben : https://github.com/ben-lin

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.lang('zh-tw', {
        months : "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort : "週日_週一_週二_週三_週四_週五_週六".split("_"),
        weekdaysMin : "日_一_二_三_四_五_六".split("_"),
        longDateFormat : {
            LT : "Ah點mm",
            L : "YYYY年MMMD日",
            LL : "YYYY年MMMD日",
            LLL : "YYYY年MMMD日LT",
            LLLL : "YYYY年MMMD日ddddLT",
            l : "YYYY年MMMD日",
            ll : "YYYY年MMMD日",
            lll : "YYYY年MMMD日LT",
            llll : "YYYY年MMMD日ddddLT"
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 900) {
                return "早上";
            } else if (hm < 1130) {
                return "上午";
            } else if (hm < 1230) {
                return "中午";
            } else if (hm < 1800) {
                return "下午";
            } else {
                return "晚上";
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        ordinal : function (number, period) {
            switch (period) {
            case "d" :
            case "D" :
            case "DDD" :
                return number + "日";
            case "M" :
                return number + "月";
            case "w" :
            case "W" :
                return number + "週";
            default :
                return number;
            }
        },
        relativeTime : {
            future : "%s內",
            past : "%s前",
            s : "幾秒",
            m : "一分鐘",
            mm : "%d分鐘",
            h : "一小時",
            hh : "%d小時",
            d : "一天",
            dd : "%d天",
            M : "一個月",
            MM : "%d個月",
            y : "一年",
            yy : "%d年"
        }
    });
}));

    moment.lang('en');


    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(deprecate) {
        var warned = false, local_moment = moment;
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        // here, `this` means `window` in the browser, or `global` on the server
        // add `moment` as a global object via a string identifier,
        // for Closure Compiler "advanced" mode
        if (deprecate) {
            this.moment = function () {
                if (!warned && console && console.warn) {
                    warned = true;
                    console.warn(
                            "Accessing Moment through the global scope is " +
                            "deprecated, and will be removed in an upcoming " +
                            "release.");
                }
                return local_moment.apply(null, arguments);
            };
        } else {
            this['moment'] = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
        makeGlobal(true);
    } else if (typeof define === "function" && define.amd) {
        define("moment", ['require','exports','module'],function (require, exports, module) {
            if (module.config().noGlobal !== true) {
                // If user provided noGlobal, he is aware of global
                makeGlobal(module.config().noGlobal === undefined);
            }

            return moment;
        });
    } else {
        makeGlobal();
    }
}).call(this);

/*!
 * Bootstrap v3.0.3 (http://getbootstrap.com)
 * Copyright 2013 Twitter, Inc.
 * Licensed under http://www.apache.org/licenses/LICENSE-2.0
 */

if (typeof jQuery === "undefined") { throw new Error("Bootstrap requires jQuery") }

/* ========================================================================
 * Bootstrap: transition.js v3.0.3
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      'WebkitTransition' : 'webkitTransitionEnd'
    , 'MozTransition'    : 'transitionend'
    , 'OTransition'      : 'oTransitionEnd otransitionend'
    , 'transition'       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false, $el = this
    $(this).one($.support.transition.end, function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.0.3
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.hasClass('alert') ? $this : $this.parent()
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      $parent.trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one($.support.transition.end, removeElement)
        .emulateTransitionEnd(150) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  var old = $.fn.alert

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.0.3
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element = $(element)
    this.options  = $.extend({}, Button.DEFAULTS, options)
  }

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state = state + 'Text'

    if (!data.resetText) $el.data('resetText', $el[val]())

    $el[val](data[state] || this.options[state])

    // push to event loop to allow forms to submit
    setTimeout(function () {
      state == 'loadingText' ?
        $el.addClass(d).attr(d, d) :
        $el.removeClass(d).removeAttr(d);
    }, 0)
  }

  Button.prototype.toggle = function () {
    var $parent = this.$element.closest('[data-toggle="buttons"]')
    var changed = true

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') === 'radio') {
        // see if clicking on current one
        if ($input.prop('checked') && this.$element.hasClass('active'))
          changed = false
        else
          $parent.find('.active').removeClass('active')
      }
      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')
    }

    if (changed) this.$element.toggleClass('active')
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  var old = $.fn.button

  $.fn.button = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    $btn.button('toggle')
    e.preventDefault()
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.0.3
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      =
    this.sliding     =
    this.interval    =
    this.$active     =
    this.$items      = null

    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.DEFAULTS = {
    interval: 5000
  , pause: 'hover'
  , wrap: true
  }

  Carousel.prototype.cycle =  function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getActiveIndex = function () {
    this.$active = this.$element.find('.item.active')
    this.$items  = this.$active.parent().children()

    return this.$items.index(this.$active)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getActiveIndex()

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) })
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition.end) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || $active[type]()
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var fallback  = type == 'next' ? 'first' : 'last'
    var that      = this

    if (!$next.length) {
      if (!this.options.wrap) return
      $next = this.$element.find('.item')[fallback]()
    }

    this.sliding = true

    isCycling && this.pause()

    var e = $.Event('slide.bs.carousel', { relatedTarget: $next[0], direction: direction })

    if ($next.hasClass('active')) return

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      this.$element.one('slid.bs.carousel', function () {
        var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
        $nextIndicator && $nextIndicator.addClass('active')
      })
    }

    if ($.support.transition && this.$element.hasClass('slide')) {
      this.$element.trigger(e)
      if (e.isDefaultPrevented()) return
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid.bs.carousel') }, 0)
        })
        .emulateTransitionEnd(600)
    } else {
      this.$element.trigger(e)
      if (e.isDefaultPrevented()) return
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger('slid.bs.carousel')
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this   = $(this), href
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    $target.carousel(options)

    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  })

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      $carousel.carousel($carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.0.3
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.transitioning = null

    if (this.options.parent) this.$parent = $(this.options.parent)
    if (this.options.toggle) this.toggle()
  }

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var actives = this.$parent && this.$parent.find('> .panel > .in')

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse')
      if (hasData && hasData.transitioning) return
      actives.collapse('hide')
      hasData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')
      [dimension](0)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('in')
        [dimension]('auto')
      this.transitioning = 0
      this.$element.trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one($.support.transition.end, $.proxy(complete, this))
      .emulateTransitionEnd(350)
      [dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element
      [dimension](this.$element[dimension]())
      [0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse')
      .removeClass('in')

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .trigger('hidden.bs.collapse')
        .removeClass('collapsing')
        .addClass('collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one($.support.transition.end, $.proxy(complete, this))
      .emulateTransitionEnd(350)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this   = $(this), href
    var target  = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
    var $target = $(target)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()
    var parent  = $this.attr('data-parent')
    var $parent = parent && $(parent)

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass('collapsed')
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    }

    $target.collapse(option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.0.3
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle=dropdown]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
      }

      $parent.trigger(e = $.Event('show.bs.dropdown'))

      if (e.isDefaultPrevented()) return

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown')

      $this.focus()
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive || (isActive && e.keyCode == 27)) {
      if (e.which == 27) $parent.find(toggle).focus()
      return $this.click()
    }

    var $items = $('[role=menu] li:not(.divider):visible a', $parent)

    if (!$items.length) return

    var index = $items.index($items.filter(':focus'))

    if (e.keyCode == 38 && index > 0)                 index--                        // up
    if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
    if (!~index)                                      index=0

    $items.eq(index).focus()
  }

  function clearMenus() {
    $(backdrop).remove()
    $(toggle).each(function (e) {
      var $parent = getParent($(this))
      if (!$parent.hasClass('open')) return
      $parent.trigger(e = $.Event('hide.bs.dropdown'))
      if (e.isDefaultPrevented()) return
      $parent.removeClass('open').trigger('hidden.bs.dropdown')
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  var old = $.fn.dropdown

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api'  , toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle + ', [role=menu]' , Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.0.3
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options   = options
    this.$element  = $(element)
    this.$backdrop =
    this.isShown   = null

    if (this.options.remote) this.$element.load(this.options.remote)
  }

  Modal.DEFAULTS = {
      backdrop: true
    , keyboard: true
    , show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this[!this.isShown ? 'show' : 'hide'](_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.escape()

    this.$element.on('click.dismiss.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(document.body) // don't move modals dom position
      }

      that.$element.show()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$element.find('.modal-dialog') // wait for modal to slide in
          .one($.support.transition.end, function () {
            that.$element.focus().trigger(e)
          })
          .emulateTransitionEnd(300) :
        that.$element.focus().trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one($.support.transition.end, $.proxy(this.hideModal, this))
        .emulateTransitionEnd(300) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.focus()
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.removeBackdrop()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that    = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .appendTo(document.body)

      this.$element.on('click.dismiss.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus.call(this.$element[0])
          : this.hide.call(this)
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one($.support.transition.end, callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      $.support.transition && this.$element.hasClass('fade')?
        this.$backdrop
          .one($.support.transition.end, callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (callback) {
      callback()
    }
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  var old = $.fn.modal

  $.fn.modal = function (option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
    var option  = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    e.preventDefault()

    $target
      .modal(option, this)
      .one('hide', function () {
        $this.is(':visible') && $this.focus()
      })
  })

  $(document)
    .on('show.bs.modal',  '.modal', function () { $(document.body).addClass('modal-open') })
    .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.0.3
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       =
    this.options    =
    this.enabled    =
    this.timeout    =
    this.hoverState =
    this.$element   = null

    this.init('tooltip', element, options)
  }

  Tooltip.DEFAULTS = {
    animation: true
  , placement: 'top'
  , selector: false
  , template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
  , trigger: 'hover focus'
  , title: ''
  , delay: 0
  , html: false
  , container: false
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled  = true
    this.type     = type
    this.$element = $(element)
    this.options  = this.getOptions(options)

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focus'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay
      , hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.'+ this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      var $tip = this.tip()

      this.setContent()

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var $parent = this.$element.parent()

        var orgPlacement = placement
        var docScroll    = document.documentElement.scrollTop || document.body.scrollTop
        var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth()
        var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight()
        var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left

        placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :
                    placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :
                    placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :
                    placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)
      this.$element.trigger('shown.bs.' + this.type)
    }
  }

  Tooltip.prototype.applyPlacement = function(offset, placement) {
    var replace
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    $tip
      .offset(offset)
      .addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      replace = true
      offset.top = offset.top + height - actualHeight
    }

    if (/bottom|top/.test(placement)) {
      var delta = 0

      if (offset.left < 0) {
        delta       = offset.left * -2
        offset.left = 0

        $tip.offset(offset)

        actualWidth  = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight
      }

      this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
    } else {
      this.replaceArrow(actualHeight - height, actualHeight, 'top')
    }

    if (replace) $tip.offset(offset)
  }

  Tooltip.prototype.replaceArrow = function(delta, dimension, position) {
    this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + "%") : '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function () {
    var that = this
    var $tip = this.tip()
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && this.$tip.hasClass('fade') ?
      $tip
        .one($.support.transition.end, complete)
        .emulateTransitionEnd(150) :
      complete()

    this.$element.trigger('hidden.bs.' + this.type)

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function () {
    var el = this.$element[0]
    return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
      width: el.offsetWidth
    , height: el.offsetHeight
    }, this.$element.offset())
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.tip = function () {
    return this.$tip = this.$tip || $(this.options.template)
  }

  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow')
  }

  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide()
      this.$element = null
      this.options  = null
    }
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type) : this
    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function () {
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  var old = $.fn.tooltip

  $.fn.tooltip = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.0.3
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.DEFAULTS = $.extend({} , $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right'
  , trigger: 'click'
  , content: ''
  , template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow')
  }

  Popover.prototype.tip = function () {
    if (!this.$tip) this.$tip = $(this.options.template)
    return this.$tip
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  var old = $.fn.popover

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.0.3
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    var href
    var process  = $.proxy(this.process, this)

    this.$element       = $(element).is('body') ? $(window) : $(element)
    this.$body          = $('body')
    this.$scrollElement = this.$element.on('scroll.bs.scroll-spy.data-api', process)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.offsets        = $([])
    this.targets        = $([])
    this.activeTarget   = null

    this.refresh()
    this.process()
  }

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = this.$element[0] == window ? 'offset' : 'position'

    this.offsets = $([])
    this.targets = $([])

    var self     = this
    var $targets = this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#\w/.test(href) && $(href)

        return ($href
          && $href.length
          && [[ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        self.offsets.push(this[0])
        self.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
    var maxScroll    = scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets.last()[0]) && this.activate(i)
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
        && this.activate( targets[i] )
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    $(this.selector)
      .parents('.active')
      .removeClass('active')

    var selector = this.selector
      + '[data-target="' + target + '"],'
      + this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length)  {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.0.3
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var previous = $ul.find('.active:last a')[0]
    var e        = $.Event('show.bs.tab', {
      relatedTarget: previous
    })

    $this.trigger(e)

    if (e.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.parent('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab'
      , relatedTarget: previous
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && $active.hasClass('fade')

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')

      element.addClass('active')

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active')
      }

      callback && callback()
    }

    transition ?
      $active
        .one($.support.transition.end, next)
        .emulateTransitionEnd(150) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.0.3
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================================== */


+function ($) { 

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)
    this.$window = $(window)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element = $(element)
    this.affixed  =
    this.unpin    = null

    this.checkPosition()
  }

  Affix.RESET = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
    var scrollTop    = this.$window.scrollTop()
    var position     = this.$element.offset()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top()
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom()

    var affix = this.unpin   != null && (scrollTop + this.unpin <= position.top) ? false :
                offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? 'bottom' :
                offsetTop    != null && (scrollTop <= offsetTop) ? 'top' : false

    if (this.affixed === affix) return
    if (this.unpin) this.$element.css('top', '')

    this.affixed = affix
    this.unpin   = affix == 'bottom' ? position.top - scrollTop : null

    this.$element.removeClass(Affix.RESET).addClass('affix' + (affix ? '-' + affix : ''))

    if (affix == 'bottom') {
      this.$element.offset({ top: document.body.offsetHeight - offsetBottom - this.$element.height() })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  var old = $.fn.affix

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom) data.offset.bottom = data.offsetBottom
      if (data.offsetTop)    data.offset.top    = data.offsetTop

      $spy.affix(data)
    })
  })

}(jQuery);

define("bootstrap", function(){});

/**
 * @module Skritter
 * @class Application
 * @param Api
 * @param Functions
 * @param Router
 * @param Modal
 * @param Timer
 * @param Assets
 * @param Settings
 * @param User
 * @param IndexedDBAdapter
 * @param async
 * @param moment
 * @author Joshua McFarland
 */

define('Application',[
    'Api',
    'Functions',
    'Router',
    'components/Modal',
    'components/Timer',
    'models/Assets',
    'models/Settings',
    'models/User',
    'storage/IndexedDBAdapter',
    'async',
    'moment',
    'bootstrap'
], function(Api, Functions, Router, Modal, Timer, Assets, Settings, User, IndexedDBAdapter, async, moment) {
    /**
     * @method loadAssets
     * @param {Function} callback
     */
    var loadAssets = function(callback) {
        skritter.assets = new Assets();
        skritter.async.parallel([
            skritter.async.apply(skritter.assets.loadStrokeShapes)
        ], function() {
            callback();
        });
    };

    /**
     * @method loadApi
     * @param {Function} callback
     */
    var loadApi = function(callback) {
        skritter.api = new Api();
        callback();
    };

    /**
     * @method loadFunctions
     * @param {Function} callback
     */
    var loadFunctions = function(callback) {
        skritter.fn = Functions;
        callback();
    };

    /**
     * @method loadModal
     * @param {Function} callback
     */
    var loadModal = function(callback) {
        skritter.modal = new Modal().render();
        callback();
    };

    /**
     * @method loadRouter
     * @param {Function} callback
     */
    var loadRouter = function(callback) {
        skritter.router = Router.initialize();
        if (typeof callback === 'function')
            callback();
    };

    /**
     * @method loadSettings
     * @param {Function} callback
     */
    var loadSettings = function(callback) {
        skritter.settings = new Settings();
        callback();
    };

    /**
     * @method loadStorage
     * @param {Function} callback
     */
    var loadStorage = function(callback) {
        skritter.storage = new IndexedDBAdapter();
        callback();
    };

    /**
     * @method loadTimer
     * @param {Function} callback
     */
    var loadTimer = function(callback) {
        skritter.timer = new Timer();
        callback();
    };

    /**
     * @method loadUser
     * @param {Function} callback
     */
    var loadUser = function(callback) {
        skritter.user = new User();
        if (skritter.user.isLoggedIn()) {
            //don't display the loading account modal if initial download
            if (skritter.user.getLastSync())
                skritter.modal.show('progress').setTitle('Loading Account');
            skritter.storage.openDatabase(skritter.user.get('user_id'), function() {
                skritter.async.series([
                    skritter.async.apply(skritter.settings.refreshDate),
                    skritter.async.apply(skritter.user.loadAllData),
                    function(callback) {
                        if (!skritter.user.getLastSync()) {
                            skritter.modal.show('progress').setTitle('Initial Download').setProgress('100');
                            skritter.user.sync(function() {
                                skritter.modal.hide();
                                callback();
                            });
                        } else {
                            skritter.modal.hide();
                            callback();
                        }
                    }
                ], callback);
            });
        } else {
            callback();
        }
    };

    /**
     * @method initialize
     */
    var initialize = function() {
        skritter.async = async;
        skritter.moment = moment;
        skritter.async.series([
            skritter.async.apply(loadApi),
            skritter.async.apply(loadAssets),
            skritter.async.apply(loadFunctions),
            skritter.async.apply(loadModal),
            skritter.async.apply(loadSettings),
            skritter.async.apply(loadStorage),
            skritter.async.apply(loadTimer),
            skritter.async.apply(loadUser)
        ], function() {
            console.log('application initialized');
            loadRouter();
        });
    };

    return {
        initialize: initialize
    };
});